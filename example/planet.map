{"version":3.0,"file":"planet.js","sourceRoot":"","names":["raw_array_sub","a","i","l","b","Array","j","caml_subarray_to_string","len","f","String","null","s","Math","caml_convert_string_to_array","joo_global_object","caml_blit_bytes","s1","i1","s2","i2","c1","c2","caml_blit_string","caml_bytes_of_string","caml_raise_with_arg","tag","arg","caml_str_repeat","n","r","caml_convert_string_to_bytes","caml_is_ascii","caml_utf16_of_utf8","t","c","v","caml_to_js_string","MlBytes","contents","length","this","content","caml_new_string","caml_raise_with_string","msg","caml_global_data","caml_invalid_argument","caml_string_bound_error","caml_bytes_unsafe_set","caml_bytes_set","caml_bytes_unsafe_get","raw_array_append_one","x","caml_call_gen","args","argsLen","d","caml_array_bound_error","caml_check_bound","array","index","caml_classify_float","isFinite","isNaN","caml_int64_compare","y","x3","y3","caml_int_compare","caml_string_compare","caml_compare_val","total","stack","ta","tb","cmp","NaN","caml_compare","caml_convert_raw_backtrace","caml_create_bytes","caml_fill_bytes","caml_jsbytes_of_string","caml_parse_format","fmt","caml_finish_formatting","rawbuffer","buffer","caml_format_float","prec","Infinity","exp","p","caml_format_int","caml_oo_last_id","caml_fresh_oo_id","caml_get_exception_raw_backtrace","caml_greaterequal","caml_utf8_of_utf16","caml_js_to_string","caml_hexstring_of_float","style","sign","exp_sign","sign_str","cst","x_str","idx","size","caml_int64_is_zero","caml_int64_of_int32","caml_obj_dup","caml_int64_sub","z1","z2","z3","caml_int64_ucompare","caml_int64_lsl1","caml_int64_lsr1","caml_int64_udivmod","offset","modulus","divisor","quotient","caml_int64_to_int32","caml_int64_is_negative","caml_int64_neg","y1","y2","caml_int64_format","wbase","cvtbl","caml_js_from_array","caml_js_call","o","caml_js_get_console","m","caml_js_regexps","caml_js_html_escape","caml_js_wrap_callback","arguments","undefined","caml_make_vect","init","caml_ml_bytes_length","caml_raise_sys_error","caml_ml_channels","caml_ml_flush","chanid","chan","output","caml_current_dir","caml_make_path","name","comp","ncomp","caml_raise_no_such_file","caml_string_of_array","caml_bytes_get","MlFile","MlFakeFile","old","buf","pos","clen","new_str","old_data","MlFakeDevice","root","res","name_slash","RegExp","seen","ok","file","mlstring","caml_array_of_string","Buffer","MlNodeFile","fd","require","buf_offset","MlNodeDevice","consts","key","caml_root","fs_node_supported","jsoo_mount_point","resolve_fs_device","path","caml_ml_string_length","caml_std_output","str","slen","js_print_stderr","g","js_print_stdout","caml_sys_open_internal","flags","info","caml_sys_open","_perms","caml_ml_open_descriptor_in","data","channel","caml_ml_open_descriptor_out","caml_ml_out_channels_list","caml_ml_output_bytes","string","jsstring","id","caml_ml_output","caml_ml_output_char","caml_raise_constant","caml_raise_zero_divide","caml_mod","caml_mul","caml_notequal","caml_obj_tag","caml_register_global","name_opt","caml_named_values","caml_register_named_value","nm","caml_string_unsafe_get","caml_string_get","caml_string_of_bytes","caml_sys_const_backend_type","caml_sys_const_max_wosize","caml_sys_exit","code","caml_raise_not_found","caml_sys_getenv","caml_trampoline","caml_trampoline_return","caml_update_dummy","caml_return_exn_constant","caml_named_value","caml_wrap_exception","e","locfmt","api_function_name","erase_rel","rest","rest$0","rest$1","rest$2","rest$3","rest$4","rest$5","rest$6","rest$7","ty","rest$8","ty1","rest$9","rest$10","rest$11","rest$12","rest$13","concat_fmtty","fmtty1","fmtty2","ty2","concat_fmt","fmt1","fmt2","pad","pad$0","pad$1","iconv","prec$0","pad$2","iconv$0","prec$1","pad$3","iconv$1","prec$2","pad$4","iconv$2","prec$3","pad$5","fconv","pad$6","chr","fmtty","pad$7","fmtty$0","pad$8","rest$14","rest$15","rest$16","fmting_lit","rest$17","fmting_gen","rest$18","rest$19","char_set","width_opt","rest$20","counter","rest$21","rest$22","ign","rest$23","arity","invalid_arg","abs","_a_","l1","l2","string_of_bool","stderr","output_string","oc","prerr_string","do_at_exit","iter","make","sub_string","ofs","blit","ofs1","ofs2","blit$0","index_rec","lim","i$0","i$1","contains_from","contains","map","height","h","create","hl","hr","singleton","bal","h$0","lr","ld","lv","ll","lrr","lrd","lrv","lrl","rr","rd","rv","rl","rlr","rld","rlv","rll","empty","is_empty","add","find","param$1","find_first","r$0","d$0","v$0","l$0","find_first_opt","find_last","find_last_opt","find_opt","mem","min_binding","min_binding_opt","max_binding","max_binding_opt","remove_min_binding","match","remove","update","data$0","mapi","fold","accu","m$0","accu$0","accu$1","for_all","exists","add_min_binding","k","add_max_binding","join","rh","lh","concat","concat_or_join","t1","t2","split","pres","pres$0","merge","h1","r1","d1","v1","r2","d2","r2$0","d2$0","v2","l2$0","r1$0","d1$0","l1$0","union","h2","d2$1","d1$1","filter","pvd","partition","lf","lt","rf","rt","cons_enum","e$0","m$1","e$1","compare","m1","m2","e2$2","e1$2","e1","e2","e2$0","e1$0","c$0","e2$1","e1$1","equal","cardinal","bindings_aux","bindings","add_seq","acc","seq","next","acc$0","of_seq","seq_of_enum","to_seq","to_seq_from","low","q","cell","resize","more","new_len","new_buffer","add_string","new_position","default_float_precision","buffer_create","init_size","buffer_check_size","overhead","buffer_add_char","buffer_add_string","str_len","buffer_contents","string_of_formatting_lit","formatting_lit","str$0","bprint_fmtty","sub_fmtty","sub_fmtty$0","symm","fmtty_rel_det","de","ed","af","fa","de$0","ed$0","af$0","fa$0","de$1","ed$1","af$1","fa$1","de$2","ed$2","af$2","fa$2","de$3","ed$3","af$3","fa$3","de$4","ed$4","af$4","fa$4","de$5","ed$5","af$5","fa$5","de$6","ed$6","af$6","fa$6","de$7","ed$7","af$7","fa$7","de$8","ed$8","af$8","fa$8","trans","jd","dj","ga","ag","de$9","ed$9","af$9","fa$9","de$10","ed$10","af$10","fa$10","de$11","ed$11","af$11","fa$11","de$12","ed$12","af$12","fa$12","de$13","ed$13","af$13","fa$13","rest2","rest2$0","rest2$1","rest2$2","rest2$3","rest2$4","rest2$5","rest2$6","rest2$7","rest2$8","ty22","ty21","f4","f2","rest2$9","rest2$10","rest2$11","rest2$12","rest2$13","type_padding","w","padty","padty$0","type_padprec","type_ignored_param_one","type_format_gen","fmt$0","fmtty_rest","fmt_rest","fmtty_rest$0","fmt_rest$0","fmtty$1","fmt$1","fmt_rest$1","fmtty_rest$1","fmtty$2","fmt$2","fmt_rest$2","fmtty_rest$2","fmtty$3","fmt$3","fmt_rest$3","fmtty_rest$3","fmtty$4","fmt$4","fmt_rest$4","fmtty_rest$4","fmtty$5","fmt$5","fmt_rest$5","fmtty_rest$5","fmtty$6","fmt$6","fmt_rest$6","fmtty_rest$6","fmtty$7","fmt$7","fmt_rest$7","fmtty_rest$7","fmtty$8","fmt$8","fmt_rest$8","fmtty_rest$8","fmtty$9","fmt$9","fmt_rest$9","fmtty$10","fmt$10","fmt_rest$10","fmtty$11","fmt$11","fmt_rest$11","fmtty$12","fmt$12","fmtty_rest$9","fmt_rest$12","pad_opt","fmtty$13","fmt$13","fmtty_rest$10","sub_fmtty1","fmt_rest$13","sub_fmtty$1","pad_opt$0","fmtty$14","fmt$14","fmtty_rest$11","fmt_rest$14","fmtty$15","fmt$15","fmtty_rest$12","fmt_rest$15","fmtty$16","fmt$16","fmt_rest$16","fmtty$17","fmt$17","fmt_rest$17","formatting_gen","fmtty3","fmt3","str$1","fmt1$0","fmtty2$0","fmt2$0","fmtty3$0","fmt3$0","fmtty_rest$13","fmt_rest$18","fmtty$18","fmt$18","fmtty_rest$14","fmt_rest$19","fmtty$19","fmt$19","fmtty_rest$15","fmt_rest$20","fmtty$20","fmt$20","fmtty_rest$16","fmtty$21","fmt$21","sub_fmtty$2","pad_opt$1","sub_fmtty$3","pad_opt$2","type_ignored_format_substitution","fmtty$22","fmt$22","sub_fmtty$4","sub_fmtty_rest","sub_fmtty_rest$0","sub_fmtty_rest$1","sub_fmtty_rest$2","sub_fmtty_rest$3","sub_fmtty_rest$4","sub_fmtty_rest$5","sub_fmtty_rest$6","sub_fmtty_rest$7","sub_fmtty_rest$8","sub_fmtty_rest$9","sub_fmtty_rest$10","sub_fmtty_rest$11","sub_fmtty_rest$12","sub_fmtty_rest$13","sub_fmtty_rest$14","sub2_fmtty","sub_fmtty_rest$15","sub2_fmtty$0","sub_fmtty_rest$16","sub2_fmtty$1","sub1_fmtty","sub_fmtty_rest$17","sub2_fmtty$2","sub1_fmtty$0","sub_fmtty_rest$18","sub_fmtty_rest$19","sub_fmtty_rest$20","sub_fmtty_rest$21","sub_fmtty_rest$22","sub_fmtty_rest$23","sub_fmtty_rest$24","sub_fmtty_rest$25","sub_fmtty_rest$26","fix_padding","width","fix_int_precision","res$1","res$0","string_to_caml_string","n$0","i$2","s$0","convert_int","convert_int32","convert_nativeint","convert_int64","convert_float","symb","make_int_padding_precision","make_printf","p$0","p$1","make_padding","new_acc","make_printf$0","k$0","acc$1","acc$2","acc$3","acc$4","k$3","koc","kacc","k$1","k$4","k$2","make_invalid_arg","make_from_fmtty$0","make_custom$0","make_from_fmtty","arity$0","make_custom","output_acc","p$2","p$3","p$4","strput_acc","fprintf","ksprintf","sprintf","printers","field","other_fields","fields","to_string","conv","tl","hd","char$0","line","char$1","line$0","file$0","char$2","line$1","file$1","constructor","print_backtrace","outchan","raw_backtrace","backtrace","slot","info$0","is_raise","register_printer","fn","params","register_exception","exn","window","no_handler","undefined$0","test","true$0","false$0","array_length","date_ms","add$0","handler","event","addEventListener","typ","capt","ev","callback","mouseup","mousemove","doc","type","doc$0","elt","el","createInput","createLabel","createDiv","html_element","overflow_limit","create$0","underlying","set_promise_state","state","current_storage","concat_regular_callbacks","clean_up_callback_cells","callbacks","add_implicitly_removed_callback","node$0","node","async_exception_hook","handle_with_async_exception_hook","run_callbacks","result","is_canceled","iter_callback_list$2","fs","fs$0","iter_list$0","fs$1","fs$2","storage","iter_callback_list","iter_callback_list$1","iter_list","f$0","iter_callback_list$0","current_callback_nesting_depth","default_maximum_callback_nesting_depth","run_in_resolution_loop","storage_snapshot","result$0","resolve","allow_deferring$0","maximum_callback_nesting_depth$0","sth","allow_deferring","sth$0","maximum_callback_nesting_depth","should_defer","run_callback_or_defer_it","opt","if_deferred","run_immediately_and_ensure_tail_call","deferred_result","deferred_callback","immediate_result","deferred_record","wakeup","fail","new_pending","how_to_cancel","task","make_into_proxy","outer_promise","user_provided_promise","p_callbacks","outer_callbacks","regular_callbacks","cleanups_deferred","regular_callbacks$0","cleanups_deferred$0","cancel_callbacks","bind","create_result_promise_and_callback_if_deferred","saved_storage","p_result","pause_hook","wakeup_paused","curr","curr$0","register_pause_notifier","sleep","loop","step","step$0","remain","cb","prerr_string$0","obliquity","dark","toggle_button","txt1","txt2","action","txt1$0","txt2$0","checkbox","txt","checked","lab","vect","x2","x1","matrix_vect_mul","z","r3","x$0","y$0","z$0","matrix_transp","matrix_mul","xz_rotation","phi","cos_phi","sin_phi","xy_rotation","matrix_identity","rotate_normal","rotate_object","p_div","t_div","p_delta","t_delta","t_offset","north","vertices","faces","south","theta","create_canvas","u","draw","ctx","img","shd","uv","normals","face_info","dir","v3","y1$0","x1$0","y2$0","x2$0","dv","du","dv3","du3","dv2","du2","v1$0","u1","dx2","dx3","dy2","dy3","src","texture","canvas","update_shadow","cos_obl","sin_obl","c$1","w$1","h$1","ctx$0","no_lighting","update_texture","lighting","phi$0","canvas$0","canvas$1","ctx$1","ctx$2","tw","th","cst1","cst2","cst3","v2$0","v3$0","u2","u3","mid","u1$0","u2$0","u3$0","mth","u1$1","u2$1","u3$1","u1$2","u2$2","u3$2","v1$1","v2$1","v3$1","su","sv","dv3$0","dv2$0","du3$0","du2$0","u$0","paused","follow","clipped","obl","m_obliq","phi_rot","rateText","ctrl","form","br","o$0","form$0","mx","my","dx","dy","ti","fps","rotation","t$0","hz","hz$0","dt","dt$0","angle","match$0"],"mappings":"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","sources":["/home/gabriel/Sources/js_of_ocaml/_build/default/examples/planet/../../../install/default/lib/js_of_ocaml-compiler/stdlib.js","/home/gabriel/Sources/js_of_ocaml/_build/default/examples/planet/../../../install/default/lib/js_of_ocaml-compiler/mlString.js","/home/gabriel/Sources/js_of_ocaml/_build/default/examples/planet/../../../install/default/lib/js_of_ocaml-compiler/ieee_754.js","/home/gabriel/Sources/js_of_ocaml/_build/default/examples/planet/../../../install/default/lib/js_of_ocaml-compiler/int64.js","/home/gabriel/Sources/js_of_ocaml/_build/default/examples/planet/../../../install/default/lib/js_of_ocaml-compiler/jslib_js_of_ocaml.js","/home/gabriel/Sources/js_of_ocaml/_build/default/examples/planet/../../../install/default/lib/js_of_ocaml-compiler/jslib.js","/home/gabriel/Sources/js_of_ocaml/_build/default/examples/planet/../../../install/default/lib/js_of_ocaml-compiler/io.js","/home/gabriel/Sources/js_of_ocaml/_build/default/examples/planet/../../../install/default/lib/js_of_ocaml-compiler/fs.js","/home/gabriel/Sources/js_of_ocaml/_build/default/examples/planet/../../../install/default/lib/js_of_ocaml-compiler/fs_fake.js","/home/gabriel/Sources/js_of_ocaml/_build/default/examples/planet/../../../install/default/lib/js_of_ocaml-compiler/fs_node.js","/home/gabriel/.opam/tools/lib/ocaml/stdlib.ml","/home/gabriel/.opam/tools/lib/ocaml/printexc.ml","/home/gabriel/.opam/tools/lib/lwt/lwt.ml","/home/gabriel/Sources/js_of_ocaml/_build/default/examples/planet/planet.ml","/home/gabriel/.opam/tools/lib/ocaml/camlinternalFormatBasics.ml","/home/gabriel/.opam/tools/lib/ocaml/bytes.ml","/home/gabriel/.opam/tools/lib/ocaml/string.ml","/home/gabriel/.opam/tools/lib/ocaml/array.ml","/home/gabriel/.opam/tools/lib/ocaml/map.ml","/home/gabriel/.opam/tools/lib/ocaml/seq.ml","/home/gabriel/.opam/tools/lib/ocaml/queue.ml","/home/gabriel/.opam/tools/lib/ocaml/buffer.ml","/home/gabriel/.opam/tools/lib/ocaml/camlinternalFormat.ml","/home/gabriel/.opam/tools/lib/ocaml/char.ml","/home/gabriel/.opam/tools/lib/ocaml/printf.ml","/home/gabriel/.opam/tools/lib/ocaml/obj.ml","/home/gabriel/.opam/tools/lib/ocaml/hashtbl.ml","/home/gabriel/.opam/tools/lib/ocaml/callback.ml","/home/gabriel/Sources/js_of_ocaml/_build/default/lib/js_of_ocaml/js.ml","/home/gabriel/Sources/js_of_ocaml/_build/default/lib/js_of_ocaml/dom_html.ml","/home/gabriel/Sources/js_of_ocaml/_build/default/lib/js_of_ocaml/dom.ml","/home/gabriel/.opam/tools/lib/lwt/lwt_sequence.ml","/home/gabriel/Sources/js_of_ocaml/_build/default/lib/lwt/lwt_js.ml","/home/gabriel/.opam/tools/lib/ocaml/list.ml","/home/gabriel/.opam/tools/lib/ocaml/std_exit.ml"],"sourcesContent":["// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Core\n\n//Provides: raw_array_sub\nfunction raw_array_sub (a,i,l) {\n  var b = new Array(l);\n  for(var j = 0; j < l; j++) b[j] = a[i+j];\n  return b\n}\n\n//Provides: raw_array_copy\nfunction raw_array_copy (a) {\n  var l = a.length;\n  var b = new Array(l);\n  for(var i = 0; i < l; i++ ) b[i] = a[i];\n  return b\n}\n\n//Provides: raw_array_cons\nfunction raw_array_cons (a,x) {\n  var l = a.length;\n  var b = new Array(l+1);\n  b[0]=x;\n  for(var i = 1; i <= l; i++ ) b[i] = a[i-1];\n  return b\n}\n\n//Provides: raw_array_append_one\nfunction raw_array_append_one(a,x) {\n  var l = a.length;\n  var b = new Array(l+1);\n  var i = 0;\n  for(; i < l; i++ ) b[i] = a[i];\n  b[i]=x;\n  return b\n}\n\n//Provides: caml_call_gen (const, shallow)\n//Requires: raw_array_sub\n//Requires: raw_array_append_one\nfunction caml_call_gen(f, args) {\n  if(f.fun)\n    return caml_call_gen(f.fun, args);\n  var n = f.length;\n  var argsLen = args.length;\n  var d = n - argsLen;\n  if (d == 0)\n    return f.apply(null, args);\n  else if (d < 0)\n    return caml_call_gen(f.apply(null,\n                                 raw_array_sub(args,0,n)),\n                         raw_array_sub(args,n,argsLen - n));\n  else\n    return function (x){ return caml_call_gen(f, raw_array_append_one(args,x)); };\n}\n\n//Provides: caml_named_values\nvar caml_named_values = {};\n\n//Provides: caml_register_named_value (const,const)\n//Requires: caml_named_values, caml_jsbytes_of_string\nfunction caml_register_named_value(nm,v) {\n  caml_named_values[caml_jsbytes_of_string(nm)] = v;\n  return 0;\n}\n\n//Provides: caml_named_value\n//Requires: caml_named_values\nfunction caml_named_value(nm) {\n  return caml_named_values[nm]\n}\n\n//Provides: caml_global_data\nvar caml_global_data = [0];\n\n//Provides: caml_register_global (const, shallow, const)\n//Requires: caml_global_data\nfunction caml_register_global (n, v, name_opt) {\n  if(name_opt && joo_global_object.toplevelReloc)\n    n = joo_global_object.toplevelReloc(name_opt);\n  caml_global_data[n + 1] = v;\n  if(name_opt) caml_global_data[name_opt] = v;\n}\n\n//Provides: caml_get_global_data mutable\n//Requires: caml_global_data\nfunction caml_get_global_data () { return caml_global_data; }\n\n//Raise exception\n\n\n//Provides: caml_raise_constant (const)\nfunction caml_raise_constant (tag) { throw tag; }\n\n//Provides: caml_return_exn_constant (const)\nfunction caml_return_exn_constant (tag) { return tag; }\n\n//Provides: caml_raise_with_arg (const, const)\nfunction caml_raise_with_arg (tag, arg) { throw [0, tag, arg]; }\n\n//Provides: caml_raise_with_string (const, const)\n//Requires: caml_raise_with_arg,caml_new_string\nfunction caml_raise_with_string (tag, msg) {\n  caml_raise_with_arg (tag, caml_new_string (msg));\n}\n\n//Provides: caml_raise_sys_error (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_raise_sys_error (msg) {\n  caml_raise_with_string(caml_global_data.Sys_error, msg);\n}\n\n//Provides: caml_failwith (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_failwith (msg) {\n  caml_raise_with_string(caml_global_data.Failure, msg);\n}\n\n//Provides: caml_wrap_exception const (const)\n//Requires: caml_global_data,caml_js_to_string,caml_named_value\n//Requires: caml_return_exn_constant\nfunction caml_wrap_exception(e) {\n  if(e instanceof Array) return e;\n  //Stack_overflow: chrome, safari\n  if(joo_global_object.RangeError\n     && e instanceof joo_global_object.RangeError\n     && e.message\n     && e.message.match(/maximum call stack/i))\n    return caml_return_exn_constant(caml_global_data.Stack_overflow);\n  //Stack_overflow: firefox\n  if(joo_global_object.InternalError\n     && e instanceof joo_global_object.InternalError\n     && e.message\n     && e.message.match(/too much recursion/i))\n    return caml_return_exn_constant(caml_global_data.Stack_overflow);\n  //Wrap Error in Js.Error exception\n  if(e instanceof joo_global_object.Error && caml_named_value(\"jsError\"))\n    return [0,caml_named_value(\"jsError\"),e];\n  //fallback: wrapped in Failure\n  return [0,caml_global_data.Failure,caml_js_to_string (String(e))];\n}\n\n// Experimental\n//Provides: caml_exn_with_js_backtrace\n//Requires: caml_global_data\nfunction caml_exn_with_js_backtrace(exn, force) {\n  //never reraise for constant exn\n  if(!exn.js_error || force || exn[0] == 248) exn.js_error = new joo_global_object.Error(\"Js exception containing backtrace\");\n  return exn;\n}\n//Provides: caml_js_error_of_exception\nfunction caml_js_error_of_exception(exn) {\n  if(exn.js_error) { return exn.js_error; }\n  return null;\n}\n\n//Provides: caml_invalid_argument (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_invalid_argument (msg) {\n  caml_raise_with_string(caml_global_data.Invalid_argument, msg);\n}\n\n//Provides: caml_raise_end_of_file\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_end_of_file () {\n  caml_raise_constant(caml_global_data.End_of_file);\n}\n\n//Provides: caml_raise_zero_divide\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_zero_divide () {\n  caml_raise_constant(caml_global_data.Division_by_zero);\n}\n\n//Provides: caml_raise_not_found\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_not_found () {\n  caml_raise_constant(caml_global_data.Not_found); }\n\n\n//Provides: caml_array_bound_error\n//Requires: caml_invalid_argument\nfunction caml_array_bound_error () {\n  caml_invalid_argument(\"index out of bounds\");\n}\n\n//Provides: caml_update_dummy\nfunction caml_update_dummy (x, y) {\n  if( typeof y===\"function\" ) { x.fun = y; return 0; }\n  if( y.fun ) { x.fun = y.fun; return 0; }\n  var i = y.length; while (i--) x[i] = y[i]; return 0;\n}\n\n//Provides: caml_obj_is_block const (const)\nfunction caml_obj_is_block (x) { return +(x instanceof Array); }\n\n//Provides: caml_obj_tag\n//Requires: MlBytes\nfunction caml_obj_tag (x) { return (x instanceof Array)?x[0]:(x instanceof MlBytes)?252:1000; }\n//Provides: caml_obj_set_tag (mutable, const)\nfunction caml_obj_set_tag (x, tag) { x[0] = tag; return 0; }\n//Provides: caml_obj_block const (const,const)\nfunction caml_obj_block (tag, size) {\n  var o = new Array(size+1);\n  o[0]=tag;\n  for (var i = 1; i <= size; i++) o[i] = 0;\n  return o;\n}\n//Provides: caml_obj_dup mutable (const)\nfunction caml_obj_dup (x) {\n  var l = x.length;\n  var a = new Array(l);\n  for(var i = 0; i < l; i++ ) a[i] = x[i];\n  return a;\n}\n//Provides: caml_obj_truncate (mutable, const)\n//Requires: caml_invalid_argument\nfunction caml_obj_truncate (x, s) {\n  if (s<=0 || s + 1 > x.length)\n    caml_invalid_argument (\"Obj.truncate\");\n  if (x.length != s + 1) x.length = s + 1;\n  return 0;\n}\n\n//Provides: caml_lazy_make_forward const (const)\nfunction caml_lazy_make_forward (v) { return [250, v]; }\n\n//Provides: caml_mul const\nif (!Math.imul)\n  Math.imul =\n  function (x,y) {\n    y |= 0;\n    return ((((x >> 16) * y) << 16) + (x & 0xffff) * y)|0;\n  };\nvar caml_mul = Math.imul;\n\n//slightly slower\n// function mul32(x,y) {\n//   var xlo = x & 0xffff;\n//   var xhi = x - xlo;\n//   return (((xhi * y) |0) + xlo * y)|0;\n// }\n\n//Provides: caml_div\n//Requires: caml_raise_zero_divide\nfunction caml_div(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return (x/y)|0;\n}\n\n//Provides: caml_mod\n//Requires: caml_raise_zero_divide\nfunction caml_mod(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return x%y;\n}\n\n///////////// Pervasive\n//Provides: caml_array_set (mutable, const, const)\n//Requires: caml_array_bound_error\nfunction caml_array_set (array, index, newval) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  array[index+1]=newval; return 0;\n}\n\n//Provides: caml_array_get mutable (const, const)\n//Requires: caml_array_bound_error\nfunction caml_array_get (array, index) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  return array[index+1];\n}\n\n//Provides: caml_check_bound (const, const)\n//Requires: caml_array_bound_error\nfunction caml_check_bound (array, index) {\n  if (index >>> 0 >= array.length - 1) caml_array_bound_error();\n  return array;\n}\n\n//Provides: caml_make_vect const (const, const)\nfunction caml_make_vect (len, init) {\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=0;\n  for (var i = 1; i < len; i++) b[i] = init;\n  return b;\n}\n\n//Provides: caml_make_float_vect const (const)\nfunction caml_make_float_vect(len){\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n//Provides: caml_floatarray_create const (const)\nfunction caml_floatarray_create(len){\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n\n//Provides: caml_compare_val (const, const, const)\n//Requires: MlBytes, caml_int64_compare, caml_int_compare, caml_string_compare\n//Requires: caml_invalid_argument\nfunction caml_compare_val (a, b, total) {\n  var stack = [];\n  for(;;) {\n    if (!(total && a === b)) {\n      if (a instanceof MlBytes) {\n        if (b instanceof MlBytes) {\n          if (a !== b) {\n            var x = caml_string_compare(a, b);\n            if (x != 0) return x;\n          }\n        } else\n          // Should not happen\n          return 1;\n      } else if (a instanceof Array && a[0] === (a[0]|0)) {\n        var ta = a[0];\n        // ignore double_array_tag\n        if (ta === 254) ta=0;\n        // Forward object\n        if (ta === 250) {\n          a = a[1];\n          continue;\n        } else if (b instanceof Array && b[0] === (b[0]|0)) {\n          var tb = b[0];\n          // ignore double_array_tag\n          if (tb === 254) tb=0;\n          // Forward object\n          if (tb === 250) {\n            b = b[1];\n            continue;\n          } else if (ta != tb) {\n            return (ta < tb)?-1:1;\n          } else {\n            switch (ta) {\n            case 248: {\n              // Object\n              var x = caml_int_compare(a[2], b[2]);\n              if (x != 0) return x;\n              break;\n            }\n            case 251: {\n              caml_invalid_argument(\"equal: abstract value\");\n            }\n            case 255: {\n              // Int64\n              var x = caml_int64_compare(a, b);\n              if (x != 0) return x;\n              break;\n            }\n            default:\n              if (a.length != b.length) return (a.length < b.length)?-1:1;\n              if (a.length > 1) stack.push(a, b, 1);\n            }\n          }\n        } else\n          return 1;\n      } else if (b instanceof MlBytes ||\n                 (b instanceof Array && b[0] === (b[0]|0))) {\n        return -1;\n      } else if (typeof a != \"number\" && a && a.compare) {\n        var cmp = a.compare(b,total);\n        if (cmp != 0) return cmp;\n      } else if (typeof a == \"function\") {\n        caml_invalid_argument(\"compare: functional value\");\n      } else {\n        if (a < b) return -1;\n        if (a > b) return 1;\n        if (a != b) {\n          if (!total) return NaN;\n          if (a == a) return 1;\n          if (b == b) return -1;\n        }\n      }\n    }\n    if (stack.length == 0) return 0;\n    var i = stack.pop();\n    b = stack.pop();\n    a = stack.pop();\n    if (i + 1 < a.length) stack.push(a, b, i + 1);\n    a = a[i];\n    b = b[i];\n  }\n}\n//Provides: caml_compare (const, const)\n//Requires: caml_compare_val\nfunction caml_compare (a, b) { return caml_compare_val (a, b, true); }\n//Provides: caml_int_compare mutable (const, const)\nfunction caml_int_compare (a, b) {\n  if (a < b) return (-1); if (a == b) return 0; return 1;\n}\n//Provides: caml_equal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_equal (x, y) { return +(caml_compare_val(x,y,false) == 0); }\n//Provides: caml_notequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_notequal (x, y) { return +(caml_compare_val(x,y,false) != 0); }\n//Provides: caml_greaterequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterequal (x, y) { return +(caml_compare_val(x,y,false) >= 0); }\n//Provides: caml_greaterthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterthan (x, y) { return +(caml_compare_val(x,y,false) > 0); }\n//Provides: caml_lessequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessequal (x, y) { return +(caml_compare_val(x,y,false) <= 0); }\n//Provides: caml_lessthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessthan (x, y) { return +(caml_compare_val(x,y,false) < 0); }\n\n//Provides: caml_parse_sign_and_base\n//Requires: caml_string_unsafe_get, caml_ml_string_length\nfunction caml_parse_sign_and_base (s) {\n  var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;\n  if (len > 0) {\n    switch (caml_string_unsafe_get(s,i)) {\n    case 45: i++; sign = -1; break;\n    case 43: i++; sign = 1; break;\n    }\n  }\n  if (i + 1 < len && caml_string_unsafe_get(s, i) == 48)\n    switch (caml_string_unsafe_get(s, i + 1)) {\n    case 120: case 88: base = 16; i += 2; break;\n    case 111: case 79: base =  8; i += 2; break;\n    case  98: case 66: base =  2; i += 2; break;\n    }\n  return [i, sign, base];\n}\n\n//Provides: caml_parse_digit\nfunction caml_parse_digit(c) {\n  if (c >= 48 && c <= 57)  return c - 48;\n  if (c >= 65 && c <= 90)  return c - 55;\n  if (c >= 97 && c <= 122) return c - 87;\n  return -1;\n}\n\n//Provides: caml_int_of_string (const)\n//Requires: caml_ml_string_length, caml_string_unsafe_get\n//Requires: caml_parse_sign_and_base, caml_parse_digit, caml_failwith\nfunction caml_int_of_string (s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var len = caml_ml_string_length(s);\n  var threshold = -1 >>> 0;\n  var c = (i < len)?caml_string_unsafe_get(s, i):0;\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = d;\n  for (i++;i<len;i++) {\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    res = base * res + d;\n    if (res > threshold) caml_failwith(\"int_of_string\");\n  }\n  if (i != len) caml_failwith(\"int_of_string\");\n  // For base different from 10, we expect an unsigned representation,\n  // hence any value of 'res' (less than 'threshold') is acceptable.\n  // But we have to convert the result back to a signed integer.\n  res = sign * res;\n  if ((base == 10) && ((res | 0) != res))\n    /* Signed representation expected, allow -2^(nbits-1) to 2^(nbits-1) - 1 */\n    caml_failwith(\"int_of_string\");\n  return res | 0;\n}\n\n//Provides: caml_float_of_string (const)\n//Requires: caml_failwith, caml_jsbytes_of_string\nfunction caml_float_of_string(s) {\n  var res;\n  s = caml_jsbytes_of_string (s);\n  res = +s;\n  if ((s.length > 0) && (res === res)) return res;\n  s = s.replace(/_/g,\"\");\n  res = +s;\n  if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) return res;\n  var m = /^ *([+-]?)0x([0-9a-f]+)\\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);\n  //          1        2             3           4\n  if(m){\n    var m3 = m[3].replace(/0+$/,'');\n    var mantissa = parseInt(m[1] + m[2] + m3, 16);\n    var exponent = (m[4]|0) - 4*m3.length;\n    res = mantissa * Math.pow(2, exponent);\n    return res;\n  }\n  if(/^\\+?inf(inity)?$/i.test(s)) return Infinity;\n  if(/^-inf(inity)?$/i.test(s)) return -Infinity;\n  caml_failwith(\"float_of_string\");\n}\n\n//Provides: caml_is_printable const (const)\nfunction caml_is_printable(c) { return +(c > 31 && c < 127); }\n\n///////////// Format\n//Provides: caml_parse_format\n//Requires: caml_jsbytes_of_string, caml_invalid_argument\nfunction caml_parse_format (fmt) {\n  fmt = caml_jsbytes_of_string(fmt);\n  var len = fmt.length;\n  if (len > 31) caml_invalid_argument(\"format_int: format too long\");\n  var f =\n      { justify:'+', signstyle:'-', filler:' ', alternate:false,\n        base:0, signedconv:false, width:0, uppercase:false,\n        sign:1, prec:-1, conv:'f' };\n  for (var i = 0; i < len; i++) {\n    var c = fmt.charAt(i);\n    switch (c) {\n    case '-':\n      f.justify = '-'; break;\n    case '+': case ' ':\n      f.signstyle = c; break;\n    case '0':\n      f.filler = '0'; break;\n    case '#':\n      f.alternate = true; break;\n    case '1': case '2': case '3': case '4': case '5':\n    case '6': case '7': case '8': case '9':\n      f.width = 0;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.width = f.width * 10 + c; i++\n      }\n      i--;\n      break;\n    case '.':\n      f.prec = 0;\n      i++;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.prec = f.prec * 10 + c; i++\n      }\n      i--;\n    case 'd': case 'i':\n      f.signedconv = true; /* fallthrough */\n    case 'u':\n      f.base = 10; break;\n    case 'x':\n      f.base = 16; break;\n    case 'X':\n      f.base = 16; f.uppercase = true; break;\n    case 'o':\n      f.base = 8; break;\n    case 'e': case 'f': case 'g':\n      f.signedconv = true; f.conv = c; break;\n    case 'E': case 'F': case 'G':\n      f.signedconv = true; f.uppercase = true;\n      f.conv = c.toLowerCase (); break;\n    }\n  }\n  return f;\n}\n\n//Provides: caml_finish_formatting\n//Requires: caml_new_string\nfunction caml_finish_formatting(f, rawbuffer) {\n  if (f.uppercase) rawbuffer = rawbuffer.toUpperCase();\n  var len = rawbuffer.length;\n  /* Adjust len to reflect additional chars (sign, etc) */\n  if (f.signedconv && (f.sign < 0 || f.signstyle != '-')) len++;\n  if (f.alternate) {\n    if (f.base == 8) len += 1;\n    if (f.base == 16) len += 2;\n  }\n  /* Do the formatting */\n  var buffer = \"\";\n  if (f.justify == '+' && f.filler == ' ')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  if (f.signedconv) {\n    if (f.sign < 0) buffer += '-';\n    else if (f.signstyle != '-') buffer += f.signstyle;\n  }\n  if (f.alternate && f.base == 8) buffer += '0';\n  if (f.alternate && f.base == 16) buffer += \"0x\";\n  if (f.justify == '+' && f.filler == '0')\n    for (var i = len; i < f.width; i++) buffer += '0';\n  buffer += rawbuffer;\n  if (f.justify == '-')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  return caml_new_string (buffer);\n}\n\n//Provides: caml_format_int const (const, const)\n//Requires: caml_parse_format, caml_finish_formatting, caml_str_repeat\n//Requires: caml_new_string, caml_jsbytes_of_string\nfunction caml_format_int(fmt, i) {\n  if (caml_jsbytes_of_string(fmt) == \"%d\") return caml_new_string(\"\"+i);\n  var f = caml_parse_format(fmt);\n  if (i < 0) { if (f.signedconv) { f.sign = -1; i = -i; } else i >>>= 0; }\n  var s = i.toString(f.base);\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - s.length;\n    if (n > 0) s = caml_str_repeat (n, '0') + s;\n  }\n  return caml_finish_formatting(f, s);\n}\n\n//Provides: caml_format_float const\n//Requires: caml_parse_format, caml_finish_formatting\nfunction caml_format_float (fmt, x) {\n  var s, f = caml_parse_format(fmt);\n  var prec = (f.prec < 0)?6:f.prec;\n  if (x < 0 || (x == 0 && 1/x == -Infinity)) { f.sign = -1; x = -x; }\n  if (isNaN(x)) { s = \"nan\"; f.filler = ' '; }\n  else if (!isFinite(x)) { s = \"inf\"; f.filler = ' '; }\n  else\n    switch (f.conv) {\n    case 'e':\n      var s = x.toExponential(prec);\n      // exponent should be at least two digits\n      var i = s.length;\n      if (s.charAt(i - 3) == 'e')\n        s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n      break;\n    case 'f':\n      s = x.toFixed(prec); break;\n    case 'g':\n      prec = prec?prec:1;\n      s = x.toExponential(prec - 1);\n      var j = s.indexOf('e');\n      var exp = +s.slice(j + 1);\n      if (exp < -4 || x >= 1e21 || x.toFixed(0).length > prec) {\n        // remove trailing zeroes\n        var i = j - 1; while (s.charAt(i) == '0') i--;\n        if (s.charAt(i) == '.') i--;\n        s = s.slice(0, i + 1) + s.slice(j);\n        i = s.length;\n        if (s.charAt(i - 3) == 'e')\n          s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n        break;\n      } else {\n        var p = prec;\n        if (exp < 0) { p -= exp + 1; s = x.toFixed(p); }\n        else while (s = x.toFixed(p), s.length > prec + 1) p--;\n        if (p) {\n          // remove trailing zeroes\n          var i = s.length - 1; while (s.charAt(i) == '0') i--;\n          if (s.charAt(i) == '.') i--;\n          s = s.slice(0, i + 1);\n        }\n      }\n      break;\n    }\n  return caml_finish_formatting(f, s);\n}\n\n///////////// Hashtbl\n//Provides: caml_hash_univ_param mutable\n//Requires: MlBytes, caml_convert_string_to_bytes\n//Requires: caml_int64_to_bytes, caml_int64_bits_of_float\nfunction caml_hash_univ_param (count, limit, obj) {\n  var hash_accu = 0;\n  function hash_aux (obj) {\n    limit --;\n    if (count < 0 || limit < 0) return;\n    if (obj instanceof Array && obj[0] === (obj[0]|0)) {\n      switch (obj[0]) {\n      case 248:\n        // Object\n        count --;\n        hash_accu = (hash_accu * 65599 + obj[2]) | 0;\n        break;\n      case 250:\n        // Forward\n        limit++; hash_aux(obj); break;\n      case 255:\n        // Int64\n        count --;\n        hash_accu = (hash_accu * 65599 + obj[1] + (obj[2] << 24)) | 0;\n        break;\n      default:\n        count --;\n        hash_accu = (hash_accu * 19 + obj[0]) | 0;\n        for (var i = obj.length - 1; i > 0; i--) hash_aux (obj[i]);\n      }\n    } else if (obj instanceof MlBytes) {\n      count --;\n      switch (obj.t & 6) {\n      default: /* PARTIAL */\n        caml_convert_string_to_bytes(obj);\n      case 0: /* BYTES */\n        for (var b = obj.c, l = obj.l, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n        break;\n      case 2: /* ARRAY */\n        for (var a = obj.c, l = obj.l, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + a[i]) | 0;\n      }\n    } else if (obj === (obj|0)) {\n      // Integer\n      count --;\n      hash_accu = (hash_accu * 65599 + obj) | 0;\n    } else if (obj === +obj) {\n      // Float\n      count--;\n      var p = caml_int64_to_bytes (caml_int64_bits_of_float (obj));\n      for (var i = 7; i >= 0; i--) hash_accu = (hash_accu * 19 + p[i]) | 0;\n    } else if(obj && obj.hash && typeof obj.hash === \"function\") {\n      // Custom\n      hash_accu = (hash_accu * 65599 + obj.hash()) | 0;\n    }\n  }\n  hash_aux (obj);\n  return hash_accu & 0x3FFFFFFF;\n}\n\n//function ROTL32(x,n) { return ((x << n) | (x >>> (32-n))); }\n//Provides: caml_hash_mix_int\n//Requires: caml_mul\nfunction caml_hash_mix_int(h,d) {\n  d = caml_mul(d, 0xcc9e2d51|0);\n  d = ((d << 15) | (d >>> (32-15))); // ROTL32(d, 15);\n  d = caml_mul(d, 0x1b873593);\n  h ^= d;\n  h = ((h << 13) | (h >>> (32-13)));   //ROTL32(h, 13);\n  return (((h + (h << 2))|0) + (0xe6546b64|0))|0;\n}\n\n//Provides: caml_hash_mix_final\n//Requires: caml_mul\nfunction caml_hash_mix_final(h) {\n  h ^= h >>> 16;\n  h = caml_mul (h, 0x85ebca6b|0);\n  h ^= h >>> 13;\n  h = caml_mul (h, 0xc2b2ae35|0);\n  h ^= h >>> 16;\n  return h;\n}\n\n//Provides: caml_hash_mix_float\n//Requires: caml_hash_mix_int, caml_int64_bits_of_float\nfunction caml_hash_mix_float (h, v0) {\n  var v = caml_int64_bits_of_float (v0);\n  var lo = v[1] | (v[2] << 24);\n  var hi = (v[2] >>> 8) | (v[3] << 16);\n  h = caml_hash_mix_int(h, lo);\n  h = caml_hash_mix_int(h, hi);\n  return h;\n}\n//Provides: caml_hash_mix_int64\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_int64 (h, v) {\n  var lo = v[1] | (v[2] << 24);\n  var hi = (v[2] >>> 8) | (v[3] << 16);\n  h = caml_hash_mix_int(h, lo);\n  h = caml_hash_mix_int(h, hi);\n  return h;\n}\n\n//Provides: caml_hash_mix_string_str\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_string_str(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s.charCodeAt(i)\n      | (s.charCodeAt(i+1) << 8)\n      | (s.charCodeAt(i+2) << 16)\n      | (s.charCodeAt(i+3) << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s.charCodeAt(i+2) << 16;\n  case 2: w |= s.charCodeAt(i+1) << 8;\n  case 1:\n    w |= s.charCodeAt(i);\n    h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_string_arr\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_string_arr(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s[i]\n      | (s[i+1] << 8)\n      | (s[i+2] << 16)\n      | (s[i+3] << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s[i+2] << 16;\n  case 2: w |= s[i+1] << 8;\n  case 1: w |= s[i];\n    h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_string\n//Requires: caml_convert_string_to_bytes\n//Requires: caml_hash_mix_string_str\n//Requires: caml_hash_mix_string_arr\nfunction caml_hash_mix_string(h, v) {\n  switch (v.t & 6) {\n  default:\n    caml_convert_string_to_bytes (v);\n  case 0: /* BYTES */\n    h = caml_hash_mix_string_str(h, v.c);\n    break;\n  case 2: /* ARRAY */\n    h = caml_hash_mix_string_arr(h, v.c);\n  }\n  return h\n}\n\n\n//Provides: caml_hash mutable\n//Requires: MlBytes\n//Requires: caml_int64_bits_of_float, caml_hash_mix_int, caml_hash_mix_final\n//Requires: caml_hash_mix_int64, caml_hash_mix_float, caml_hash_mix_string\nvar HASH_QUEUE_SIZE = 256;\nfunction caml_hash (count, limit, seed, obj) {\n  var queue, rd, wr, sz, num, h, v, i, len;\n  sz = limit;\n  if (sz < 0 || sz > HASH_QUEUE_SIZE) sz = HASH_QUEUE_SIZE;\n  num = count;\n  h = seed;\n  queue = [obj]; rd = 0; wr = 1;\n  while (rd < wr && num > 0) {\n    v = queue[rd++];\n    if (v instanceof Array && v[0] === (v[0]|0)) {\n      switch (v[0]) {\n      case 248:\n        // Object\n        h = caml_hash_mix_int(h, v[2]);\n        num--;\n        break;\n      case 250:\n        // Forward\n        queue[--rd] = v[1];\n        break;\n      case 255:\n        // Int64\n        h = caml_hash_mix_int64 (h, v);\n        num --;\n        break;\n      default:\n        var tag = ((v.length - 1) << 10) | v[0];\n        h = caml_hash_mix_int(h, tag);\n        for (i = 1, len = v.length; i < len; i++) {\n          if (wr >= sz) break;\n          queue[wr++] = v[i];\n        }\n        break;\n      }\n    } else if (v instanceof MlBytes) {\n      h = caml_hash_mix_string(h,v)\n      num--;\n    } else if (v === (v|0)) {\n      // Integer\n      h = caml_hash_mix_int(h, v+v+1);\n      num--;\n    } else if (v === +v) {\n      // Float\n      h = caml_hash_mix_float(h,v);\n      num--;\n    } else if(v && v.hash && typeof v.hash === \"function\") {\n      // Custom\n      h = caml_hash_mix_int(h, v.hash());\n    }\n  }\n  h = caml_hash_mix_final(h);\n  return h & 0x3FFFFFFF;\n}\n\n///////////// Sys\n//Provides: caml_sys_time mutable\nvar caml_initial_time = (new Date()).getTime() * 0.001;\nfunction caml_sys_time () {\n  var now = (new Date()).getTime();\n  return now * 0.001 - caml_initial_time;\n}\n\n//Provides: caml_sys_get_config const\n//Requires: caml_new_string\nfunction caml_sys_get_config () {\n  return [0, caml_new_string(\"Unix\"), 32, 0];\n}\n\n//Provides: caml_sys_const_backend_type const\n//Requires: caml_new_string\nfunction caml_sys_const_backend_type () {\n  return [0, caml_new_string(\"js_of_ocaml\")];\n}\n\n//Provides: caml_sys_random_seed mutable\n//The function needs to return an array since OCaml 4.0...\nfunction caml_sys_random_seed () {\n  var now = (new Date()).getTime();\n  var x = now^0xffffffff*Math.random();\n  return [0,x];\n}\n\n\n\n//Provides: caml_sys_const_big_endian const\nfunction caml_sys_const_big_endian () { return 0; }\n//Provides: caml_sys_const_word_size const\nfunction caml_sys_const_word_size () { return 32; }\n//Provides: caml_sys_const_int_size const\nfunction caml_sys_const_int_size () { return 32; }\n\n//Provides: caml_sys_const_max_wosize const\n// max_int / 4 so that the following does not overflow\n//let max_string_length = word_size / 8 * max_array_length - 1;;\nfunction caml_sys_const_max_wosize () { return (0x7FFFFFFF/4) | 0;}\n\n//Provides: caml_sys_const_ostype_cygwin const\nfunction caml_sys_const_ostype_cygwin () { return 0; }\n//Provides: caml_sys_const_ostype_unix const\nfunction caml_sys_const_ostype_unix () { return 1; }\n//Provides: caml_sys_const_ostype_win32 const\nfunction caml_sys_const_ostype_win32 () { return 0; }\n\n//Provides: caml_sys_system_command\nfunction caml_sys_system_command(cmd){\n  var cmd = cmd.toString();\n  joo_global_object.console.log(cmd);\n  if (typeof require != \"undefined\"\n      && require('child_process')\n      && require('child_process').execSync) {\n    try {require('child_process').execSync(cmd); return 0}\n    catch (e) {return 1}\n  }\n  else return 127;\n}\n\n///////////// Array\n//Provides: caml_array_sub mutable\nfunction caml_array_sub (a, i, len) {\n  var a2 = new Array(len+1);\n  a2[0]=0;\n  for(var i2 = 1, i1= i+1; i2 <= len; i2++,i1++ ){\n    a2[i2]=a[i1];\n  }\n  return a2;\n}\n\n//Provides: caml_array_append mutable\nfunction caml_array_append(a1, a2) {\n  var l1 = a1.length, l2 = a2.length;\n  var l = l1+l2-1\n  var a = new Array(l);\n  a[0] = 0;\n  var i = 1,j = 1;\n  for(;i<l1;i++) a[i]=a1[i];\n  for(;i<l;i++,j++) a[i]=a2[j];\n  return a;\n}\n\n//Provides: caml_array_concat mutable\nfunction caml_array_concat(l) {\n  var a = [0];\n  while (l !== 0) {\n    var b = l[1];\n    for (var i = 1; i < b.length; i++) a.push(b[i]);\n    l = l[2];\n  }\n  return a;\n}\n\n//Provides: caml_array_blit\nfunction caml_array_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for (var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];\n  } else {\n    for (var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];\n  };\n  return 0;\n}\n\n///////////// CamlinternalOO\n//Provides: caml_get_public_method const\nvar caml_method_cache = [];\nfunction caml_get_public_method (obj, tag, cacheid) {\n  var meths = obj[1];\n  var ofs = caml_method_cache[cacheid];\n  if (ofs === null) {\n    // Make sure the array is not sparse\n    for (var i = caml_method_cache.length; i < cacheid; i++)\n      caml_method_cache[i] = 0;\n  } else if (meths[ofs] === tag) {\n    return meths[ofs - 1];\n  }\n  var li = 3, hi = meths[1] * 2 + 1, mi;\n  while (li < hi) {\n    mi = ((li+hi) >> 1) | 1;\n    if (tag < meths[mi+1]) hi = mi-2;\n    else li = mi;\n  }\n  caml_method_cache[cacheid] = li + 1;\n  /* return 0 if tag is not there */\n  return (tag == meths[li+1] ? meths[li] : 0);\n}\n\n//Provides: caml_final_register const\nfunction caml_final_register () { return 0; }\n//Provides: caml_final_register_called_without_value const\nfunction caml_final_register_called_without_value () { return 0; }\n//Provides: caml_final_release const\nfunction caml_final_release () { return 0; }\n//Provides: caml_backtrace_status const\nfunction caml_backtrace_status () { return 0; }\n//Provides: caml_get_exception_backtrace const\nfunction caml_get_exception_backtrace () { return 0; }\n//Provides: caml_get_exception_raw_backtrace const\nfunction caml_get_exception_raw_backtrace () { return [0]; }\n//Provides: caml_record_backtrace\nfunction caml_record_backtrace () { return 0; }\n//Provides: caml_convert_raw_backtrace const\nfunction caml_convert_raw_backtrace () { return [0]; }\n//Provides: caml_raw_backtrace_length\nfunction caml_raw_backtrace_length() { return 0; }\n//Provides: caml_raw_backtrace_next_slot\nfunction caml_raw_backtrace_next_slot() { return 0 }\n//Provides: caml_raw_backtrace_slot\n//Requires: caml_invalid_argument\nfunction caml_raw_backtrace_slot () {\n  caml_invalid_argument(\"Printexc.get_raw_backtrace_slot: index out of bounds\");\n}\n//Provides: caml_restore_raw_backtrace\nfunction caml_restore_raw_backtrace(exn, bt) { return 0 }\n//Provides: caml_get_current_callstack const\nfunction caml_get_current_callstack () { return [0]; }\n\n//Provides: caml_set_static_env\nfunction caml_set_static_env(k,v){\n  if(!joo_global_object.jsoo_static_env)\n    joo_global_object.jsoo_static_env = {}\n  joo_global_object.jsoo_static_env[k] = v;\n  return 0;\n}\n//Provides: caml_sys_getenv (const)\n//Requires: caml_raise_not_found\n//Requires: caml_js_to_string\nfunction caml_sys_getenv (name) {\n  var g = joo_global_object;\n  var n = name.toString();\n  //nodejs env\n  if(g.process\n     && g.process.env\n     && g.process.env[n] != undefined)\n    return caml_js_to_string(g.process.env[n]);\n  if(joo_global_object.jsoo_static_env\n     && joo_global_object.jsoo_static_env[n])\n    return caml_js_to_string(joo_global_object.jsoo_static_env[n])\n  caml_raise_not_found ();\n}\n//Provides: caml_sys_exit\n//Requires: caml_invalid_argument\nfunction caml_sys_exit (code) {\n  var g = joo_global_object;\n  if(g.quit) g.quit(code);\n  //nodejs\n  if(g.process && g.process.exit)\n    g.process.exit(code);\n  caml_invalid_argument(\"Function 'exit' not implemented\");\n}\n\n//Provides: caml_sys_get_argv const\n//Requires: caml_js_to_string\n//Requires: raw_array_sub\nfunction caml_sys_get_argv () {\n  var g = joo_global_object;\n  var main = \"a.out\";\n  var args = []\n\n  if(g.process\n     && g.process.argv\n     && g.process.argv.length > 1) {\n    var argv = g.process.argv\n    //nodejs\n    main = argv[1];\n    args = raw_array_sub(argv,2,argv.length - 2);\n  }\n\n  var p = caml_js_to_string(main);\n  var args2 = [0, p];\n  for(var i = 0; i < args.length; i++)\n    args2.push(caml_js_to_string(args[i]));\n  return [0, p, args2];\n}\n\n//Provides: unix_inet_addr_of_string\nfunction unix_inet_addr_of_string () {return 0;}\n\n//Provides: caml_oo_last_id\nvar caml_oo_last_id = 0;\n\n//Provides: caml_set_oo_id\n//Requires: caml_oo_last_id\nfunction caml_set_oo_id (b) {\n  b[2]=caml_oo_last_id++;\n  return b;\n}\n\n//Provides: caml_fresh_oo_id\n//Requires: caml_oo_last_id\nfunction caml_fresh_oo_id() {\n  return caml_oo_last_id++;\n}\n\n//Provides: caml_install_signal_handler const\nfunction caml_install_signal_handler(){return 0}\n\n\n//Provides: caml_convert_raw_backtrace_slot\n//Requires: caml_failwith\nfunction caml_convert_raw_backtrace_slot(){\n  caml_failwith(\"caml_convert_raw_backtrace_slot\");\n}\n\n//Provides: caml_bswap16\nfunction caml_bswap16(x) {\n  return ((((x & 0x00FF) << 8) |\n           ((x & 0xFF00) >> 8)));\n}\n//Provides: caml_int32_bswap\nfunction caml_int32_bswap(x) {\n  return (((x & 0x000000FF) << 24) |\n          ((x & 0x0000FF00) << 8) |\n          ((x & 0x00FF0000) >>> 8) |\n          ((x & 0xFF000000) >>> 24));\n}\n//Provides: caml_int64_bswap\nfunction caml_int64_bswap(x) {\n  return [\n    255,\n    (((x[3] & 0x0000ff00) >> 8) |\n     ((x[3] & 0x000000ff) << 8) |\n     ((x[2] & 0x00ff0000))),\n    (((x[2] & 0x0000ff00) >> 8) |\n     ((x[2] & 0x000000ff) << 8) |\n     ((x[1] & 0x00ff0000))),\n    (((x[1] & 0x0000ff00) >> 8) |\n     ((x[1] & 0x000000ff) << 8))]\n}\n\n//Provides: caml_list_of_js_array const (const)\nfunction caml_list_of_js_array(a){\n  var l = 0;\n  for(var i=a.length - 1; i>=0; i--){\n    var e = a[i];\n    l = [0,e,l];\n  }\n  return l\n}\n\n//Provides: caml_runtime_warnings\nvar caml_runtime_warnings = 0;\n\n//Provides: caml_ml_enable_runtime_warnings\n//Requires: caml_runtime_warnings\nfunction caml_ml_enable_runtime_warnings (bool) {\n  caml_runtime_warnings = bool;\n  return 0;\n}\n\n//Provides: caml_ml_runtime_warnings_enabled\n//Requires: caml_runtime_warnings\nfunction caml_ml_runtime_warnings_enabled (_unit) {\n  return caml_runtime_warnings;\n}\n\n//Provides: caml_runtime_variant\n//Requires: caml_new_string\nfunction caml_runtime_variant(_unit) {\n  return caml_new_string(\"\");\n}\n//Provides: caml_runtime_parameters\n//Requires: caml_new_string\nfunction caml_runtime_parameters(_unit) {\n  return caml_new_string(\"\");\n}\n\n\n//Provides: caml_sys_isatty\nfunction caml_sys_isatty(_chan) {\n  return 0;\n}\n\n//Provides: caml_spacetime_enabled const (const)\nfunction caml_spacetime_enabled(_unit) {\n  return 0;\n}\n\n//Provides: caml_register_channel_for_spacetime const (const)\nfunction caml_register_channel_for_spacetime(_channel) {\n  return 0;\n}\n\n//Provides: caml_spacetime_only_works_for_native_code\n//Requires: caml_failwith\nfunction caml_spacetime_only_works_for_native_code() {\n  caml_failwith(\"Spacetime profiling only works for native code\");\n}\n\n\n//Provides: caml_is_js\nfunction caml_is_js() {\n  return 1;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010-2014 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n// An OCaml string is an object with three fields:\n// - tag 't'\n// - length 'l'\n// - contents 'c'\n//\n// The contents of the string can be either a JavaScript array or\n// a JavaScript string. The length of this string can be less than the\n// length of the OCaml string. In this case, remaining bytes are\n// assumed to be zeroes. Arrays are mutable but consumes more memory\n// than strings. A common pattern is to start from an empty string and\n// progressively fill it from the start. Partial strings makes it\n// possible to implement this efficiently.\n//\n// When converting to and from UTF-16, we keep track of whether the\n// string is composed only of ASCII characters (in which case, no\n// conversion needs to be performed) or not.\n//\n// The string tag can thus take the following values:\n//   full string     BYTE | UNKNOWN:      0\n//                   BYTE | ASCII:        9\n//                   BYTE | NOT_ASCII:    8\n//   string prefix   PARTIAL:             2\n//   array           ARRAY:               4\n//\n// One can use bit masking to discriminate these different cases:\n//   known_encoding(x) = x&8\n//   is_ascii(x) =       x&1\n//   kind(x) =           x&6\n\n//Provides: caml_str_repeat\nfunction caml_str_repeat(n, s) {\n  if (s.repeat) return s.repeat(n); // ECMAscript 6 and Firefox 24+\n  var r = \"\", l = 0;\n  if (n == 0) return r;\n  for(;;) {\n    if (n & 1) r += s;\n    n >>= 1;\n    if (n == 0) return r;\n    s += s;\n    l++;\n    if (l == 9) {\n      s.slice(0,1); // flatten the string\n      // then, the flattening of the whole string will be faster,\n      // as it will be composed of larger pieces\n    }\n  }\n}\n\n//Provides: caml_subarray_to_string\n//Requires: raw_array_sub\n//Weakdef\n// Pre ECMAScript 5, [apply] would not support array-like object.\n// In such setup, Typed_array would be implemented as polyfill, and [f.apply] would\n// fail here. Mark the primitive as Weakdef, so that people can override it easily.\nfunction caml_subarray_to_string (a, i, len) {\n  var f = String.fromCharCode;\n  if (i == 0 && len <= 4096 && len == a.length) return f.apply (null, a);\n  var s = \"\";\n  for (; 0 < len; i += 1024,len-=1024)\n    s += f.apply (null, raw_array_sub(a,i, Math.min(len, 1024)));\n  return s;\n}\n\n//Provides: caml_utf8_of_utf16\nfunction caml_utf8_of_utf16(s) {\n  for (var b = \"\", t = b, c, d, i = 0, l = s.length; i < l; i++) {\n    c = s.charCodeAt(i);\n    if (c < 0x80) {\n      for (var j = i + 1; (j < l) && (c = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    if (c < 0x800) {\n      t += String.fromCharCode(0xc0 | (c >> 6));\n      t += String.fromCharCode(0x80 | (c & 0x3f));\n    } else if (c < 0xd800 || c >= 0xdfff) {\n      t += String.fromCharCode(0xe0 | (c >> 12),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    } else if (c >= 0xdbff || i + 1 == l ||\n               (d = s.charCodeAt(i + 1)) < 0xdc00 || d > 0xdfff) {\n      // Unmatched surrogate pair, replaced by \\ufffd (replacement character)\n      t += \"\\xef\\xbf\\xbd\";\n    } else {\n      i++;\n      c = (c << 10) + d - 0x35fdc00;\n      t += String.fromCharCode(0xf0 | (c >> 18),\n                               0x80 | ((c >> 12) & 0x3f),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    }\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: caml_utf16_of_utf8\nfunction caml_utf16_of_utf8(s) {\n  for (var b = \"\", t = \"\", c, c1, c2, v, i = 0, l = s.length; i < l; i++) {\n    c1 = s.charCodeAt(i);\n    if (c1 < 0x80) {\n      for (var j = i + 1; (j < l) && (c1 = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    v = 1;\n    if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n      c = c2 + (c1 << 6);\n      if (c1 < 0xe0) {\n        v = c - 0x3080;\n        if (v < 0x80) v = 1;\n      } else {\n        v = 2;\n        if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n          c = c2 + (c << 6);\n          if (c1 < 0xf0) {\n            v = c - 0xe2080;\n            if ((v < 0x800) || ((v >= 0xd7ff) && (v < 0xe000))) v = 2;\n          } else {\n            v = 3;\n            if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128) &&\n                (c1 < 0xf5)) {\n              v = c2 - 0x3c82080 + (c << 6);\n              if (v < 0x10000 || v > 0x10ffff) v = 3;\n            }\n          }\n        }\n      }\n    }\n    if (v < 4) { // Invalid sequence\n      i -= v;\n      t += \"\\ufffd\";\n    } else if (v > 0xffff)\n      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF))\n    else\n      t += String.fromCharCode(v);\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: caml_is_ascii\nfunction caml_is_ascii (s) {\n  // The regular expression gets better at around this point for all browsers\n  if (s.length < 24) {\n    // Spidermonkey gets much slower when s.length >= 24 (on 64 bit archs)\n    for (var i = 0; i < s.length; i++) if (s.charCodeAt(i) > 127) return false;\n    return true;\n  } else\n    return !/[^\\x00-\\x7f]/.test(s);\n}\n\n//Provides: caml_to_js_string\n//Requires: caml_convert_string_to_bytes, caml_is_ascii, caml_utf16_of_utf8\nfunction caml_to_js_string(s) {\n  switch (s.t) {\n  case 9: /*BYTES | ASCII*/\n    return s.c;\n  default:\n    caml_convert_string_to_bytes(s);\n  case 0: /*BYTES | UNKOWN*/\n    if (caml_is_ascii(s.c)) {\n      s.t = 9; /*BYTES | ASCII*/\n      return s.c;\n    }\n    s.t = 8; /*BYTES | NOT_ASCII*/\n  case 8: /*BYTES | NOT_ASCII*/\n    return caml_utf16_of_utf8(s.c);\n  }\n}\n\n//Provides: caml_string_unsafe_get mutable\nfunction caml_string_unsafe_get (s, i) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    if (i >= s.c.length) return 0;\n  case 0: /* BYTES */\n    return s.c.charCodeAt(i);\n  case 4: /* ARRAY */\n    return s.c[i]\n  }\n}\n\n//Provides: caml_bytes_unsafe_get mutable\nfunction caml_bytes_unsafe_get (s, i) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    if (i >= s.c.length) return 0;\n  case 0: /* BYTES */\n    return s.c.charCodeAt(i);\n  case 4: /* ARRAY */\n    return s.c[i]\n  }\n}\n\n//Provides: caml_bytes_unsafe_set\n//Requires: caml_convert_string_to_array\nfunction caml_bytes_unsafe_set (s, i, c) {\n  // The OCaml compiler uses Char.unsafe_chr on integers larger than 255!\n  c &= 0xff;\n  if (s.t != 4 /* ARRAY */) {\n    if (i == s.c.length) {\n      s.c += String.fromCharCode (c);\n      if (i + 1 == s.l) s.t = 0; /*BYTES | UNKOWN*/\n      return 0;\n    }\n    caml_convert_string_to_array (s);\n  }\n  s.c[i] = c;\n  return 0;\n}\n\n//Provides: caml_string_unsafe_set\n//Requires: caml_bytes_unsafe_set\nfunction caml_string_unsafe_set (s, i, c) {\n  return caml_bytes_unsafe_set(s,i,c);\n}\n\n//Provides: caml_string_bound_error\n//Requires: caml_invalid_argument\nfunction caml_string_bound_error () {\n  caml_invalid_argument (\"index out of bounds\");\n}\n\n//Provides: caml_string_get\n//Requires: caml_string_bound_error, caml_string_unsafe_get\nfunction caml_string_get (s, i) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_string_unsafe_get (s, i);\n}\n\n//Provides: caml_string_get16\n//Requires: caml_string_unsafe_get, caml_string_bound_error\nfunction caml_string_get16(s,i) {\n  if (i >>> 0 >= s.l + 1) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1);\n  return (b2 << 8 | b1);\n}\n\n//Provides: caml_bytes_get16\n//Requires: caml_string_unsafe_get, caml_string_bound_error\nfunction caml_bytes_get16(s,i) {\n  if (i >>> 0 >= s.l + 1) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1);\n  return (b2 << 8 | b1);\n}\n\n//Provides: caml_string_get32\n//Requires: caml_string_unsafe_get, caml_string_bound_error\nfunction caml_string_get32(s,i) {\n  if (i >>> 0 >= s.l + 3) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1),\n      b3 = caml_string_unsafe_get (s, i + 2),\n      b4 = caml_string_unsafe_get (s, i + 3);\n  return (b4 << 24 | b3 << 16 | b2 << 8 | b1);\n}\n\n//Provides: caml_bytes_get32\n//Requires: caml_string_unsafe_get, caml_string_bound_error\nfunction caml_bytes_get32(s,i) {\n  if (i >>> 0 >= s.l + 3) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1),\n      b3 = caml_string_unsafe_get (s, i + 2),\n      b4 = caml_string_unsafe_get (s, i + 3);\n  return (b4 << 24 | b3 << 16 | b2 << 8 | b1);\n}\n\n//Provides: caml_string_get64\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_int64_of_bytes\nfunction caml_string_get64(s,i) {\n  if (i >>> 0 >= s.l + 7) caml_string_bound_error();\n  var a = new Array(8);\n  for(var j = 0; j < 8; j++){\n    a[7 - j] = caml_string_unsafe_get (s, i + j);\n  }\n  return caml_int64_of_bytes(a);\n}\n\n//Provides: caml_bytes_get64\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_int64_of_bytes\nfunction caml_bytes_get64(s,i) {\n  if (i >>> 0 >= s.l + 7) caml_string_bound_error();\n  var a = new Array(8);\n  for(var j = 0; j < 8; j++){\n    a[7 - j] = caml_string_unsafe_get (s, i + j);\n  }\n  return caml_int64_of_bytes(a);\n}\n\n//Provides: caml_bytes_get\n//Requires: caml_string_bound_error, caml_bytes_unsafe_get\nfunction caml_bytes_get (s, i) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_bytes_unsafe_get (s, i);\n}\n\n//Provides: caml_string_set\n//Requires: caml_string_unsafe_set, caml_string_bound_error\nfunction caml_string_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_string_unsafe_set (s, i, c);\n}\n\n//Provides: caml_bytes_set16\n//Requires: caml_string_bound_error, caml_string_unsafe_set\nfunction caml_bytes_set16(s,i,i16){\n  if (i >>> 0 >= s.l + 1) caml_string_bound_error();\n  var b2 = 0xFF & i16 >> 8,\n      b1 = 0xFF & i16;\n  caml_string_unsafe_set (s, i + 0, b1);\n  caml_string_unsafe_set (s, i + 1, b2);\n  return 0\n}\n\n//Provides: caml_string_set16\n//Requires: caml_bytes_set16\nfunction caml_string_set16(s,i,i16){\n  return caml_bytes_set16(s,i,i16);\n}\n\n//Provides: caml_bytes_set32\n//Requires: caml_string_bound_error, caml_string_unsafe_set\nfunction caml_bytes_set32(s,i,i32){\n  if (i >>> 0 >= s.l + 3) caml_string_bound_error();\n  var b4 = 0xFF & i32 >> 24,\n      b3 = 0xFF & i32 >> 16,\n      b2 = 0xFF & i32 >> 8,\n      b1 = 0xFF & i32;\n  caml_string_unsafe_set (s, i + 0, b1);\n  caml_string_unsafe_set (s, i + 1, b2);\n  caml_string_unsafe_set (s, i + 2, b3);\n  caml_string_unsafe_set (s, i + 3, b4);\n  return 0\n}\n\n//Provides: caml_string_set32\n//Requires: caml_bytes_set32\nfunction caml_string_set32(s,i,i32){\n  return caml_bytes_set32(s,i,i32);\n}\n\n//Provides: caml_bytes_set64\n//Requires: caml_string_bound_error, caml_string_unsafe_set\n//Requires: caml_int64_to_bytes\nfunction caml_bytes_set64(s,i,i64){\n  if (i >>> 0 >= s.l + 7) caml_string_bound_error();\n  var a = caml_int64_to_bytes(i64);\n  for(var j = 0; j < 8; j++) {\n    caml_string_unsafe_set (s, i + 7 - j, a[j]);\n  }\n  return 0\n}\n\n//Provides: caml_string_set64\n//Requires: caml_bytes_set64\nfunction caml_string_set64(s,i,i64){\n  return caml_bytes_set64(s,i,i64);\n}\n\n//Provides: caml_bytes_set\n//Requires: caml_string_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_bytes_unsafe_set (s, i, c);\n}\n\n//Provides: MlBytes\n//Requires: caml_to_js_string\nfunction MlBytes (tag, contents, length) {\n  this.t=tag; this.c=contents; this.l=length;\n}\nMlBytes.prototype.toString = function(){return caml_to_js_string(this)};\nMlBytes.prototype.slice = function (){\n  var content = this.t == 4 ? this.c.slice() : this.c;\n  return new MlBytes(this.t,content,this.l);\n}\n\n//Provides: caml_convert_string_to_bytes\n//Requires: caml_str_repeat, caml_subarray_to_string\nfunction caml_convert_string_to_bytes (s) {\n  /* Assumes not BYTES */\n  if (s.t == 2 /* PARTIAL */)\n    s.c += caml_str_repeat(s.l - s.c.length, '\\0')\n  else\n    s.c = caml_subarray_to_string (s.c, 0, s.c.length);\n  s.t = 0; /*BYTES | UNKOWN*/\n}\n\n//Provides: caml_convert_string_to_array\nfunction caml_convert_string_to_array (s) {\n  /* Assumes not ARRAY */\n  if(joo_global_object.Uint8Array) {\n    var a = new joo_global_object.Uint8Array(s.l);\n  } else {\n    var a = new Array(s.l);\n  }\n  var b = s.c, l = b.length, i = 0;\n  for (; i < l; i++) a[i] = b.charCodeAt(i);\n  for (l = s.l; i < l; i++) a[i] = 0;\n  s.c = a;\n  s.t = 4; /* ARRAY */\n  return a;\n}\n\n//Provides: caml_array_of_string mutable\n//Requires: caml_convert_string_to_array\nfunction caml_array_of_string (s) {\n  if (s.t != 4 /* ARRAY */) caml_convert_string_to_array(s);\n  return s.c;\n}\n\n//Provides: caml_jsbytes_of_string mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_jsbytes_of_string (s) {\n  if ((s.t & 6) != 0 /* BYTES */) caml_convert_string_to_bytes(s);\n  return s.c;\n}\n\n//Provides: caml_js_to_string const\n//Requires: caml_is_ascii, caml_utf8_of_utf16, MlBytes\nfunction caml_js_to_string (s) {\n  var tag = 9 /* BYTES | ASCII */;\n  if (!caml_is_ascii(s))\n    tag = 8 /* BYTES | NOT_ASCII */, s = caml_utf8_of_utf16(s);\n  return new MlBytes(tag, s, s.length);\n}\n\n//Provides: caml_create_string const\n//Requires: MlBytes,caml_invalid_argument\nfunction caml_create_string(len) {\n  if (len < 0) caml_invalid_argument(\"String.create\");\n  return new MlBytes(len?2:9,\"\",len);\n}\n//Provides: caml_create_bytes const\n//Requires: MlBytes,caml_invalid_argument\nfunction caml_create_bytes(len) {\n  if (len < 0) caml_invalid_argument(\"Bytes.create\");\n  return new MlBytes(len?2:9,\"\",len);\n}\n\n//Provides: caml_new_string const (const)\n//Requires: MlBytes\nfunction caml_new_string (s) { return new MlBytes(0,s,s.length); }\n\n//Provides: caml_string_of_array\n//Requires: MlBytes\nfunction caml_string_of_array (a) { return new MlBytes(4,a,a.length); }\n\n//Provides: caml_string_compare mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_compare(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?-1:(s1.c > s2.c)?1:0;\n}\n\n\n//Provides: caml_bytes_compare mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_compare(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?-1:(s1.c > s2.c)?1:0;\n}\n\n//Provides: caml_string_equal mutable (const, const)\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c == s2.c)?1:0;\n}\n\n//Provides: caml_bytes_equal mutable (const, const)\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c == s2.c)?1:0;\n}\n\n//Provides: caml_string_notequal mutable (const, const)\n//Requires: caml_string_equal\nfunction caml_string_notequal(s1, s2) { return 1-caml_string_equal(s1, s2); }\n\n//Provides: caml_bytes_notequal mutable (const, const)\n//Requires: caml_string_equal\nfunction caml_bytes_notequal(s1, s2) { return 1-caml_string_equal(s1, s2); }\n\n//Provides: caml_string_lessequal mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_lessequal(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c <= s2.c)?1:0;\n}\n\n//Provides: caml_bytes_lessequal mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessequal(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c <= s2.c)?1:0;\n}\n\n//Provides: caml_string_lessthan mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_lessthan(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?1:0;\n}\n\n//Provides: caml_bytes_lessthan mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessthan(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?1:0;\n}\n\n//Provides: caml_string_greaterequal\n//Requires: caml_string_lessequal\nfunction caml_string_greaterequal(s1, s2) {\n  return caml_string_lessequal(s2,s1);\n}\n//Provides: caml_bytes_greaterequal\n//Requires: caml_bytes_lessequal\nfunction caml_bytes_greaterequal(s1, s2) {\n  return caml_bytes_lessequal(s2,s1);\n}\n\n//Provides: caml_string_greaterthan\n//Requires: caml_string_lessthan\nfunction caml_string_greaterthan(s1, s2) {\n  return caml_string_lessthan(s2, s1);\n}\n\n//Provides: caml_bytes_greaterthan\n//Requires: caml_bytes_lessthan\nfunction caml_bytes_greaterthan(s1, s2) {\n  return caml_bytes_lessthan(s2, s1);\n}\n\n//Provides: caml_fill_bytes\n//Requires: caml_str_repeat, caml_convert_string_to_array\nfunction caml_fill_bytes(s, i, l, c) {\n  if (l > 0) {\n    if (i == 0 && (l >= s.l || (s.t == 2 /* PARTIAL */ && l >= s.c.length))) {\n      if (c == 0) {\n        s.c = \"\";\n        s.t = 2; /* PARTIAL */\n      } else {\n        s.c = caml_str_repeat (l, String.fromCharCode(c));\n        s.t = (l == s.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n      }\n    } else {\n      if (s.t != 4 /* ARRAY */) caml_convert_string_to_array(s);\n      for (l += i; i < l; i++) s.c[i] = c;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_fill_string\n//Requires: caml_fill_bytes\nvar caml_fill_string = caml_fill_bytes\n\n//Provides: caml_blit_bytes\n//Requires: caml_subarray_to_string, caml_convert_string_to_array\nfunction caml_blit_bytes(s1, i1, s2, i2, len) {\n  if (len == 0) return 0;\n  if ((i2 == 0) &&\n      (len >= s2.l || (s2.t == 2 /* PARTIAL */ && len >= s2.c.length))) {\n    s2.c = (s1.t == 4 /* ARRAY */)?\n      caml_subarray_to_string(s1.c, i1, len):\n      (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else if (s2.t == 2 /* PARTIAL */ && i2 == s2.c.length) {\n    s2.c += (s1.t == 4 /* ARRAY */)?\n      caml_subarray_to_string(s1.c, i1, len):\n      (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else {\n    if (s2.t != 4 /* ARRAY */) caml_convert_string_to_array(s2);\n    var c1 = s1.c, c2 = s2.c;\n    if (s1.t == 4 /* ARRAY */) {\n      if (i2 <= i1) {\n        for (var i = 0; i < len; i++) c2 [i2 + i] = c1 [i1 + i];\n      } else {\n        for (var i = len - 1; i >= 0; i--) c2 [i2 + i] = c1 [i1 + i];\n      }\n    } else {\n      var l = Math.min (len, c1.length - i1);\n      for (var i = 0; i < l; i++) c2 [i2 + i] = c1.charCodeAt(i1 + i);\n      for (; i < len; i++) c2 [i2 + i] = 0;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_blit_string\n//Requires: caml_blit_bytes\nfunction caml_blit_string(s1, i1, s2, i2, len) {\n  // TODO: s1 -> string to bytes\n  return caml_blit_bytes(s1, i1, s2, i2, len);\n}\n\n//Provides: caml_ml_string_length const\nfunction caml_ml_string_length(s) { return s.l }\n\n//Provides: caml_ml_bytes_length const\nfunction caml_ml_bytes_length(s) { return s.l }\n\n//Provides: caml_string_of_bytes const\nfunction caml_string_of_bytes(s) { return s}\n\n//Provides: caml_bytes_of_string const\nfunction caml_bytes_of_string(s) { return s}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: jsoo_floor_log2\nvar log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020\nfunction jsoo_floor_log2(x) {\n  if(log2_ok) return Math.floor(Math.log2(x))\n  var i = 0;\n  if (x == 0) return -Infinity;\n  if(x>=1) {while (x>=2) {x/=2; i++} }\n  else {while (x < 1) {x*=2; i--} };\n  return i;\n}\n\n//Provides: caml_int64_bits_of_float const\n//Requires: jsoo_floor_log2\nfunction caml_int64_bits_of_float (x) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return [255, 1, 0, 0x7ff0];\n    return (x > 0)?[255,0,0,0x7ff0]:[255,0,0,0xfff0];\n  }\n  var sign = (x==0 && 1/x == -Infinity)?0x8000:(x>=0)?0:0x8000;\n  if (sign) x = -x;\n  // Int64.bits_of_float 1.1235582092889474E+307 = 0x7fb0000000000000L\n  // using Math.LOG2E*Math.log(x) in place of Math.log2 result in precision lost\n  var exp = jsoo_floor_log2(x) + 1023;\n  if (exp <= 0) {\n    exp = 0;\n    x /= Math.pow(2,-1026);\n  } else {\n    x /= Math.pow(2,exp-1027);\n    if (x < 16) {\n      x *= 2; exp -=1; }\n    if (exp == 0) {\n      x /= 2; }\n  }\n  var k = Math.pow(2,24);\n  var r3 = x|0;\n  x = (x - r3) * k;\n  var r2 = x|0;\n  x = (x - r2) * k;\n  var r1 = x|0;\n  r3 = (r3 &0xf) | sign | exp << 4;\n  return [255, r1, r2, r3];\n}\n\n//Provides: caml_int32_bits_of_float const\n//Requires: jsoo_floor_log2\nfunction caml_int32_bits_of_float (x) {\n  var float32a = new joo_global_object.Float32Array(1);\n  float32a[0] = x;\n  var int32a = new joo_global_object.Int32Array(float32a.buffer);\n  return int32a[0] | 0;\n}\n\n//FP literals can be written using the hexadecimal\n//notation 0x<mantissa in hex>p<exponent> from ISO C99.\n//https://github.com/dankogai/js-hexfloat/blob/master/hexfloat.js\n//Provides: caml_hexstring_of_float const\n//Requires: caml_js_to_string, caml_str_repeat\nfunction caml_hexstring_of_float (x, prec, style) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return caml_js_to_string(\"nan\");\n    return caml_js_to_string ((x > 0)?\"infinity\":\"-infinity\");\n  }\n  var sign = (x==0 && 1/x == -Infinity)?1:(x>=0)?0:1;\n  if(sign) x = -x;\n  var exp = 0;\n  if (x == 0) { }\n  else if (x < 1) {\n    while (x < 1 && exp > -1022)  { x *= 2; exp-- }\n  } else {\n    while (x >= 2) { x /= 2; exp++ }\n  }\n  var exp_sign = exp < 0 ? '' : '+';\n  var sign_str = '';\n  if (sign) sign_str = '-'\n  else {\n    switch(style){\n    case 43 /* '+' */: sign_str = '+'; break;\n    case 32 /* ' ' */: sign_str = ' '; break;\n    default: break;\n    }\n  }\n  if (prec >= 0 && prec < 13) {\n    /* If a precision is given, and is small, round mantissa accordingly */\n    var cst = Math.pow(2,prec * 4);\n    x = Math.round(x * cst) / cst;\n  }\n  var x_str = x.toString(16);\n  if(prec >= 0){\n    var idx = x_str.indexOf('.');\n    if(idx<0) {\n      x_str += '.' + caml_str_repeat(prec, '0');\n    }\n    else {\n      var size = idx+1+prec;\n      if(x_str.length < size)\n        x_str += caml_str_repeat(size - x_str.length, '0');\n      else\n        x_str = x_str.substr(0,size);\n    }\n  }\n  return caml_js_to_string (sign_str + '0x' + x_str + 'p' + exp_sign + exp.toString(10));\n}\n\n//Provides: caml_int64_float_of_bits const\nfunction caml_int64_float_of_bits (x) {\n  var exp = (x[3] & 0x7fff) >> 4;\n  if (exp == 2047) {\n    if ((x[1]|x[2]|(x[3]&0xf)) == 0)\n      return (x[3] & 0x8000)?(-Infinity):Infinity;\n    else\n      return NaN;\n  }\n  var k = Math.pow(2,-24);\n  var res = (x[1]*k+x[2])*k+(x[3]&0xf);\n  if (exp > 0) {\n    res += 16;\n    res *= Math.pow(2,exp-1027);\n  } else\n    res *= Math.pow(2,-1026);\n  if (x[3] & 0x8000) res = - res;\n  return res;\n}\n\n//Provides: caml_nextafter_float const\n//Requires: caml_int64_float_of_bits, caml_int64_bits_of_float, caml_int64_add, caml_int64_sub,caml_int64_of_int32\nfunction caml_nextafter_float (x,y) {\n  if(isNaN(x) || isNaN(y)) return NaN;\n  if(x==y) return y;\n  if(x==0){\n    if(y < 0)\n      return -Math.pow(2, -1074)\n    else\n      return Math.pow(2, -1074)\n  }\n  var bits = caml_int64_bits_of_float(x);\n  var one = caml_int64_of_int32(1);\n  if ((x<y) == (x>0))\n    bits = caml_int64_add(bits, one)\n  else\n    bits = caml_int64_sub(bits, one)\n  return caml_int64_float_of_bits(bits);\n}\n\n//Provides: caml_trunc_float\nfunction caml_trunc_float(x){\n  return Math.trunc(x);\n}\n\n//Provides: caml_int32_float_of_bits const\nfunction caml_int32_float_of_bits (x) {\n  var int32a = new joo_global_object.Int32Array(1);\n  int32a[0] = x;\n  var float32a = new joo_global_object.Float32Array(int32a.buffer);\n  return float32a[0];\n}\n\n//Provides: caml_classify_float const\nfunction caml_classify_float (x) {\n  if (isFinite (x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) return 0;\n    if (x != 0) return 1;\n    return 2;\n  }\n  return isNaN(x)?4:3;\n}\n//Provides: caml_modf_float const\nfunction caml_modf_float (x) {\n  if (isFinite (x)) {\n    var neg = (1/x) < 0;\n    x = Math.abs(x);\n    var i = Math.floor (x);\n    var f = x - i;\n    if (neg) { i = -i; f = -f; }\n    return [0, f, i];\n  }\n  if (isNaN (x)) return [0, NaN, NaN];\n  return [0, 1/x, x];\n}\n//Provides: caml_ldexp_float const\nfunction caml_ldexp_float (x,exp) {\n  exp |= 0;\n  if (exp > 1023) {\n    exp -= 1023;\n    x *= Math.pow(2, 1023);\n    if (exp > 1023) {  // in case x is subnormal\n      exp -= 1023;\n      x *= Math.pow(2, 1023);\n    }\n  }\n  if (exp < -1023) {\n    exp += 1023;\n    x *= Math.pow(2, -1023);\n  }\n  x *= Math.pow(2, exp);\n  return x;\n}\n//Provides: caml_frexp_float const\n//Requires: jsoo_floor_log2\nfunction caml_frexp_float (x) {\n  if ((x == 0) || !isFinite(x)) return [0, x, 0];\n  var neg = x < 0;\n  if (neg) x = - x;\n  var exp = jsoo_floor_log2(x) + 1;\n  x *= Math.pow(2,-exp);\n  if (x < 0.5) { x *= 2; exp -= 1; }\n  if (neg) x = - x;\n  return [0, x, exp];\n}\n\n//Provides: caml_float_compare const\nfunction caml_float_compare (x, y) {\n  if (x === y) return 0;\n  if (x < y) return -1;\n  if (x > y) return 1;\n  if (x === x) return 1;\n  if (y === y) return -1;\n  return 0;\n}\n\n//Provides: caml_copysign_float const\nfunction caml_copysign_float (x, y) {\n  if (y == 0) y = 1 / y;\n  x = Math.abs(x);\n  return (y < 0)?(-x):x;\n}\n\n//Provides: caml_signbit_float const\nfunction caml_signbit_float(x) {\n  if (x == 0) x = 1 / x;\n  return (x < 0)?1:0;\n}\n\n//Provides: caml_expm1_float const\nfunction caml_expm1_float (x) {\n  var y = Math.exp(x), z = y - 1;\n  return (Math.abs(x)>1?z:(z==0?x:x*z/Math.log(y)));\n}\n\n//Provides: caml_log1p_float const\nfunction caml_log1p_float (x) {\n  var y = 1 + x, z = y - 1;\n  return (z==0?x:x*Math.log(y)/z);\n}\n\n//Provides: caml_hypot_float const\nfunction caml_hypot_float (x, y) {\n  var x = Math.abs(x), y = Math.abs(y);\n  var a = Math.max(x, y), b = Math.min(x,y) / (a?a:1);\n  return (a * Math.sqrt(1 + b*b));\n}\n\n// FIX: these five functions only give approximate results.\n//Provides: caml_log10_float const\nfunction caml_log10_float (x) { return Math.LOG10E * Math.log(x); }\n//Provides: caml_cosh_float const\nfunction caml_cosh_float (x) { return (Math.exp(x) + Math.exp(-x)) / 2; }\n//Provides: caml_sinh_float const\nfunction caml_sinh_float (x) { return (Math.exp(x) - Math.exp(-x)) / 2; }\n//Provides: caml_tanh_float const\nfunction caml_tanh_float (x) {\n  var y = Math.exp(x), z = Math.exp(-x);\n  return (y - z) / (y + z);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_int64_offset\nvar caml_int64_offset = Math.pow(2, -24);\n\n//Provides: caml_int64_ucompare const\nfunction caml_int64_ucompare(x,y) {\n  if (x[3] > y[3]) return 1;\n  if (x[3] < y[3]) return -1;\n  if (x[2] > y[2]) return 1;\n  if (x[2] < y[2]) return -1;\n  if (x[1] > y[1]) return 1;\n  if (x[1] < y[1]) return -1;\n  return 0;\n}\n\n//Provides: caml_int64_ult const\n//Requires: caml_int64_ucompare\nfunction caml_int64_ult(x,y) { return caml_int64_ucompare(x,y) < 0; }\n\n//Provides: caml_int64_compare const\nfunction caml_int64_compare(x,y) {\n  var x3 = x[3] << 16;\n  var y3 = y[3] << 16;\n  if (x3 > y3) return 1;\n  if (x3 < y3) return -1;\n  if (x[2] > y[2]) return 1;\n  if (x[2] < y[2]) return -1;\n  if (x[1] > y[1]) return 1;\n  if (x[1] < y[1]) return -1;\n  return 0;\n}\n\n//Provides: caml_int64_neg const\nfunction caml_int64_neg (x) {\n  var y1 = - x[1];\n  var y2 = - x[2] + (y1 >> 24);\n  var y3 = - x[3] + (y2 >> 24);\n  return [255, y1 & 0xffffff, y2 & 0xffffff, y3 & 0xffff];\n}\n\n//Provides: caml_int64_add const\nfunction caml_int64_add (x, y) {\n  var z1 = x[1] + y[1];\n  var z2 = x[2] + y[2] + (z1 >> 24);\n  var z3 = x[3] + y[3] + (z2 >> 24);\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_sub const\nfunction caml_int64_sub (x, y) {\n  var z1 = x[1] - y[1];\n  var z2 = x[2] - y[2] + (z1 >> 24);\n  var z3 = x[3] - y[3] + (z2 >> 24);\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_mul const\n//Requires: caml_int64_offset\nfunction caml_int64_mul(x,y) {\n  var z1 = x[1] * y[1];\n  var z2 = ((z1 * caml_int64_offset) | 0) + x[2] * y[1] + x[1] * y[2];\n  var z3 = ((z2 * caml_int64_offset) | 0) + x[3] * y[1] + x[2] * y[2] + x[1] * y[3];\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_is_zero const\nfunction caml_int64_is_zero(x) {\n  return (x[3]|x[2]|x[1]) == 0;\n}\n\n//Provides: caml_int64_is_negative const\nfunction caml_int64_is_negative(x) {\n  return (x[3] << 16) < 0;\n}\n\n//Provides: caml_int64_is_min_int const\nfunction caml_int64_is_min_int(x) {\n  return x[3] == 0x8000 && (x[1]|x[2]) == 0;\n}\n\n//Provides: caml_int64_is_minus_one const\nfunction caml_int64_is_minus_one(x) {\n  return x[3] == 0xffff && (x[1]&x[2]) == 0xffffff;\n}\n\n//Provides: caml_int64_and const\nfunction caml_int64_and (x, y) {\n  return [255, x[1]&y[1], x[2]&y[2], x[3]&y[3]];\n}\n\n//Provides: caml_int64_or const\nfunction caml_int64_or (x, y) {\n  return [255, x[1]|y[1], x[2]|y[2], x[3]|y[3]];\n}\n\n//Provides: caml_int64_xor const\nfunction caml_int64_xor (x, y) {\n  return [255, x[1]^y[1], x[2]^y[2], x[3]^y[3]];\n}\n\n//Provides: caml_int64_shift_left const\nfunction caml_int64_shift_left (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  if (s < 24)\n    return [255,\n            (x[1] << s) & 0xffffff,\n            ((x[2] << s) | (x[1] >> (24 - s))) & 0xffffff,\n            ((x[3] << s) | (x[2] >> (24 - s))) & 0xffff];\n  if (s < 48)\n    return [255, 0,\n            (x[1] << (s - 24)) & 0xffffff,\n            ((x[2] << (s - 24)) | (x[1] >> (48 - s))) & 0xffff];\n  return [255, 0, 0, (x[1] << (s - 48)) & 0xffff];\n}\n\n//Provides: caml_int64_shift_right_unsigned const\nfunction caml_int64_shift_right_unsigned (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  if (s < 24)\n    return [255,\n            ((x[1] >> s) | (x[2] << (24 - s))) & 0xffffff,\n            ((x[2] >> s) | (x[3] << (24 - s))) & 0xffffff,\n            (x[3] >> s)];\n  if (s < 48)\n    return [255,\n            ((x[2] >> (s - 24)) | (x[3] << (48 - s))) & 0xffffff,\n            (x[3] >> (s - 24)),\n            0];\n  return [255, (x[3] >> (s - 48)), 0, 0];\n}\n\n//Provides: caml_int64_shift_right const\nfunction caml_int64_shift_right (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  var h = (x[3] << 16) >> 16;\n  if (s < 24)\n    return [255,\n            ((x[1] >> s) | (x[2] << (24 - s))) & 0xffffff,\n            ((x[2] >> s) | (h << (24 - s))) & 0xffffff,\n            ((x[3] << 16) >> s) >>> 16];\n  var sign = (x[3] << 16) >> 31;\n  if (s < 48)\n    return [255,\n            ((x[2] >> (s - 24)) | (x[3] << (48 - s))) & 0xffffff,\n            ((x[3] << 16) >> (s - 24) >> 16) & 0xffffff,\n            sign & 0xffff];\n  return [255,\n          ((x[3] << 16) >> (s - 32)) & 0xffffff,\n          sign & 0xffffff, sign & 0xffff];\n}\n\n//Provides: caml_int64_lsl1 const\nfunction caml_int64_lsl1 (x) {\n  x[3] = (x[3] << 1) | (x[2] >> 23);\n  x[2] = ((x[2] << 1) | (x[1] >> 23)) & 0xffffff;\n  x[1] = (x[1] << 1) & 0xffffff;\n}\n\n//Provides: caml_int64_lsr1 const\nfunction caml_int64_lsr1 (x) {\n  x[1] = ((x[1] >>> 1) | (x[2] << 23)) & 0xffffff;\n  x[2] = ((x[2] >>> 1) | (x[3] << 23)) & 0xffffff;\n  x[3] = x[3] >>> 1;\n}\n\n//Provides: caml_int64_udivmod const\n//Requires: caml_int64_ucompare, caml_int64_lsl1, caml_int64_lsr1\n//Requires: caml_int64_sub\n//Requires: caml_obj_dup\nfunction caml_int64_udivmod (x, y) {\n  var offset = 0;\n  var modulus = caml_obj_dup(x);\n  var divisor = caml_obj_dup(y);\n  var quotient = [255, 0, 0, 0];\n  while (caml_int64_ucompare (modulus, divisor) > 0) {\n    offset++;\n    caml_int64_lsl1 (divisor);\n  }\n  while (offset >= 0) {\n    offset --;\n    caml_int64_lsl1 (quotient);\n    if (caml_int64_ucompare (modulus, divisor) >= 0) {\n      quotient[1] ++;\n      modulus = caml_int64_sub (modulus, divisor);\n    }\n    caml_int64_lsr1 (divisor);\n  }\n  return [0,quotient, modulus];\n}\n\n//Provides: caml_int64_div const\n//Requires: caml_int64_is_zero, caml_raise_zero_divide\n//Requires: caml_int64_neg, caml_int64_udivmod\nfunction caml_int64_div (x, y)\n{\n  if (caml_int64_is_zero (y)) caml_raise_zero_divide ();\n  var sign = x[3] ^ y[3];\n  if (x[3] & 0x8000) x = caml_int64_neg(x);\n  if (y[3] & 0x8000) y = caml_int64_neg(y);\n  var q = caml_int64_udivmod(x, y)[1];\n  if (sign & 0x8000) q = caml_int64_neg(q);\n  return q;\n}\n\n//Provides: caml_int64_mod const\n//Requires: caml_int64_is_zero, caml_raise_zero_divide\n//Requires: caml_int64_neg, caml_int64_udivmod\nfunction caml_int64_mod (x, y)\n{\n  if (caml_int64_is_zero (y)) caml_raise_zero_divide ();\n  var sign = x[3];\n  if (x[3] & 0x8000) x = caml_int64_neg(x);\n  if (y[3] & 0x8000) y = caml_int64_neg(y);\n  var r = caml_int64_udivmod(x, y)[2];\n  if (sign & 0x8000) r = caml_int64_neg(r);\n  return r;\n}\n\n//Provides: caml_int64_of_int32 const\nfunction caml_int64_of_int32 (x) {\n  return [255, x & 0xffffff, (x >> 24) & 0xffffff, (x >> 31) & 0xffff]\n}\n\n//Provides: caml_int64_to_int32 const\nfunction caml_int64_to_int32 (x) {\n  return x[1] | (x[2] << 24);\n}\n\n//Provides: caml_int64_to_float const\nfunction caml_int64_to_float (x) {\n  return ((x[3] << 16) * Math.pow(2, 32) + x[2] * Math.pow(2, 24)) + x[1];\n}\n\n//Provides: caml_int64_of_float const\n//Requires: caml_int64_offset\nfunction caml_int64_of_float (x) {\n  if (x < 0) x = Math.ceil(x);\n  return [255,\n          x & 0xffffff,\n          Math.floor(x * caml_int64_offset) & 0xffffff,\n          Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff];\n}\n\n//Provides: caml_int64_format const\n//Requires: caml_parse_format, caml_finish_formatting\n//Requires: caml_int64_is_negative, caml_int64_neg\n//Requires: caml_int64_of_int32, caml_int64_udivmod, caml_int64_to_int32\n//Requires: caml_int64_is_zero, caml_str_repeat\nfunction caml_int64_format (fmt, x) {\n  var f = caml_parse_format(fmt);\n  if (f.signedconv && caml_int64_is_negative(x)) {\n    f.sign = -1; x = caml_int64_neg(x);\n  }\n  var buffer = \"\";\n  var wbase = caml_int64_of_int32(f.base);\n  var cvtbl = \"0123456789abcdef\";\n  do {\n    var p = caml_int64_udivmod(x, wbase);\n    x = p[1];\n    buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer;\n  } while (! caml_int64_is_zero(x));\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - buffer.length;\n    if (n > 0) buffer = caml_str_repeat (n, '0') + buffer;\n  }\n  return caml_finish_formatting(f, buffer);\n}\n\n//Provides: caml_int64_of_string\n//Requires: caml_parse_sign_and_base, caml_failwith, caml_parse_digit, MlBytes\n//Requires: caml_int64_of_int32, caml_int64_udivmod, caml_int64_ult\n//Requires: caml_int64_add, caml_int64_mul, caml_int64_neg\n//Requires: caml_ml_string_length,caml_string_unsafe_get\nfunction caml_int64_of_string(s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var base64 = caml_int64_of_int32(base);\n  var threshold =\n      caml_int64_udivmod([255, 0xffffff, 0xfffffff, 0xffff], base64)[1];\n  var c = caml_string_unsafe_get(s, i);\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = caml_int64_of_int32(d);\n  for (;;) {\n    i++;\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    /* Detect overflow in multiplication base * res */\n    if (caml_int64_ult(threshold, res)) caml_failwith(\"int_of_string\");\n    d = caml_int64_of_int32(d);\n    res = caml_int64_add(caml_int64_mul(base64, res), d);\n    /* Detect overflow in addition (base * res) + d */\n    if (caml_int64_ult(res, d)) caml_failwith(\"int_of_string\");\n  }\n  if (i != caml_ml_string_length(s)) caml_failwith(\"int_of_string\");\n  if (r[2] == 10 && caml_int64_ult([255, 0, 0, 0x8000], res))\n    caml_failwith(\"int_of_string\");\n  if (sign < 0) res = caml_int64_neg(res);\n  return res;\n}\n\n//Provides: caml_int64_of_bytes\nfunction caml_int64_of_bytes(a) {\n  return [255, a[7] | (a[6] << 8) | (a[5] << 16),\n          a[4] | (a[3] << 8) | (a[2] << 16), a[1] | (a[0] << 8)];\n}\n//Provides: caml_int64_to_bytes\nfunction caml_int64_to_bytes(x) {\n  return [x[3] >> 8, x[3] & 0xff, x[2] >> 16, (x[2] >> 8) & 0xff, x[2] & 0xff,\n          x[1] >> 16, (x[1] >> 8) & 0xff, x[1] & 0xff];\n}\n","// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib: code specific to Js_of_ocaml\n\n//Provides: caml_js_from_bool const (const)\nfunction caml_js_from_bool(x) { return !!x; }\n//Provides: caml_js_to_bool const (const)\nfunction caml_js_to_bool(x) { return +x; }\n//Provides: caml_js_from_float const (const)\nfunction caml_js_from_float(x) { return x; }\n//Provides: caml_js_to_float const (const)\nfunction caml_js_to_float(x) { return x; }\n//Provides: caml_js_from_string mutable (const)\n//Requires: MlBytes\nfunction caml_js_from_string(s) { return s.toString(); }\n//Provides: caml_js_from_array mutable (shallow)\n//Requires: raw_array_sub\nfunction caml_js_from_array(a) { return raw_array_sub(a,1,a.length-1); }\n//Provides: caml_js_to_array mutable (shallow)\n//Requires: raw_array_cons\nfunction caml_js_to_array(a) { return raw_array_cons(a,0); }\n\n//Provides: caml_js_var mutable (const)\n//Requires: js_print_stderr\n//Requires: MlBytes\nfunction caml_js_var(x) {\n  var x = x.toString();\n  //Checks that x has the form ident[.ident]*\n  if(!x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/)){\n    js_print_stderr(\"caml_js_var: \\\"\" + x + \"\\\" is not a valid JavaScript variable. continuing ..\");\n    //joo_global_object.console.error(\"Js.Unsafe.eval_string\")\n  }\n  return eval(x);\n}\n//Provides: caml_js_call (const, mutable, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_call(f, o, args) { return f.apply(o, caml_js_from_array(args)); }\n//Provides: caml_js_fun_call (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_fun_call(f, a) {\n  switch (a.length) {\n  case 1: return f();\n  case 2: return f (a[1]);\n  case 3: return f (a[1],a[2]);\n  case 4: return f (a[1],a[2],a[3]);\n  case 5: return f (a[1],a[2],a[3],a[4]);\n  case 6: return f (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return f (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return f (a[1],a[2],a[3],a[4],a[5],a[6],a[7]);\n  }\n  return f.apply(null, caml_js_from_array(a));\n}\n//Provides: caml_js_meth_call (mutable, const, shallow)\n//Requires: MlBytes\n//Requires: caml_js_from_array\nfunction caml_js_meth_call(o, f, args) {\n  return o[f.toString()].apply(o, caml_js_from_array(args));\n}\n//Provides: caml_js_new (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_new(c, a) {\n  switch (a.length) {\n  case 1: return new c;\n  case 2: return new c (a[1]);\n  case 3: return new c (a[1],a[2]);\n  case 4: return new c (a[1],a[2],a[3]);\n  case 5: return new c (a[1],a[2],a[3],a[4]);\n  case 6: return new c (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return new c (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return new c (a[1],a[2],a[3],a[4],a[5],a[6],a[7]);\n  }\n  function F() { return c.apply(this, caml_js_from_array(a)); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_ojs_new_arr (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_ojs_new_arr(c, a) {\n  switch (a.length) {\n  case 0: return new c;\n  case 1: return new c (a[0]);\n  case 2: return new c (a[0],a[1]);\n  case 3: return new c (a[0],a[1],a[2]);\n  case 4: return new c (a[0],a[1],a[2],a[3]);\n  case 5: return new c (a[0],a[1],a[2],a[3],a[4]);\n  case 6: return new c (a[0],a[1],a[2],a[3],a[4],a[5]);\n  case 7: return new c (a[0],a[1],a[2],a[3],a[4],a[5],a[6]);\n  }\n  function F() { return c.apply(this, a); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_js_wrap_callback const (const)\n//Requires: caml_call_gen\nfunction caml_js_wrap_callback(f) {\n  return function () {\n    if(arguments.length > 0){\n      return caml_call_gen(f, arguments);\n    } else {\n      return caml_call_gen(f, [undefined]);\n    }\n  }\n}\n\n//Provides: caml_js_wrap_callback_arguments\n//Requires: caml_js_wrap_callback\nfunction caml_js_wrap_callback_arguments(f) {\n  return function() {\n    return caml_js_wrap_callback(f)(arguments);\n  }\n}\n//Provides: caml_js_wrap_callback_strict const\n//Requires: caml_call_gen\nfunction caml_js_wrap_callback_strict(arity, f) {\n  return function () {\n    var n = arguments.length;\n    if(n == arity) return caml_call_gen(f, arguments);\n    var args = new Array(arity);\n    for (var i = 0; i < n && i < arity; i++) args[i] = arguments[i];\n    return caml_call_gen(f, args);\n  };\n}\n//Provides: caml_js_wrap_meth_callback const (const)\n//Requires: caml_call_gen,raw_array_cons\nfunction caml_js_wrap_meth_callback(f) {\n  return function () {\n    return caml_call_gen(f,raw_array_cons(arguments,this));\n  }\n}\n//Provides: caml_js_wrap_meth_callback_arguments const (const)\n//Requires: caml_call_gen,raw_array_cons\nfunction caml_js_wrap_meth_callback_arguments(f) {\n  return function () {\n    return caml_call_gen(f,[this,arguments]);\n  }\n}\n//Provides: caml_js_wrap_meth_callback_strict const\n//Requires: caml_call_gen, raw_array_cons\nfunction caml_js_wrap_meth_callback_strict(arity, f) {\n  return function () {\n    var n = arguments.length;\n    if(n == arity) return caml_call_gen(f, raw_array_cons(arguments,this));\n    var args = new Array(arity + 1);\n    args[0] = this;\n    for (var i = 1; i < n && i <= arity; i++) args[i] = arguments[i];\n    return caml_call_gen(f, args);\n  };\n}\n//Provides: caml_js_wrap_meth_callback_unsafe const (const)\n//Requires: caml_call_gen,raw_array_cons\nfunction caml_js_wrap_meth_callback_unsafe(f) {\n  return function () { f.apply(null, raw_array_cons(arguments,this)); }\n}\n//Provides: caml_js_equals mutable (const, const)\nfunction caml_js_equals (x, y) { return +(x == y); }\n//Provides: caml_js_to_byte_string const\n//Requires: caml_new_string\nfunction caml_js_to_byte_string (s) {return caml_new_string (s);}\n\n//Provides: caml_js_eval_string (const)\n//Requires: MlBytes\nfunction caml_js_eval_string (s) {return eval(s.toString());}\n\n//Provides: caml_js_expr (const)\n//Requires: js_print_stderr\n//Requires: MlBytes\nfunction caml_js_expr(s) {\n  js_print_stderr(\"caml_js_expr: fallback to runtime evaluation\");\n  return eval(s.toString());}\n\n//Provides: caml_pure_js_expr const (const)\n//Requires: js_print_stderr\n//Requires: MlBytes\nfunction caml_pure_js_expr (s){\n  js_print_stderr(\"caml_pure_js_expr: fallback to runtime evaluation\");\n  return eval(s.toString());}\n\n//Provides: caml_js_object (object_literal)\n//Requires: MlBytes\nfunction caml_js_object (a) {\n  var o = {};\n  for (var i = 1; i < a.length; i++) {\n    var p = a[i];\n    o[p[1].toString()] = p[2];\n  }\n  return o;\n}\n\n\n//Provides: caml_js_export_var\nfunction caml_js_export_var (){\n  if(typeof module !== 'undefined' && module && module.exports)\n    return module.exports\n  else\n    return joo_global_object;\n}\n","// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib\n\n//Provides: caml_js_pure_expr const\nfunction caml_js_pure_expr (f) { return f(); }\n\n//Provides: caml_js_set (mutable, const, const)\nfunction caml_js_set(o,f,v) { o[f]=v;return 0}\n//Provides: caml_js_get mutable (const, const)\nfunction caml_js_get(o,f) { return o[f]; }\n//Provides: caml_js_delete (mutable, const)\nfunction caml_js_delete(o,f) { delete o[f]; return 0}\n\n//Provides: caml_js_instanceof (const, const)\nfunction caml_js_instanceof(o,c) { return o instanceof c; }\n\n//Provides: caml_js_typeof (const)\nfunction caml_js_typeof(o) { return typeof o; }\n\n//Provides: caml_js_on_ie const\nfunction caml_js_on_ie () {\n  var ua =\n      joo_global_object.navigator?joo_global_object.navigator.userAgent:\"\";\n  return ua.indexOf(\"MSIE\") != -1 && ua.indexOf(\"Opera\") != 0;\n}\n\n//Provides: caml_js_html_escape const (const)\nvar caml_js_regexps = { amp:/&/g, lt:/</g, quot:/\\\"/g, all:/[&<\\\"]/ };\nfunction caml_js_html_escape (s) {\n  if (!caml_js_regexps.all.test(s)) return s;\n  return s.replace(caml_js_regexps.amp, \"&amp;\")\n    .replace(caml_js_regexps.lt, \"&lt;\")\n    .replace(caml_js_regexps.quot, \"&quot;\");\n}\n\n//Provides: caml_js_html_entities const (const)\nfunction caml_js_html_entities(s) {\n  var str, temp = document.createElement('p');\n  temp.innerHTML= s;\n  str= temp.textContent || temp.innerText;\n  temp=null;\n  return str;\n}\n\n/////////// Debugging console\n//Provides: caml_js_get_console const\nfunction caml_js_get_console () {\n  var c = joo_global_object.console?joo_global_object.console:{};\n  var m = [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"assert\", \"dir\", \"dirxml\",\n           \"trace\", \"group\", \"groupCollapsed\", \"groupEnd\", \"time\", \"timeEnd\"];\n  function f () {}\n  for (var i = 0; i < m.length; i++) if (!c[m[i]]) c[m[i]]=f;\n  return c;\n}\n\n//Provides:caml_trampoline\nfunction caml_trampoline(res) {\n  var c = 1;\n  while(res && res.joo_tramp){\n    res = res.joo_tramp.apply(null, res.joo_args);\n    c++;\n  }\n  return res;\n}\n\n//Provides:caml_trampoline_return\nfunction caml_trampoline_return(f,args) {\n  return {joo_tramp:f,joo_args:args};\n}\n\n//Provides: js_print_stdout (const)\nfunction js_print_stdout(s) {\n  var g = joo_global_object;\n  if (g.process && g.process.stdout && g.process.stdout.write) {\n    g.process.stdout.write(s)\n  } else {\n    // Do not output the last \\n if present\n    // as console logging display a newline at the end\n    if(s.charCodeAt(s.length - 1) == 10)\n      s = s.substr(0,s.length - 1 );\n    var v = g.console;\n    v  && v.log && v.log(s);\n  }\n}\n//Provides: js_print_stderr (const)\nfunction js_print_stderr(s) {\n  var g = joo_global_object;\n  if (g.process && g.process.stdout && g.process.stdout.write) {\n    g.process.stderr.write(s)\n  } else {\n    // Do not output the last \\n if present\n    // as console logging display a newline at the end\n    if(s.charCodeAt(s.length - 1) == 10)\n      s = s.substr(0,s.length - 1 );\n    var v = g.console;\n    v && v.error && v.error(s);\n  }\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Io\n\n//Provides: caml_sys_close\n//Requires: caml_global_data\nfunction caml_sys_close(fd) {\n  delete caml_global_data.fds[fd];\n  return 0;\n}\n\n//Provides: caml_std_output\n//Requires: caml_new_string, caml_ml_string_length, caml_ml_channels\nfunction caml_std_output(chanid,s){\n  var chan = caml_ml_channels[chanid];\n  var str = caml_new_string(s);\n  var slen = caml_ml_string_length(str);\n  chan.file.write(chan.offset, str, 0, slen);\n  chan.offset += slen;\n  return 0;\n}\n\n//Provides: caml_sys_open\n//Requires: caml_raise_sys_error, caml_global_data\n//Requires: caml_create_bytes,MlFakeFile\n//Requires: js_print_stderr, js_print_stdout\n//Requires: caml_std_output\n//Requires: resolve_fs_device\nfunction caml_sys_open_internal(idx,output,file,flags) {\n  if(caml_global_data.fds === undefined) caml_global_data.fds = new Array();\n  flags=flags?flags:{};\n  var info = {};\n  info.file = file;\n  info.offset = flags.append?file.length():0;\n  info.flags = flags;\n  info.output = output;\n  caml_global_data.fds[idx] = info;\n  if(!caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)\n    caml_global_data.fd_last_idx = idx;\n  return idx;\n}\nfunction caml_sys_open (name, flags, _perms) {\n  var f = {};\n  while(flags){\n    switch(flags[1]){\n    case 0: f.rdonly = 1;break;\n    case 1: f.wronly = 1;break;\n    case 2: f.append = 1;break;\n    case 3: f.create = 1;break;\n    case 4: f.truncate = 1;break;\n    case 5: f.excl = 1; break;\n    case 6: f.binary = 1;break;\n    case 7: f.text = 1;break;\n    case 8: f.nonblock = 1;break;\n    }\n    flags=flags[2];\n  }\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(name.toString() + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(name.toString() + \" : flags Open_text and Open_binary are not compatible\");\n  var root = resolve_fs_device(name);\n  var file = root.device.open(root.rest,f);\n  var idx = caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;\n  return caml_sys_open_internal (idx+1,caml_std_output,file,f);\n}\ncaml_sys_open_internal(0,caml_std_output, new MlFakeFile(caml_create_bytes(0))); //stdin\ncaml_sys_open_internal(1,js_print_stdout, new MlFakeFile(caml_create_bytes(0))); //stdout\ncaml_sys_open_internal(2,js_print_stderr, new MlFakeFile(caml_create_bytes(0))); //stderr\n\n\n// ocaml Channels\n\n//Provides: caml_ml_set_channel_name\nfunction caml_ml_set_channel_name() {\n  return 0\n}\n\n//Provides: caml_ml_channels\nvar caml_ml_channels = new Array();\n\n//Provides: caml_ml_out_channels_list\n//Requires: caml_ml_channels\nfunction caml_ml_out_channels_list () {\n  var l = 0;\n  for(var c = 0; c < caml_ml_channels.length; c++){\n    if(caml_ml_channels[c] && caml_ml_channels[c].opened && caml_ml_channels[c].out)\n      l=[0,caml_ml_channels[c].fd,l];\n  }\n  return l;\n}\n\n\n//Provides: caml_ml_open_descriptor_out\n//Requires: caml_ml_channels, caml_global_data\n//Requires: caml_raise_sys_error\nfunction caml_ml_open_descriptor_out (fd) {\n  var data = caml_global_data.fds[fd];\n  if(data.flags.rdonly) caml_raise_sys_error(\"fd \"+ fd + \" is readonly\");\n  var channel = {\n    file:data.file,\n    offset:data.offset,\n    fd:fd,\n    opened:true,\n    out:true,\n    buffer:\"\"\n  };\n  caml_ml_channels[channel.fd]=channel;\n  return channel.fd;\n}\n\n//Provides: caml_ml_open_descriptor_in\n//Requires: caml_global_data,caml_sys_open,caml_raise_sys_error, caml_ml_channels\nfunction caml_ml_open_descriptor_in (fd)  {\n  var data = caml_global_data.fds[fd];\n  if(data.flags.wronly) caml_raise_sys_error(\"fd \"+ fd + \" is writeonly\");\n\n  var channel = {\n    file:data.file,\n    offset:data.offset,\n    fd:fd,\n    opened:true,\n    out: false,\n    refill:null\n  };\n  caml_ml_channels[channel.fd]=channel;\n  return channel.fd;\n}\n\n\n//Provides: caml_ml_set_binary_mode\n//Requires: caml_global_data, caml_ml_channels\nfunction caml_ml_set_binary_mode(chanid,mode){\n  var chan = caml_ml_channels[chanid];\n  var data = caml_global_data.fds[chan.fd];\n  data.flags.text = !mode\n  data.flags.binary = mode\n  return 0;\n}\n\n//Input from in_channel\n\n//Provides: caml_ml_close_channel\n//Requires: caml_ml_flush, caml_ml_channels\n//Requires: caml_sys_close\nfunction caml_ml_close_channel (chanid) {\n  var chan = caml_ml_channels[chanid];\n  caml_ml_flush(chanid);\n  chan.opened = false;\n  chan.file.close();\n  caml_sys_close(chan.fd)\n  return 0;\n}\n\n//Provides: caml_ml_channel_size\n//Requires: caml_ml_channels\nfunction caml_ml_channel_size(chanid) {\n  var chan = caml_ml_channels[chanid];\n  return chan.file.length();\n}\n\n//Provides: caml_ml_channel_size_64\n//Requires: caml_int64_of_float,caml_ml_channels\nfunction caml_ml_channel_size_64(chanid) {\n  var chan = caml_ml_channels[chanid];\n  return caml_int64_of_float(chan.file.length ());\n}\n\n//Provides: caml_ml_set_channel_output\n//Requires: caml_ml_channels, caml_global_data\nfunction caml_ml_set_channel_output(chanid,f) {\n  var chan = caml_ml_channels[chanid];\n  caml_global_data.fds[chan.fd].output = f;\n  return 0;\n}\n\n//Provides: caml_ml_set_channel_refill\n//Requires: caml_ml_channels, caml_global_data\nfunction caml_ml_set_channel_refill(chanid,f) {\n  caml_ml_channels[chanid].refill = f;\n  return 0;\n}\n\n//Provides: caml_ml_refill_input\n//Requires: caml_ml_bytes_length\nfunction caml_ml_refill_input (chan) {\n  var str = chan.refill();\n  var str_len = caml_ml_bytes_length(str);\n  if (str_len == 0) chan.refill = null;\n  chan.file.write(chan.file.length(), str, 0, str_len);\n  return str_len;\n}\n\n//Provides: caml_ml_may_refill_input\n//Requires: caml_ml_refill_input, caml_ml_channels\nfunction caml_ml_may_refill_input (chanid) {\n  var chan = caml_ml_channels[chanid];\n  if (chan.refill == null) return;\n  if (chan.file.length() != chan.offset) return;\n  caml_ml_refill_input (chan);\n}\n\n//Provides: caml_ml_input\n//Requires: caml_ml_refill_input, caml_ml_channels\nfunction caml_ml_input (chanid, s, i, l) {\n  var chan = caml_ml_channels[chanid];\n  var l2 = chan.file.length() - chan.offset;\n  if (l2 == 0 && chan.refill != null) l2 = caml_ml_refill_input(chan);\n  if (l2 < l) l = l2;\n  chan.file.read(chan.offset, s, i, l);\n  chan.offset += l;\n  return l;\n}\n\n//Provides: caml_input_value\n//Requires: caml_marshal_data_size, caml_input_value_from_string, caml_create_bytes, caml_ml_channels\nfunction caml_input_value (chanid) {\n  var chan = caml_ml_channels[chanid];\n\n  var buf = caml_create_bytes(8);\n  chan.file.read(chan.offset,buf,0,8);\n\n  // Header is 20 bytes\n  var len = caml_marshal_data_size (buf, 0) + 20;\n\n  var buf = caml_create_bytes(len);\n  chan.file.read(chan.offset,buf,0,len);\n\n  var offset = [0];\n  var res = caml_input_value_from_string(buf, offset);\n  chan.offset = chan.offset + offset[0];\n  return res;\n}\n\n//Provides: caml_ml_input_char\n//Requires: caml_raise_end_of_file, caml_array_bound_error\n//Requires: caml_ml_may_refill_input, caml_ml_channels\nfunction caml_ml_input_char (chanid) {\n  var chan = caml_ml_channels[chanid];\n  caml_ml_may_refill_input(chanid);\n  if (chan.offset >= chan.file.length())\n    caml_raise_end_of_file();\n  var res = chan.file.read_one(chan.offset);\n  chan.offset++;\n  return res;\n}\n\n//Provides: caml_ml_input_int\n//Requires: caml_raise_end_of_file\n//Requires: caml_ml_refill_input, caml_ml_channels\nfunction caml_ml_input_int (chanid) {\n  var chan = caml_ml_channels[chanid];\n  var file = chan.file;\n  while ((chan.offset + 3) >= file.length()) {\n    var l = caml_ml_refill_input(chan);\n    if (l == 0) caml_raise_end_of_file();\n  }\n  var o = chan.offset;\n  var r =(file.read_one(o  ) << 24)\n      |  (file.read_one(o+1) << 16)\n      |  (file.read_one(o+2) << 8)\n      |  (file.read_one(o+3));\n  chan.offset+=4;\n  return r;\n}\n\n//Provides: caml_ml_seek_in\n//Requires: caml_raise_sys_error, caml_ml_channels\nfunction caml_ml_seek_in(chanid,pos){\n  var chan = caml_ml_channels[chanid];\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  chan.offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_in_64\n//Requires: caml_int64_to_float, caml_raise_sys_error, caml_ml_channels\nfunction caml_ml_seek_in_64(chanid,pos){\n  var chan = caml_ml_channels[chanid];\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  chan.offset = caml_int64_to_float(pos);\n  return 0;\n}\n\n//Provides: caml_ml_pos_in\n//Requires: caml_ml_channels\nfunction caml_ml_pos_in(chanid) {return caml_ml_channels[chanid].offset}\n\n//Provides: caml_ml_pos_in_64\n//Requires: caml_int64_of_float, caml_ml_channels\nfunction caml_ml_pos_in_64(chanid) {return caml_int64_of_float(caml_ml_channels[chanid].offset)}\n\n//Provides: caml_ml_input_scan_line\n//Requires: caml_array_bound_error\n//Requires: caml_ml_may_refill_input, caml_ml_channels\nfunction caml_ml_input_scan_line(chanid){\n  var chan = caml_ml_channels[chanid];\n  caml_ml_may_refill_input(chanid);\n  var p = chan.offset;\n  var len = chan.file.length();\n  if(p >= len) { return 0;}\n  while(true) {\n    if(p >= len) return - (p - chan.offset);\n    if(chan.file.read_one(p) == 10) return p - chan.offset + 1;\n    p++;\n  }\n}\n\n//Provides: caml_ml_flush\n//Requires: caml_raise_sys_error, caml_global_data, caml_ml_channels\nfunction caml_ml_flush (chanid) {\n  var chan = caml_ml_channels[chanid];\n  if(! chan.opened) caml_raise_sys_error(\"Cannot flush a closed channel\");\n  if(!chan.buffer || chan.buffer == \"\") return 0;\n  if(chan.fd\n     && caml_global_data.fds[chan.fd]\n     && caml_global_data.fds[chan.fd].output) {\n    var output = caml_global_data.fds[chan.fd].output;\n    switch(output.length){\n    case 2: output(chanid,chan.buffer);break;\n    default: output(chan.buffer)\n    };\n  }\n  chan.buffer = \"\";\n  return 0;\n}\n\n//output to out_channel\n\n//Provides: caml_ml_output_bytes\n//Requires: caml_ml_flush,caml_ml_bytes_length\n//Requires: caml_create_bytes, caml_blit_bytes, caml_raise_sys_error, caml_ml_channels, caml_jsbytes_of_string\nfunction caml_ml_output_bytes(chanid,buffer,offset,len) {\n  var chan = caml_ml_channels[chanid];\n  if(! chan.opened) caml_raise_sys_error(\"Cannot output to a closed channel\");\n  var string;\n  if(offset == 0 && caml_ml_bytes_length(buffer) == len)\n    string = buffer;\n  else {\n    string = caml_create_bytes(len);\n    caml_blit_bytes(buffer,offset,string,0,len);\n  }\n  var jsstring = caml_jsbytes_of_string(string);\n  var id = jsstring.lastIndexOf(\"\\n\");\n  if(id < 0)\n    chan.buffer+=jsstring;\n  else {\n    chan.buffer+=jsstring.substr(0,id+1);\n    caml_ml_flush (chanid);\n    chan.buffer += jsstring.substr(id+1);\n  }\n  return 0;\n}\n\n//Provides: caml_ml_output\n//Requires: caml_ml_output_bytes\nfunction caml_ml_output(chanid,buffer,offset,len){\n  return caml_ml_output_bytes(chanid,buffer,offset,len);\n}\n\n//Provides: caml_ml_output_char\n//Requires: caml_ml_output\n//Requires: caml_new_string\nfunction caml_ml_output_char (chanid,c) {\n  var s = caml_new_string(String.fromCharCode(c));\n  caml_ml_output(chanid,s,0,1);\n  return 0;\n}\n\n//Provides: caml_output_value\n//Requires: caml_output_value_to_string, caml_ml_output,caml_ml_string_length\nfunction caml_output_value (chanid,v,_flags) {\n  var s = caml_output_value_to_string(v);\n  caml_ml_output(chanid,s,0,caml_ml_string_length(s));\n  return 0;\n}\n\n\n//Provides: caml_ml_seek_out\n//Requires: caml_ml_channels, caml_ml_flush\nfunction caml_ml_seek_out(chanid,pos){\n  caml_ml_flush(chanid);\n  caml_ml_channels[chanid].offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_out_64\n//Requires: caml_int64_to_float, caml_ml_channels, caml_ml_flush\nfunction caml_ml_seek_out_64(chanid,pos){\n  caml_ml_flush(chanid);\n  caml_ml_channels[chanid].offset = caml_int64_to_float(pos);\n  return 0;\n}\n\n//Provides: caml_ml_pos_out\n//Requires: caml_ml_channels, caml_ml_flush\nfunction caml_ml_pos_out(chanid) {\n  caml_ml_flush(chanid);\n  return caml_ml_channels[chanid].offset\n}\n\n//Provides: caml_ml_pos_out_64\n//Requires: caml_int64_of_float, caml_ml_channels, caml_ml_flush\nfunction caml_ml_pos_out_64(chanid) {\n  caml_ml_flush(chanid);\n  return caml_int64_of_float (caml_ml_channels[chanid].offset);\n}\n\n//Provides: caml_ml_output_int\n//Requires: caml_ml_output\n//Requires: caml_string_of_array\nfunction caml_ml_output_int (chanid,i) {\n  var arr = [(i>>24) & 0xFF,(i>>16) & 0xFF,(i>>8) & 0xFF,i & 0xFF ];\n  var s = caml_string_of_array(arr);\n  caml_ml_output(chanid,s,0,4);\n  return 0\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Dummy filesystem\n\n//Provides: caml_current_dir\nif(joo_global_object.process && joo_global_object.process.cwd)\n  var caml_current_dir = joo_global_object.process.cwd().replace(/\\\\/g,'/');\nelse\n  var caml_current_dir =  \"/static\";\nif(caml_current_dir.slice(-1) !== \"/\") caml_current_dir += \"/\"\n\n//Provides: caml_root\n//Requires: caml_current_dir\nvar caml_root = caml_current_dir.match(/[^\\/]*\\//)[0];\n\n\n//Provides: MlFile\nfunction MlFile(){  }\n\n//Provides: caml_make_path\n//Requires: caml_current_dir,MlBytes\nfunction caml_make_path (name) {\n  name=(name instanceof MlBytes)?name.toString():name;\n  if(name.charCodeAt(0) != 47)\n    name = caml_current_dir + name;\n  var comp = name.split(\"/\");\n  var ncomp = []\n  for(var i = 0; i<comp.length; i++){\n    switch(comp[i]){\n    case \"..\": if(ncomp.length>1) ncomp.pop(); break;\n    case \".\": break;\n    case \"\": if(ncomp.length == 0) ncomp.push(\"\"); break;\n    default: ncomp.push(comp[i]);break\n    }\n  }\n  ncomp.orig = name;\n  return ncomp;\n}\n\n//Provides:jsoo_mount_point\n//Requires: MlFakeDevice, MlNodeDevice, caml_root, fs_node_supported\nvar jsoo_mount_point = []\nif (fs_node_supported()) {\n  jsoo_mount_point.push({path:caml_root,device:new MlNodeDevice(caml_root)});\n} else {\n  jsoo_mount_point.push({path:caml_root,device:new MlFakeDevice(caml_root)});\n}\njsoo_mount_point.push({path:caml_root+\"static/\", device:new MlFakeDevice(caml_root+\"static/\")});\n\n//Provides:caml_list_mount_point\n//Requires: jsoo_mount_point, caml_new_string\nfunction caml_list_mount_point(){\n  var prev = 0\n  for(var i = 0; i < jsoo_mount_point.length; i++){\n    var old = prev;\n    prev = [0, caml_new_string(jsoo_mount_point[i].path), old]\n  }\n  return prev;\n}\n\n//Provides: resolve_fs_device\n//Requires: caml_make_path, jsoo_mount_point\nfunction resolve_fs_device(name){\n  var path = caml_make_path(name);\n  var name = path.join(\"/\");\n  var name_slash = name + \"/\";\n  var res;\n  for(var i = 0; i < jsoo_mount_point.length; i++) {\n    var m = jsoo_mount_point[i];\n    if(name_slash.search(m.path) == 0\n       && (!res || res.path.length < m.path.length))\n      res = {path:m.path,device:m.device,rest:name.substring(m.path.length,name.length)};\n  }\n  return res;\n}\n\n//Provides: caml_mount_autoload\n//Requires: MlFakeDevice, caml_make_path, jsoo_mount_point\nfunction caml_mount_autoload(name,f){\n  var path = caml_make_path(name);\n  var name = path.join(\"/\") + \"/\";\n  jsoo_mount_point.push({path:name,device:new MlFakeDevice(name,f)})\n  return 0;\n}\n\n//Provides: caml_unmount\n//Requires: jsoo_mount_point, caml_make_path\nfunction caml_unmount(name){\n  var path = caml_make_path(name);\n  var name = path.join(\"/\") + \"/\";\n  var idx = -1;\n  for(var i = 0; i < jsoo_mount_point.length; i++)\n    if(jsoo_mount_point[i].path == name) idx = i;\n  if(idx > -1) jsoo_mount_point.splice(idx,1);\n  return 0\n}\n\n//Provides: caml_sys_getcwd\n//Requires: caml_current_dir, caml_new_string\nfunction caml_sys_getcwd() {\n  return caml_new_string(caml_current_dir);\n}\n\n//Provides: caml_sys_chdir\n//Requires: caml_current_dir, caml_raise_no_such_file, resolve_fs_device\nfunction caml_sys_chdir(dir) {\n  var root = resolve_fs_device(dir);\n  if(root.device.exists(root.rest)) {\n    if(root.rest) caml_current_dir = root.path + root.rest + \"/\";\n    else caml_current_dir = root.path;\n    return 0;\n  }\n  else {\n    caml_raise_no_such_file(dir);\n  }\n}\n\n//Provides: caml_raise_no_such_file\n//Requires: MlBytes, caml_raise_sys_error\nfunction caml_raise_no_such_file(name){\n  name = (name instanceof MlBytes)?name.toString():name;\n  caml_raise_sys_error (name + \": No such file or directory\");\n}\n\n//Provides: caml_raise_not_a_dir\n//Requires: MlBytes, caml_raise_sys_error\nfunction caml_raise_not_a_dir(name){\n  name = (name instanceof MlBytes)?name.toString():name;\n  caml_raise_sys_error (name + \": Not a directory\");\n}\n\n//Provides: caml_sys_file_exists\n//Requires: resolve_fs_device\nfunction caml_sys_file_exists (name) {\n  var root = resolve_fs_device(name);\n  return root.device.exists(root.rest);\n}\n\n//Provides: caml_sys_read_directory\n//Requires: caml_new_string\n//Requires: caml_raise_not_a_dir, resolve_fs_device\nfunction caml_sys_read_directory(name){\n  var root = resolve_fs_device(name);\n  var a = root.device.readdir(root.rest);\n  var l = new Array(a.length + 1);\n  l[0] = 0;\n  for(var i=0;i<a.length;i++)\n    l[i+1] = caml_new_string(a[i]);\n  return l;\n}\n\n//Provides: caml_sys_remove\n//Requires: caml_raise_no_such_file, resolve_fs_device\nfunction caml_sys_remove(name){\n  var root = resolve_fs_device(name);\n  var ok = root.device.unlink(root.rest);\n  if(ok == 0) caml_raise_no_such_file(name);\n  return 0;\n}\n\n//Provides: caml_sys_is_directory\n//Requires: resolve_fs_device\nfunction caml_sys_is_directory(name){\n  var root = resolve_fs_device(name);\n  var a = root.device.is_dir(root.rest);\n  return a?1:0;\n}\n\n//Provides: caml_sys_rename\n//Requires: caml_failwith, resolve_fs_device\nfunction caml_sys_rename(o,n){\n  var o_root = resolve_fs_device(o);\n  var n_root = resolve_fs_device(n);\n  if(o_root.device != n_root.device)\n    caml_failwith(\"caml_sys_rename: cannot move file between two filesystem\");\n  if(!o_root.device.rename)\n    caml_failwith(\"caml_sys_rename: no implemented\");\n  o_root.device.rename(o_root.rest, n_root.rest);\n}\n\n\n//Provides: caml_ba_map_file\n//Requires: caml_failwith\nfunction caml_ba_map_file(vfd, kind, layout, shared, dims, pos) {\n  // var data = caml_global_data.fds[vfd];\n  caml_failwith(\"caml_ba_map_file not implemented\");\n}\n\n//Provides: caml_ba_map_file_bytecode\n//Requires: caml_ba_map_file\nfunction caml_ba_map_file_bytecode(argv,argn){\n  return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);\n}\n\n//Provides: caml_create_file_extern\nfunction caml_create_file_extern(name,content){\n  if(joo_global_object.caml_create_file)\n    joo_global_object.caml_create_file(name,content);\n  else {\n    if(!joo_global_object.caml_fs_tmp) joo_global_object.caml_fs_tmp = [];\n    joo_global_object.caml_fs_tmp.push({name:name,content:content});\n  }\n  return 0;\n}\n\n//Provides: caml_fs_init\n//Requires: caml_create_file\nfunction caml_fs_init (){\n  var tmp=joo_global_object.caml_fs_tmp\n  if(tmp){\n    for(var i = 0; i < tmp.length; i++){\n      caml_create_file(tmp[i].name,tmp[i].content);\n    }\n  }\n  joo_global_object.caml_create_file = caml_create_file;\n  return 0;\n}\n\n//Provides: caml_create_file\n//Requires: caml_failwith, resolve_fs_device\nfunction caml_create_file(name,content) {\n  var root = resolve_fs_device(name);\n  if(! root.device.register) caml_failwith(\"cannot register file\");\n  root.device.register(root.rest,content);\n  return 0;\n}\n\n//Provides: caml_read_file_content\n//Requires: resolve_fs_device, caml_raise_no_such_file, caml_create_bytes\nfunction caml_read_file_content (name) {\n  var root = resolve_fs_device(name);\n  if(root.device.exists(root.rest)) {\n    var file = root.device.open(root.rest,{rdonly:1});\n    var len  = file.length();\n    var buf  = caml_create_bytes(len);\n    file.read(0,buf,0,len);\n    return buf\n  }\n  caml_raise_no_such_file(name);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: MlFakeDevice\n//Requires: MlFakeFile, caml_create_bytes\n//Requires: caml_raise_sys_error, caml_raise_no_such_file, caml_new_string, caml_string_of_array\n//Requires: MlBytes\nfunction MlFakeDevice (root, f) {\n  this.content={};\n  this.root = root;\n  this.lookupFun = f;\n}\nMlFakeDevice.prototype.nm = function(name) {\n  return (this.root + name);\n}\nMlFakeDevice.prototype.lookup = function(name) {\n  if(!this.content[name] && this.lookupFun) {\n    var res = this.lookupFun(caml_new_string(this.root), caml_new_string(name));\n    if(res !== 0) this.content[name]=new MlFakeFile(res[1]);\n  }\n}\nMlFakeDevice.prototype.exists = function(name) {\n  // The root of the device exists\n  if(name == \"\") return 1;\n  // Check if a directory exists\n  var name_slash = (name + \"/\");\n  var r = new RegExp(\"^\" + name_slash);\n  for(var n in this.content) {\n    if (n.match(r)) return 1\n  }\n  // Check if a file exists\n  this.lookup(name);\n  return this.content[name]?1:0;\n}\nMlFakeDevice.prototype.readdir = function(name) {\n  var name_slash = (name == \"\")?\"\":(name + \"/\");\n  var r = new RegExp(\"^\" + name_slash + \"([^/]*)\");\n  var seen = {}\n  var a = [];\n  for(var n in this.content) {\n    var m = n.match(r);\n    if(m && !seen[m[1]]) {seen[m[1]] = true; a.push(m[1])}\n  }\n  return a;\n}\nMlFakeDevice.prototype.is_dir = function(name) {\n  var name_slash = (name == \"\")?\"\":(name + \"/\");\n  var r = new RegExp(\"^\" + name_slash + \"([^/]*)\");\n  var a = [];\n  for(var n in this.content) {\n    var m = n.match(r);\n    if(m) return 1\n  }\n  return 0\n}\nMlFakeDevice.prototype.unlink = function(name) {\n  var ok = this.content[name]?true:false;\n  delete this.content[name];\n  return ok;\n}\nMlFakeDevice.prototype.open = function(name, f) {\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_text and Open_binary are not compatible\");\n  this.lookup(name);\n  if (this.content[name]) {\n    if (this.is_dir(name)) caml_raise_sys_error(this.nm(name) + \" : is a directory\");\n    if (f.create && f.excl) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n    var file = this.content[name];\n    if(f.truncate) file.truncate();\n    return file;\n  } else if (f.create) {\n    this.content[name] = new MlFakeFile(caml_create_bytes(0));\n    return this.content[name];\n  } else {\n    caml_raise_no_such_file (this.nm(name));\n  }\n}\n\nMlFakeDevice.prototype.register= function (name,content){\n  if(this.content[name]) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n  if(content instanceof MlBytes)\n    this.content[name] = new MlFakeFile(content);\n  else if(content instanceof Array)\n    this.content[name] = new MlFakeFile(caml_string_of_array(content));\n  else if(content.toString) {\n    var mlstring = caml_new_string(content.toString());\n    this.content[name] = new MlFakeFile(mlstring);\n  }\n}\n\nMlFakeDevice.prototype.constructor = MlFakeDevice\n\n//Provides: MlFakeFile\n//Requires: MlFile\n//Requires: caml_create_bytes, caml_ml_bytes_length,caml_blit_bytes\n//Requires: caml_bytes_get\nfunction MlFakeFile(content){\n  this.data = content;\n}\nMlFakeFile.prototype = new MlFile ();\nMlFakeFile.prototype.truncate = function(len){\n  var old = this.data;\n  this.data = caml_create_bytes(len|0);\n  caml_blit_bytes(old, 0, this.data, 0, len);\n}\nMlFakeFile.prototype.length = function () {\n  return caml_ml_bytes_length(this.data);\n}\nMlFakeFile.prototype.write = function(offset,buf,pos,len){\n  var clen = this.length();\n  if(offset + len >= clen) {\n    var new_str = caml_create_bytes(offset + len);\n    var old_data = this.data;\n    this.data = new_str;\n    caml_blit_bytes(old_data, 0, this.data, 0, clen);\n  }\n  caml_blit_bytes(buf, pos, this.data, offset, len);\n  return 0\n}\nMlFakeFile.prototype.read = function(offset,buf,pos,len){\n  var clen = this.length();\n  caml_blit_bytes(this.data, offset, buf, pos, len);\n  return 0\n}\nMlFakeFile.prototype.read_one = function(offset){\n  return caml_bytes_get(this.data, offset);\n}\nMlFakeFile.prototype.close = function(){\n\n}\nMlFakeFile.prototype.constructor = MlFakeFile\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: fs_node_supported\nfunction fs_node_supported () {\n  return (\n    typeof joo_global_object.process !== 'undefined'\n      && typeof joo_global_object.process.versions !== 'undefined'\n      && typeof joo_global_object.process.versions.node !== 'undefined')\n}\n\n//Provides: MlNodeDevice\n//Requires: MlNodeFile\nfunction MlNodeDevice(root) {\n  this.fs = require('fs');\n  this.root = root;\n}\nMlNodeDevice.prototype.nm = function(name) {\n  return (this.root + name);\n}\nMlNodeDevice.prototype.exists = function(name) {\n  return this.fs.existsSync(this.nm(name))?1:0;\n}\nMlNodeDevice.prototype.readdir = function(name) {\n  return this.fs.readdirSync(this.nm(name));\n}\nMlNodeDevice.prototype.is_dir = function(name) {\n  return this.fs.statSync(this.nm(name)).isDirectory()?1:0;\n}\nMlNodeDevice.prototype.unlink = function(name) {\n  var b = this.fs.existsSync(this.nm(name))?1:0;\n  this.fs.unlinkSync(this.nm(name));\n  return b\n}\nMlNodeDevice.prototype.open = function(name, f) {\n  var consts = require('constants');\n  var res = 0;\n  for(var key in f){\n    switch(key){\n    case \"rdonly\"  : res |= consts.O_RDONLY; break;\n    case \"wronly\"  : res |= consts.O_WRONLY; break;\n    case \"append\"  :\n      res |= consts.O_WRONLY | consts.O_APPEND;\n      break;\n    case \"create\"   : res |= consts.O_CREAT;    break;\n    case \"truncate\" : res |= consts.O_TRUNC;    break;\n    case \"excl\"     : res |= consts.O_EXCL;     break;\n    case \"binary\"   : res |= consts.O_BINARY;   break;\n    case \"text\"     : res |= consts.O_TEXT;     break;\n    case \"nonblock\" : res |= consts.O_NONBLOCK; break;\n    }\n  }\n  var fd = this.fs.openSync(this.nm(name), res);\n  return new MlNodeFile(fd);\n}\n\nMlNodeDevice.prototype.rename = function(o,n) {\n  this.fs.renameSync(this.nm(o), this.nm(n));\n}\n\nMlNodeDevice.prototype.constructor = MlNodeDevice\n\n//Provides: MlNodeFile\n//Requires: MlFile, caml_array_of_string, caml_bytes_set\n\nvar Buffer = joo_global_object.Buffer\n\nfunction MlNodeFile(fd){\n  this.fs = require('fs');\n  this.fd = fd;\n}\nMlNodeFile.prototype = new MlFile ();\n\nMlNodeFile.prototype.truncate = function(len){\n  this.fs.ftruncateSync(this.fd,len|0)\n}\nMlNodeFile.prototype.length = function () {\n  return this.fs.fstatSync(this.fd).size;\n}\nMlNodeFile.prototype.write = function(offset,buf,buf_offset,len){\n  var a = caml_array_of_string(buf);\n  if(! (a instanceof joo_global_object.Uint8Array))\n    a = new joo_global_object.Uint8Array(a);\n  var buffer = Buffer.from(a);\n  this.fs.writeSync(this.fd, buffer, buf_offset, len, offset);\n  return 0;\n}\nMlNodeFile.prototype.read = function(offset,buf,buf_offset,len){\n  var a = caml_array_of_string(buf);\n  if(! (a instanceof joo_global_object.Uint8Array))\n    a = new joo_global_object.Uint8Array(a);\n  var buffer = Buffer.from(a);\n  this.fs.readSync(this.fd, buffer, buf_offset, len, offset);\n  for(var i = 0; i < len; i++){\n    caml_bytes_set(buf,buf_offset + i,buffer[buf_offset+i]);\n  }\n  return 0\n}\nMlNodeFile.prototype.read_one = function(offset){\n  var a = new joo_global_object.Uint8Array(1);\n  var buffer = Buffer.from(a);\n  this.fs.readSync(this.fd, buffer, 0, 1, offset);\n  return buffer[0];\n}\nMlNodeFile.prototype.close = function(){\n  this.fs.closeSync(this.fd);\n}\n\nMlNodeFile.prototype.constructor = MlNodeFile;\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nmodule Pervasives = struct\n(* type 'a option = None | Some of 'a *)\n\n(* Exceptions *)\n\nexternal register_named_value : string -> 'a -> unit\n                              = \"caml_register_named_value\"\n\nlet () =\n  (* for asmrun/fail.c *)\n  register_named_value \"Pervasives.array_bound_error\"\n    (Invalid_argument \"index out of bounds\")\n\n\nexternal raise : exn -> 'a = \"%raise\"\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n\nlet failwith s = raise(Failure s)\nlet invalid_arg s = raise(Invalid_argument s)\n\nexception Exit\n\n(* Composition operators *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n\n(* Debugging *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\nexternal __FILE__ : string = \"%loc_FILE\"\nexternal __LINE__ : int = \"%loc_LINE\"\nexternal __MODULE__ : string = \"%loc_MODULE\"\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n\n(* Comparisons *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\nexternal compare : 'a -> 'a -> int = \"%compare\"\n\nlet min x y = if x <= y then x else y\nlet max x y = if x >= y then x else y\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n\n(* Boolean operations *)\n\nexternal not : bool -> bool = \"%boolnot\"\nexternal ( & ) : bool -> bool -> bool = \"%sequand\"\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\nexternal ( or ) : bool -> bool -> bool = \"%sequor\"\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n\n(* Integer operations *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\nexternal ( ~+ ) : int -> int = \"%identity\"\nexternal succ : int -> int = \"%succint\"\nexternal pred : int -> int = \"%predint\"\nexternal ( + ) : int -> int -> int = \"%addint\"\nexternal ( - ) : int -> int -> int = \"%subint\"\nexternal ( * ) : int -> int -> int = \"%mulint\"\nexternal ( / ) : int -> int -> int = \"%divint\"\nexternal ( mod ) : int -> int -> int = \"%modint\"\n\nlet abs x = if x >= 0 then x else -x\n\nexternal ( land ) : int -> int -> int = \"%andint\"\nexternal ( lor ) : int -> int -> int = \"%orint\"\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n\nlet lnot x = x lxor (-1)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n\nlet max_int = (-1) lsr 1\nlet min_int = max_int + 1\n\n(* Floating-point operations *)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\nexternal ( ~+. ) : float -> float = \"%identity\"\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\nexternal ( ** ) : float -> float -> float = \"caml_power_float\" \"pow\"\n  [@@unboxed] [@@noalloc]\nexternal exp : float -> float = \"caml_exp_float\" \"exp\" [@@unboxed] [@@noalloc]\nexternal expm1 : float -> float = \"caml_expm1_float\" \"caml_expm1\"\n  [@@unboxed] [@@noalloc]\nexternal acos : float -> float = \"caml_acos_float\" \"acos\"\n  [@@unboxed] [@@noalloc]\nexternal asin : float -> float = \"caml_asin_float\" \"asin\"\n  [@@unboxed] [@@noalloc]\nexternal atan : float -> float = \"caml_atan_float\" \"atan\"\n  [@@unboxed] [@@noalloc]\nexternal atan2 : float -> float -> float = \"caml_atan2_float\" \"atan2\"\n  [@@unboxed] [@@noalloc]\nexternal hypot : float -> float -> float\n               = \"caml_hypot_float\" \"caml_hypot\" [@@unboxed] [@@noalloc]\nexternal cos : float -> float = \"caml_cos_float\" \"cos\" [@@unboxed] [@@noalloc]\nexternal cosh : float -> float = \"caml_cosh_float\" \"cosh\"\n  [@@unboxed] [@@noalloc]\nexternal log : float -> float = \"caml_log_float\" \"log\" [@@unboxed] [@@noalloc]\nexternal log10 : float -> float = \"caml_log10_float\" \"log10\"\n  [@@unboxed] [@@noalloc]\nexternal log1p : float -> float = \"caml_log1p_float\" \"caml_log1p\"\n  [@@unboxed] [@@noalloc]\nexternal sin : float -> float = \"caml_sin_float\" \"sin\" [@@unboxed] [@@noalloc]\nexternal sinh : float -> float = \"caml_sinh_float\" \"sinh\"\n  [@@unboxed] [@@noalloc]\nexternal sqrt : float -> float = \"caml_sqrt_float\" \"sqrt\"\n  [@@unboxed] [@@noalloc]\nexternal tan : float -> float = \"caml_tan_float\" \"tan\" [@@unboxed] [@@noalloc]\nexternal tanh : float -> float = \"caml_tanh_float\" \"tanh\"\n  [@@unboxed] [@@noalloc]\nexternal ceil : float -> float = \"caml_ceil_float\" \"ceil\"\n  [@@unboxed] [@@noalloc]\nexternal floor : float -> float = \"caml_floor_float\" \"floor\"\n  [@@unboxed] [@@noalloc]\nexternal abs_float : float -> float = \"%absfloat\"\nexternal copysign : float -> float -> float\n                  = \"caml_copysign_float\" \"caml_copysign\"\n                  [@@unboxed] [@@noalloc]\nexternal mod_float : float -> float -> float = \"caml_fmod_float\" \"fmod\"\n  [@@unboxed] [@@noalloc]\nexternal frexp : float -> float * int = \"caml_frexp_float\"\nexternal ldexp : (float [@unboxed]) -> (int [@untagged]) -> (float [@unboxed]) =\n  \"caml_ldexp_float\" \"caml_ldexp_float_unboxed\" [@@noalloc]\nexternal modf : float -> float * float = \"caml_modf_float\"\nexternal float : int -> float = \"%floatofint\"\nexternal float_of_int : int -> float = \"%floatofint\"\nexternal truncate : float -> int = \"%intoffloat\"\nexternal int_of_float : float -> int = \"%intoffloat\"\nexternal float_of_bits : int64 -> float\n  = \"caml_int64_float_of_bits\" \"caml_int64_float_of_bits_unboxed\"\n  [@@unboxed] [@@noalloc]\nlet infinity =\n  float_of_bits 0x7F_F0_00_00_00_00_00_00L\nlet neg_infinity =\n  float_of_bits 0xFF_F0_00_00_00_00_00_00L\nlet nan =\n  float_of_bits 0x7F_F0_00_00_00_00_00_01L\nlet max_float =\n  float_of_bits 0x7F_EF_FF_FF_FF_FF_FF_FFL\nlet min_float =\n  float_of_bits 0x00_10_00_00_00_00_00_00L\nlet epsilon_float =\n  float_of_bits 0x3C_B0_00_00_00_00_00_00L\n\ntype fpclass =\n    FP_normal\n  | FP_subnormal\n  | FP_zero\n  | FP_infinite\n  | FP_nan\nexternal classify_float : (float [@unboxed]) -> fpclass =\n  \"caml_classify_float\" \"caml_classify_float_unboxed\" [@@noalloc]\n\n(* String and byte sequence operations -- more in modules String and Bytes *)\n\nexternal string_length : string -> int = \"%string_length\"\nexternal bytes_length : bytes -> int = \"%bytes_length\"\nexternal bytes_create : int -> bytes = \"caml_create_bytes\"\nexternal string_blit : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\nexternal bytes_blit : bytes -> int -> bytes -> int -> int -> unit\n                        = \"caml_blit_bytes\" [@@noalloc]\nexternal bytes_unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet ( ^ ) s1 s2 =\n  let l1 = string_length s1 and l2 = string_length s2 in\n  let s = bytes_create (l1 + l2) in\n  string_blit s1 0 s 0 l1;\n  string_blit s2 0 s l1 l2;\n  bytes_unsafe_to_string s\n\n(* Character operations -- more in module Char *)\n\nexternal int_of_char : char -> int = \"%identity\"\nexternal unsafe_char_of_int : int -> char = \"%identity\"\nlet char_of_int n =\n  if n < 0 || n > 255 then invalid_arg \"char_of_int\" else unsafe_char_of_int n\n\n(* Unit operations *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n\n(* Pair operations *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n\n(* References *)\n\ntype 'a ref = { mutable contents : 'a }\nexternal ref : 'a -> 'a ref = \"%makemutable\"\nexternal ( ! ) : 'a ref -> 'a = \"%field0\"\nexternal ( := ) : 'a ref -> 'a -> unit = \"%setfield0\"\nexternal incr : int ref -> unit = \"%incr\"\nexternal decr : int ref -> unit = \"%decr\"\n\n(* Result type *)\n\ntype ('a,'b) result = Ok of 'a | Error of 'b\n\n(* String conversion functions *)\n\nexternal format_int : string -> int -> string = \"caml_format_int\"\nexternal format_float : string -> float -> string = \"caml_format_float\"\n\nlet string_of_bool b =\n  if b then \"true\" else \"false\"\nlet bool_of_string = function\n  | \"true\" -> true\n  | \"false\" -> false\n  | _ -> invalid_arg \"bool_of_string\"\n\nlet bool_of_string_opt = function\n  | \"true\" -> Some true\n  | \"false\" -> Some false\n  | _ -> None\n\nlet string_of_int n =\n  format_int \"%d\" n\n\nexternal int_of_string : string -> int = \"caml_int_of_string\"\n\nlet int_of_string_opt s =\n  (* TODO: provide this directly as a non-raising primitive. *)\n  try Some (int_of_string s)\n  with Failure _ -> None\n\nexternal string_get : string -> int -> char = \"%string_safe_get\"\n\nlet valid_float_lexem s =\n  let l = string_length s in\n  let rec loop i =\n    if i >= l then s ^ \".\" else\n    match string_get s i with\n    | '0' .. '9' | '-' -> loop (i + 1)\n    | _ -> s\n  in\n  loop 0\n\nlet string_of_float f = valid_float_lexem (format_float \"%.12g\" f)\n\nexternal float_of_string : string -> float = \"caml_float_of_string\"\n\nlet float_of_string_opt s =\n  (* TODO: provide this directly as a non-raising primitive. *)\n  try Some (float_of_string s)\n  with Failure _ -> None\n\n(* List operations -- more in module List *)\n\nlet rec ( @ ) l1 l2 =\n  match l1 with\n    [] -> l2\n  | hd :: tl -> hd :: (tl @ l2)\n\n(* I/O operations *)\n\ntype in_channel\ntype out_channel\n\nexternal open_descriptor_out : int -> out_channel\n                             = \"caml_ml_open_descriptor_out\"\nexternal open_descriptor_in : int -> in_channel = \"caml_ml_open_descriptor_in\"\n\nlet stdin = open_descriptor_in 0\nlet stdout = open_descriptor_out 1\nlet stderr = open_descriptor_out 2\n\n(* General output functions *)\n\ntype open_flag =\n    Open_rdonly | Open_wronly | Open_append\n  | Open_creat | Open_trunc | Open_excl\n  | Open_binary | Open_text | Open_nonblock\n\nexternal open_desc : string -> open_flag list -> int -> int = \"caml_sys_open\"\n\nexternal set_out_channel_name: out_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_out_gen mode perm name =\n  let c = open_descriptor_out(open_desc name mode perm) in\n  set_out_channel_name c name;\n  c\n\nlet open_out name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_text] 0o666 name\n\nlet open_out_bin name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_binary] 0o666 name\n\nexternal flush : out_channel -> unit = \"caml_ml_flush\"\n\nexternal out_channels_list : unit -> out_channel list\n                           = \"caml_ml_out_channels_list\"\n\nlet flush_all () =\n  let rec iter = function\n      [] -> ()\n    | a::l ->\n        begin try\n            flush a\n        with Sys_error _ ->\n          () (* ignore channels closed during a preceding flush. *)\n        end;\n        iter l\n  in iter (out_channels_list ())\n\nexternal unsafe_output : out_channel -> bytes -> int -> int -> unit\n                       = \"caml_ml_output_bytes\"\nexternal unsafe_output_string : out_channel -> string -> int -> int -> unit\n                              = \"caml_ml_output\"\n\nexternal output_char : out_channel -> char -> unit = \"caml_ml_output_char\"\n\nlet output_bytes oc s =\n  unsafe_output oc s 0 (bytes_length s)\n\nlet output_string oc s =\n  unsafe_output_string oc s 0 (string_length s)\n\nlet output oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"output\"\n  else unsafe_output oc s ofs len\n\nlet output_substring oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > string_length s - len\n  then invalid_arg \"output_substring\"\n  else unsafe_output_string oc s ofs len\n\nexternal output_byte : out_channel -> int -> unit = \"caml_ml_output_char\"\nexternal output_binary_int : out_channel -> int -> unit = \"caml_ml_output_int\"\n\nexternal marshal_to_channel : out_channel -> 'a -> unit list -> unit\n     = \"caml_output_value\"\nlet output_value chan v = marshal_to_channel chan v []\n\nexternal seek_out : out_channel -> int -> unit = \"caml_ml_seek_out\"\nexternal pos_out : out_channel -> int = \"caml_ml_pos_out\"\nexternal out_channel_length : out_channel -> int = \"caml_ml_channel_size\"\nexternal close_out_channel : out_channel -> unit = \"caml_ml_close_channel\"\nlet close_out oc = flush oc; close_out_channel oc\nlet close_out_noerr oc =\n  (try flush oc with _ -> ());\n  (try close_out_channel oc with _ -> ())\nexternal set_binary_mode_out : out_channel -> bool -> unit\n                             = \"caml_ml_set_binary_mode\"\n\n(* General input functions *)\n\nexternal set_in_channel_name: in_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_in_gen mode perm name =\n  let c = open_descriptor_in(open_desc name mode perm) in\n  set_in_channel_name c name;\n  c\n\nlet open_in name =\n  open_in_gen [Open_rdonly; Open_text] 0 name\n\nlet open_in_bin name =\n  open_in_gen [Open_rdonly; Open_binary] 0 name\n\nexternal input_char : in_channel -> char = \"caml_ml_input_char\"\n\nexternal unsafe_input : in_channel -> bytes -> int -> int -> int\n                      = \"caml_ml_input\"\n\nlet input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"input\"\n  else unsafe_input ic s ofs len\n\nlet rec unsafe_really_input ic s ofs len =\n  if len <= 0 then () else begin\n    let r = unsafe_input ic s ofs len in\n    if r = 0\n    then raise End_of_file\n    else unsafe_really_input ic s (ofs + r) (len - r)\n  end\n\nlet really_input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"really_input\"\n  else unsafe_really_input ic s ofs len\n\nlet really_input_string ic len =\n  let s = bytes_create len in\n  really_input ic s 0 len;\n  bytes_unsafe_to_string s\n\nexternal input_scan_line : in_channel -> int = \"caml_ml_input_scan_line\"\n\nlet input_line chan =\n  let rec build_result buf pos = function\n    [] -> buf\n  | hd :: tl ->\n      let len = bytes_length hd in\n      bytes_blit hd 0 buf (pos - len) len;\n      build_result buf (pos - len) tl in\n  let rec scan accu len =\n    let n = input_scan_line chan in\n    if n = 0 then begin                   (* n = 0: we are at EOF *)\n      match accu with\n        [] -> raise End_of_file\n      | _  -> build_result (bytes_create len) len accu\n    end else if n > 0 then begin          (* n > 0: newline found in buffer *)\n      let res = bytes_create (n - 1) in\n      ignore (unsafe_input chan res 0 (n - 1));\n      ignore (input_char chan);           (* skip the newline *)\n      match accu with\n        [] -> res\n      |  _ -> let len = len + n - 1 in\n              build_result (bytes_create len) len (res :: accu)\n    end else begin                        (* n < 0: newline not found *)\n      let beg = bytes_create (-n) in\n      ignore(unsafe_input chan beg 0 (-n));\n      scan (beg :: accu) (len - n)\n    end\n  in bytes_unsafe_to_string (scan [] 0)\n\nexternal input_byte : in_channel -> int = \"caml_ml_input_char\"\nexternal input_binary_int : in_channel -> int = \"caml_ml_input_int\"\nexternal input_value : in_channel -> 'a = \"caml_input_value\"\nexternal seek_in : in_channel -> int -> unit = \"caml_ml_seek_in\"\nexternal pos_in : in_channel -> int = \"caml_ml_pos_in\"\nexternal in_channel_length : in_channel -> int = \"caml_ml_channel_size\"\nexternal close_in : in_channel -> unit = \"caml_ml_close_channel\"\nlet close_in_noerr ic = (try close_in ic with _ -> ())\nexternal set_binary_mode_in : in_channel -> bool -> unit\n                            = \"caml_ml_set_binary_mode\"\n\n(* Output functions on standard output *)\n\nlet print_char c = output_char stdout c\nlet print_string s = output_string stdout s\nlet print_bytes s = output_bytes stdout s\nlet print_int i = output_string stdout (string_of_int i)\nlet print_float f = output_string stdout (string_of_float f)\nlet print_endline s =\n  output_string stdout s; output_char stdout '\\n'; flush stdout\nlet print_newline () = output_char stdout '\\n'; flush stdout\n\n(* Output functions on standard error *)\n\nlet prerr_char c = output_char stderr c\nlet prerr_string s = output_string stderr s\nlet prerr_bytes s = output_bytes stderr s\nlet prerr_int i = output_string stderr (string_of_int i)\nlet prerr_float f = output_string stderr (string_of_float f)\nlet prerr_endline s =\n  output_string stderr s; output_char stderr '\\n'; flush stderr\nlet prerr_newline () = output_char stderr '\\n'; flush stderr\n\n(* Input functions on standard input *)\n\nlet read_line () = flush stdout; input_line stdin\nlet read_int () = int_of_string(read_line())\nlet read_int_opt () = int_of_string_opt(read_line())\nlet read_float () = float_of_string(read_line())\nlet read_float_opt () = float_of_string_opt(read_line())\n\n(* Operations on large files *)\n\nmodule LargeFile =\n  struct\n    external seek_out : out_channel -> int64 -> unit = \"caml_ml_seek_out_64\"\n    external pos_out : out_channel -> int64 = \"caml_ml_pos_out_64\"\n    external out_channel_length : out_channel -> int64\n                                = \"caml_ml_channel_size_64\"\n    external seek_in : in_channel -> int64 -> unit = \"caml_ml_seek_in_64\"\n    external pos_in : in_channel -> int64 = \"caml_ml_pos_in_64\"\n    external in_channel_length : in_channel -> int64 = \"caml_ml_channel_size_64\"\n  end\n\n(* Formats *)\n\ntype ('a, 'b, 'c, 'd, 'e, 'f) format6\n   = ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6\n   = Format of ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt\n               * string\n\ntype ('a, 'b, 'c, 'd) format4 = ('a, 'b, 'c, 'c, 'c, 'd) format6\n\ntype ('a, 'b, 'c) format = ('a, 'b, 'c, 'c) format4\n\nlet string_of_format (Format (_fmt, str)) = str\n\nexternal format_of_string :\n ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n ('a, 'b, 'c, 'd, 'e, 'f) format6 = \"%identity\"\n\nlet ( ^^ ) (Format (fmt1, str1)) (Format (fmt2, str2)) =\n  Format (CamlinternalFormatBasics.concat_fmt fmt1 fmt2,\n          str1 ^ \"%,\" ^ str2)\n\n(* Miscellaneous *)\n\nexternal sys_exit : int -> 'a = \"caml_sys_exit\"\n\nlet exit_function = ref flush_all\n\nlet at_exit f =\n  let g = !exit_function in\n  (* MPR#7253, MPR#7796: make sure \"f\" is executed only once *)\n  let f_already_ran = ref false in\n  exit_function :=\n    (fun () -> \n      if not !f_already_ran then begin f_already_ran := true; f() end;\n      g())\n\nlet do_at_exit () = (!exit_function) ()\n\nlet exit retcode =\n  do_at_exit ();\n  sys_exit retcode\n\nlet _ = register_named_value \"Pervasives.do_at_exit\" do_at_exit\nend\n\ninclude Pervasives\n\n(*MODULE_ALIASES*)\nmodule Arg          = Arg\nmodule Array        = Array\nmodule ArrayLabels  = ArrayLabels\nmodule Bigarray     = Bigarray\nmodule Buffer       = Buffer\nmodule Bytes        = Bytes\nmodule BytesLabels  = BytesLabels\nmodule Callback     = Callback\nmodule Char         = Char\nmodule Complex      = Complex\nmodule Digest       = Digest\nmodule Ephemeron    = Ephemeron\nmodule Filename     = Filename\nmodule Float        = Float\nmodule Format       = Format\nmodule Gc           = Gc\nmodule Genlex       = Genlex\nmodule Hashtbl      = Hashtbl\nmodule Int32        = Int32\nmodule Int64        = Int64\nmodule Lazy         = Lazy\nmodule Lexing       = Lexing\nmodule List         = List\nmodule ListLabels   = ListLabels\nmodule Map          = Map\nmodule Marshal      = Marshal\nmodule MoreLabels   = MoreLabels\nmodule Nativeint    = Nativeint\nmodule Obj          = Obj\nmodule Oo           = Oo\nmodule Parsing      = Parsing\nmodule Printexc     = Printexc\nmodule Printf       = Printf\nmodule Queue        = Queue\nmodule Random       = Random\nmodule Scanf        = Scanf\nmodule Seq          = Seq\nmodule Set          = Set\nmodule Sort         = Sort\nmodule Spacetime    = Spacetime\nmodule Stack        = Stack\nmodule StdLabels    = StdLabels\nmodule Stream       = Stream\nmodule String       = String\nmodule StringLabels = StringLabels\nmodule Sys          = Sys\nmodule Uchar        = Uchar\nmodule Weak         = Weak\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen Printf\n\nlet printers = ref []\n\nlet locfmt = format_of_string \"File \\\"%s\\\", line %d, characters %d-%d: %s\"\n\nlet field x i =\n  let f = Obj.field x i in\n  if not (Obj.is_block f) then\n    sprintf \"%d\" (Obj.magic f : int)           (* can also be a char *)\n  else if Obj.tag f = Obj.string_tag then\n    sprintf \"%S\" (Obj.magic f : string)\n  else if Obj.tag f = Obj.double_tag then\n    string_of_float (Obj.magic f : float)\n  else\n    \"_\"\n\nlet rec other_fields x i =\n  if i >= Obj.size x then \"\"\n  else sprintf \", %s%s\" (field x i) (other_fields x (i+1))\n\nlet fields x =\n  match Obj.size x with\n  | 0 -> \"\"\n  | 1 -> \"\"\n  | 2 -> sprintf \"(%s)\" (field x 1)\n  | _ -> sprintf \"(%s%s)\" (field x 1) (other_fields x 2)\n\nlet to_string x =\n  let rec conv = function\n    | hd :: tl ->\n        (match try hd x with _ -> None with\n        | Some s -> s\n        | None -> conv tl)\n    | [] ->\n        match x with\n        | Out_of_memory -> \"Out of memory\"\n        | Stack_overflow -> \"Stack overflow\"\n        | Match_failure(file, line, char) ->\n            sprintf locfmt file line char (char+5) \"Pattern matching failed\"\n        | Assert_failure(file, line, char) ->\n            sprintf locfmt file line char (char+6) \"Assertion failed\"\n        | Undefined_recursive_module(file, line, char) ->\n            sprintf locfmt file line char (char+6) \"Undefined recursive module\"\n        | _ ->\n            let x = Obj.repr x in\n            if Obj.tag x <> 0 then\n              (Obj.magic (Obj.field x 0) : string)\n            else\n              let constructor =\n                (Obj.magic (Obj.field (Obj.field x 0) 0) : string) in\n              constructor ^ (fields x) in\n  conv !printers\n\nlet print fct arg =\n  try\n    fct arg\n  with x ->\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    flush stderr;\n    raise x\n\nlet catch fct arg =\n  try\n    fct arg\n  with x ->\n    flush stdout;\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    exit 2\n\ntype raw_backtrace_slot\ntype raw_backtrace\n\nexternal get_raw_backtrace:\n  unit -> raw_backtrace = \"caml_get_exception_raw_backtrace\"\n\nexternal raise_with_backtrace: exn -> raw_backtrace -> 'a\n  = \"%raise_with_backtrace\"\n\ntype backtrace_slot =\n  | Known_location of {\n      is_raise    : bool;\n      filename    : string;\n      line_number : int;\n      start_char  : int;\n      end_char    : int;\n      is_inline   : bool;\n    }\n  | Unknown_location of {\n      is_raise : bool\n    }\n\n(* to avoid warning *)\nlet _ = [Known_location { is_raise = false; filename = \"\";\n                          line_number = 0; start_char = 0; end_char = 0;\n                          is_inline = false };\n         Unknown_location { is_raise = false }]\n\nexternal convert_raw_backtrace_slot:\n  raw_backtrace_slot -> backtrace_slot = \"caml_convert_raw_backtrace_slot\"\n\nexternal convert_raw_backtrace:\n  raw_backtrace -> backtrace_slot array = \"caml_convert_raw_backtrace\"\n\nlet convert_raw_backtrace bt =\n  try Some (convert_raw_backtrace bt)\n  with Failure _ -> None\n\nlet format_backtrace_slot pos slot =\n  let info is_raise =\n    if is_raise then\n      if pos = 0 then \"Raised at\" else \"Re-raised at\"\n    else\n      if pos = 0 then \"Raised by primitive operation at\" else \"Called from\"\n  in\n  match slot with\n  | Unknown_location l ->\n      if l.is_raise then\n        (* compiler-inserted re-raise, skipped *) None\n      else\n        Some (sprintf \"%s unknown location\" (info false))\n  | Known_location l ->\n      Some (sprintf \"%s file \\\"%s\\\"%s, line %d, characters %d-%d\"\n              (info l.is_raise) l.filename\n              (if l.is_inline then \" (inlined)\" else \"\")\n              l.line_number l.start_char l.end_char)\n\nlet print_exception_backtrace outchan backtrace =\n  match backtrace with\n  | None ->\n      fprintf outchan\n        \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> fprintf outchan \"%s\\n\" str\n      done\n\nlet print_raw_backtrace outchan raw_backtrace =\n  print_exception_backtrace outchan (convert_raw_backtrace raw_backtrace)\n\n(* confusingly named: prints the global current backtrace *)\nlet print_backtrace outchan =\n  print_raw_backtrace outchan (get_raw_backtrace ())\n\nlet backtrace_to_string backtrace =\n  match backtrace with\n  | None ->\n     \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      let b = Buffer.create 1024 in\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> bprintf b \"%s\\n\" str\n      done;\n      Buffer.contents b\n\nlet raw_backtrace_to_string raw_backtrace =\n  backtrace_to_string (convert_raw_backtrace raw_backtrace)\n\nlet backtrace_slot_is_raise = function\n  | Known_location l -> l.is_raise\n  | Unknown_location l -> l.is_raise\n\nlet backtrace_slot_is_inline = function\n  | Known_location l -> l.is_inline\n  | Unknown_location _ -> false\n\ntype location = {\n  filename : string;\n  line_number : int;\n  start_char : int;\n  end_char : int;\n}\n\nlet backtrace_slot_location = function\n  | Unknown_location _ -> None\n  | Known_location l ->\n    Some {\n      filename    = l.filename;\n      line_number = l.line_number;\n      start_char  = l.start_char;\n      end_char    = l.end_char;\n    }\n\nlet backtrace_slots raw_backtrace =\n  (* The documentation of this function guarantees that Some is\n     returned only if a part of the trace is usable. This gives us\n     a bit more work than just convert_raw_backtrace, but it makes the\n     API more user-friendly -- otherwise most users would have to\n     reimplement the \"Program not linked with -g, sorry\" logic\n     themselves. *)\n  match convert_raw_backtrace raw_backtrace with\n    | None -> None\n    | Some backtrace ->\n      let usable_slot = function\n        | Unknown_location _ -> false\n        | Known_location _ -> true in\n      let rec exists_usable = function\n        | (-1) -> false\n        | i -> usable_slot backtrace.(i) || exists_usable (i - 1) in\n      if exists_usable (Array.length backtrace - 1)\n      then Some backtrace\n      else None\n\nmodule Slot = struct\n  type t = backtrace_slot\n  let format = format_backtrace_slot\n  let is_raise = backtrace_slot_is_raise\n  let is_inline = backtrace_slot_is_inline\n  let location = backtrace_slot_location\nend\n\nexternal raw_backtrace_length :\n  raw_backtrace -> int = \"caml_raw_backtrace_length\" [@@noalloc]\n\nexternal get_raw_backtrace_slot :\n  raw_backtrace -> int -> raw_backtrace_slot = \"caml_raw_backtrace_slot\"\n\nexternal get_raw_backtrace_next_slot :\n  raw_backtrace_slot -> raw_backtrace_slot option\n  = \"caml_raw_backtrace_next_slot\"\n\n(* confusingly named:\n   returns the *string* corresponding to the global current backtrace *)\nlet get_backtrace () = raw_backtrace_to_string (get_raw_backtrace ())\n\nexternal record_backtrace: bool -> unit = \"caml_record_backtrace\"\nexternal backtrace_status: unit -> bool = \"caml_backtrace_status\"\n\nlet register_printer fn =\n  printers := fn :: !printers\n\nexternal get_callstack: int -> raw_backtrace = \"caml_get_current_callstack\"\n\nlet exn_slot x =\n  let x = Obj.repr x in\n  if Obj.tag x = 0 then Obj.field x 0 else x\n\nlet exn_slot_id x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 1) : int)\n\nlet exn_slot_name x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 0) : string)\n\n\nlet uncaught_exception_handler = ref None\n\nlet set_uncaught_exception_handler fn = uncaught_exception_handler := Some fn\n\nlet empty_backtrace : raw_backtrace = Obj.obj (Obj.new_block Obj.abstract_tag 0)\n\nlet try_get_raw_backtrace () =\n  try\n    get_raw_backtrace ()\n  with _ (* Out_of_memory? *) ->\n    empty_backtrace\n\nlet handle_uncaught_exception' exn debugger_in_use =\n  try\n    (* Get the backtrace now, in case one of the [at_exit] function\n       destroys it. *)\n    let raw_backtrace =\n      if debugger_in_use (* Same test as in [byterun/printexc.c] *) then\n        empty_backtrace\n      else\n        try_get_raw_backtrace ()\n    in\n    (try Pervasives.do_at_exit () with _ -> ());\n    match !uncaught_exception_handler with\n    | None ->\n        eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n        print_raw_backtrace stderr raw_backtrace;\n        flush stderr\n    | Some handler ->\n        try\n          handler exn raw_backtrace\n        with exn' ->\n          let raw_backtrace' = try_get_raw_backtrace () in\n          eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n          print_raw_backtrace stderr raw_backtrace;\n          eprintf \"Fatal error in uncaught exception handler: exception %s\\n\"\n            (to_string exn');\n          print_raw_backtrace stderr raw_backtrace';\n          flush stderr\n  with\n    | Out_of_memory ->\n        prerr_endline\n          \"Fatal error: out of memory in uncaught exception handler\"\n\n(* This function is called by [caml_fatal_uncaught_exception] in\n   [byterun/printexc.c] which expects no exception is raised. *)\nlet handle_uncaught_exception exn debugger_in_use =\n  try\n    handle_uncaught_exception' exn debugger_in_use\n  with _ ->\n    (* There is not much we can do at this point *)\n    ()\n\nexternal register_named_value : string -> 'a -> unit\n  = \"caml_register_named_value\"\n\nlet () =\n  register_named_value \"Printexc.handle_uncaught_exception\"\n    handle_uncaught_exception\n","(* This file is part of Lwt, released under the MIT license. See LICENSE.md for\n   details, or visit https://github.com/ocsigen/lwt/blob/master/LICENSE.md. *)\n\n\n\n(* Reading guide\n\n   Welcome to the implementation of the Lwt core! This is a big file, but we\n   hope that reading it (parts at a time!) will not be scary :) Here is why:\n\n\n   * Sectioning\n\n   The code is broken up into sections, each one of which is an internal module.\n   Most of the modules have a signature, which serves as a neat table of\n   contents.\n\n   It is recommended that you read this file with code folding enabled. If you\n   fold all the modules, you can visualize the logical structure of Lwt quite\n   easily. You can then expand modules as needed, depending on what part of the\n   implementation you are interested in. Without code folding, you face an\n   intimidating wall of code :( You can still visually parse the file, however,\n   because there are plenty of blank lines to help section things off. You can\n   also view this file folded online:\n\n     https://gist.github.com/aantron/9fab0bdead98a60fccf06e0189186863\n     https://gist.github.com/aantron/97b58520d5bb4858ccac6f54700a24d7\n\n   The signatures are unusual: big comments are absent. They are moved into the\n   modules, so that they are hidden by code folding when you (the reader!) are\n   not interested in those modules.\n\n\n   * Documentation\n\n   The documentation begins with an overview of major concepts and components.\n   This overview puts everything into context. You don't have to read the whole\n   thing. The overview begins with basic concepts, moves on to advanced ones,\n   and then gets into the truly esoteric. You can read about each concept on an\n   as-needed basis. However, once you have read the whole overview, you will be\n   aware of *everything* that is needed to understand, and work with, the core\n   of Lwt.\n\n   Littered in the code are additional comments, that go in-depth on various\n   local implementation details, opportunities, regrets, and the like.\n\n   The sections (modules) of the code correspond closely to sections of the\n   overview.\n\n\n   * Whitespace\n\n   The total line count of this file may seem frightening, but one third of it\n   is whitespace and comments, both there to help you read the remaining two\n   thirds!\n\n   Also, within those two thirds, there are large groups of functions that are\n   repetitive and formulaic, so there is much less conceptually-unique code in\n   Lwt than you might think at first.\n\n\n   * Please edit the code and the docs!\n\n   This code is meant to be readable, and to be edited. If you are reading\n   something, and think there is a better way to express it, please go ahead and\n   open a pull request to the Lwt repository at\n\n     https://github.com/ocsigen/lwt\n\n   Even if your pull request somehow doesn't get merged, you will have educated\n   the maintainers, not to mention other contributors, and users. This is true\n   even if the change is trivial -- sometimes, maintainers just need to be\n   educated multiple times before they see the wisdom of it :/\n\n   Likewise, if you would like to make a code contribution to the Lwt core, it\n   is quite welcome, and we hope that this code is readable enough for you to be\n   able to make it!\n\n\n   Enjoy! *)\n\n\n\n(* Overview\n\n   In this file, there is a \"model\" function -- [Lwt.bind] -- which pulls\n   together many (though not all) of the concepts and helpers discussed in this\n   overview. To find it, search for \"let bind,\" and you can examine it while\n   reading the overview. The authors of this file intend to put extra effort\n   into writing nice comments inside [Lwt.bind] :)\n\n\n   0. Main mechanism and two aspects\n\n   The Lwt interface ([lwt.mli]) provides one main mechanism, promises, and two\n   \"aspects,\" which are *not* necessary to understand the main mechanism\n   promises, but they are still there:\n\n   - promise cancelation\n   - sequence-associated storage\n\n   If you are not interested in cancelation or storage, you can ignore these two\n   complications, and still get a pretty good understanding of the code. To\n   help, all identifiers related to cancelation contain the string \"cancel,\" and\n   all identifiers related to storage contain \"storage.\"\n\n\n   1. Promises\n\n   A promise is a cell that can be in one of two states: \"resolved\" or\n   \"pending.\"\n\n   - Resolved promises\n\n     A resolved promise is either \"fulfilled\" with a value, or \"rejected\" with\n     an exception. The state of a resolved promise will never change again: a\n     resolved promise is immutable. A resolved promise is basically equivalent\n     to an [('a, exn) Pervasives.result]. Resolved promises are produced in two\n     ways:\n\n     - [Lwt.return], [Lwt.fail], and related functions, produce \"trivial\"\n       promises that are resolved from the start.\n     - The other way is to resolve a promise that started out pending.\n\n     Note that rejected promises have nothing to do with unhandled exceptions.\n\n   - Pending promises\n\n     ...are those that may become resolved in the future. Each pending promise\n     carries a list of callbacks. These callbacks are added by functions like\n     [Lwt.bind], and called by Lwt if/when the promise is resolved. These\n     callbacks typically end up resolving additional promises; see section\n     \"Resolution loop\" below.\n\n     Pending promises are produced in three ways, according to how they can be\n     resolved:\n\n     - Initial promises\n\n       ...are created by [Lwt.wait] and [Lwt.task]. The user of Lwt resolves\n       these promises manually, through the resolvers returned by those\n       functions.\n\n     - Sequential composition\n\n       For example, [Lwt.bind]. These promises only are only resolved when the\n       preceding sequence of promises resolves. The user cannot resolve these\n       promises directly (but see the section on cancelation below).\n\n     - Concurrent composition\n\n       For example, [Lwt.join] or [Lwt.choose]. These promises are only resolved\n       when all or one of a set of \"preceding\" promises resolve. The user cannot\n       resolve these promises directly (but see the section on cancelation\n       below).\n\n\n   2. Resolvers\n\n   Resolvers are given to the user by [Lwt.wait] and [Lwt.task], and can be used\n   by the user to resolve the corresponding promises. Note that this means the\n   user only ever gets resolvers for initial promises.\n\n   Internally, resolvers are the exact same objects as the promises they\n   resolve, even though the resolver is exposed as a reference of a different\n   type by [lwt.mli]. For details on why, see section \"Type system abuse\" below.\n\n\n   3. Callbacks\n\n   ...are attached by Lwt to pending promises, and are run by Lwt if/when those\n   promises are resolved. These callbacks are not directly exposed through\n   [lwt.mli] -- they are a low-level mechanism. For example, to implement\n   [Lwt.bind p f], Lwt attaches a callback to [p] that does some internal Lwt\n   book-keeping, and then calls [f] if [p] is fulfilled, and does something else\n   if [p] is rejected.\n\n   Callbacks come in two flavors: regular callbacks and cancel callbacks. The\n   only material differences between them are that:\n\n   - regular callbacks are always called when a promise is resolved, but cancel\n     callbacks are called, in addition, only if the promise is canceled, and\n   - all cancel callbacks of a promise are called before any regular callback\n     is called.\n\n   Cancelation is a special case of resolution, in particular, a special case of\n   rejection, but see the section on cancelation later below.\n\n\n   4. Resolution loop\n\n   Resolving a pending promise triggers its callbacks, and those might resolve\n   more pending promises, triggering more callbacks, etc. This behavior is the\n   *resolution loop*. Lwt has some machinery to avoid stack overflow and other\n   unfortunate situations during this loop.\n\n   This chaining of promise resolutions through callbacks can be seen as a kind\n   of promise dependency graph, in which the nodes are pending promises, and the\n   edges are callbacks. During the resolution loop, Lwt starts at some initial\n   promise that is getting resolved by the user, and recursively resolves all\n   dependent promises. The graph is modified: resolved promises are no longer\n   pending, so they are no longer part of the graph.\n\n   Some of these dependencies are explicit to Lwt, e.g. the callbacks registered\n   by [Lwt.bind]. Others are not visible to Lwt, because the user can always\n   register a callback using a function like [Lwt.on_success], and use that\n   callback to resolve another initial promise. All the explicit dependencies\n   are created by Lwt's own sequential and concurrent composition functions\n   (so, [Lwt.bind], [Lwt.join], etc). Whether dependencies are explicit or not\n   is relevant only to cancelation.\n\n\n   5. Cancelation\n\n   As described above, ordinary promise resolution proceeds from an initial\n   promise, forward along callbacks through the dependency graph. Since it\n   starts from an initial promise, it can only be triggered using a resolver.\n\n   Cancelation is a sort of dual to ordinary resolution. Instead of starting at\n   an initial promise/resolver, cancelation starts at *any* promise. It then\n   goes *backwards* through the explicit dependency graph, looking for\n   cancelable initial promises to cancel -- those that were created by\n   [Lwt.task]. After finding them, cancelation resolves them normally with\n   [Rejected Lwt.Canceled], causing an ordinary promise resolution process.\n\n   To summarize, cancelation is a way to trigger an *ordinary* resolution of\n   promises created with [Lwt.task], by first searching for them in the promise\n   dependency graph (which is assembled by [Lwt.bind], [Lwt.join], etc).\n\n   This backwards search is triggered only by [Lwt.cancel]. It is also possible\n   for the user to cancel a promise directly by rejecting it with\n   [Lwt.Canceled], but in all cases where the user can do so, the search would\n   be redundant anyway -- the user has only two ways of directly rejecting a\n   promise with [Lwt.Canceled] (or any exception, for that matter):\n\n   - The user can create an initial promise, then reject it through its\n     resolver. The search is redundant because it would find only the same\n     initial promise to cancel.\n   - The user can create a trivial promise by calling [Lwt.fail Lwt.Canceled].\n     The search is again redundant; in this case it would find nothing to\n     cancel.\n\n   Note that there is a quirk: only promises created by [Lwt.task] are\n   susceptible to being canceled by [Lwt.cancel], but the user can manually\n   cancel initial promises created by both [Lwt.task] and [Lwt.wait].\n\n   Due to [Lwt.cancel], promise cancelation, and therefore resolution, can be\n   initiated by the user without access to a resolver. This is important for\n   reasoning about state changes in the implementation of Lwt, and is referenced\n   in some implementation detail comments.\n\n\n   6. No I/O\n\n   The Lwt core deliberately doesn't do I/O. The resolution loop stops running\n   once no promises can be resolved immediately. It has to be restarted later\n   by some surrouding I/O loop. This I/O loop typically keeps track of pending\n   promises that represent blocked or in-progress I/O; other pending promises\n   that indirectly depend on I/O are not explicitly tracked. They are retained\n   in memory by references captured inside callbacks.\n\n   On Unix and Windows, a separate top-level loop, typically [Lwt_main.run], is\n   necessary to repeatedly call [select], [epoll], or [kevent], and resolve\n   blocked I/O promises.\n\n   In JavaScript, references to promises are retained by JavaScript code, which\n   is, in turn, triggered by the JS engine. In other words, the top-level loop\n   is buried inside the JS engine.\n\n   This separation of the Lwt core from the top-level I/O loop keeps the core\n   portable.\n\n\n   7. Promise \"proxying\"\n\n   In [Lwt.bind : 'a t -> ('a -> 'b t) -> 'b t], the outer ['b t] is created by\n   [bind] first, and returned to the user. The inner ['b t] is created by the\n   user later, and then returned to [bind]. At that point, [bind] needs to make\n   the inner and outer ['b t]s behave identically.\n\n   This is accomplished by making one of the promises point to the other. The\n   first of the promises thus becomes a \"proxy,\" and the other is its\n   \"underlying\" promise.\n\n   After that, all operations that would be performed by Lwt on the proxy are\n   instead performed on the underlying promise. This is ensured by the numerous\n   calls to the internal function [underlying] in this file.\n\n   Because of the pervasive use of [underlying], proxies can be more or less\n   ignored on a first reading the code. However, becoming a proxy is a kind of\n   state change, and any promise that is returned by a callback to [bind], or to\n   a similar Lwt function, might become a proxy. That means: just about any\n   promise that is handed to the user, might become a proxy promise by the next\n   time Lwt sees it. This is important for reasoning about possible state\n   changes in implementation of Lwt, and is referenced in some implementation\n   detail comments.\n\n\n   8. Sequence-associated storage\n\n   Lwt has a global key-value map. The map can be preserved across sequential\n   composition functions, so that it has the same state in the user's callback\n   [f] as it did at the time the user called [Lwt.bind p f].\n\n   The details are pretty straightforward, and discussed in module\n   [Sequence_associated_storage]. The main thing to be aware of is the many\n   references to [current_storage] throughout Lwt, which are needed to properly\n   save and restore the mapping.\n\n\n   9. Type system abuse\n\n   The implementation uses the type system somewhat extensively. Gentle\n   introductions can be found here:\n\n     https://discuss.ocaml.org/t/161/7\n     https://discuss.ocaml.org/t/161/16\n\n   A short summary follows.\n\n   The promise state is, internally, a GADT which encodes the state in its type\n   parameters. Thus, if you do [let p = underlying p], the shadowing reference\n   [p] is statically known *not* to be a proxy, and the compiler knows that the\n   corresponding match case [Proxy _] is impossible.\n\n   The external promise type, ['a t], and the external resolver type, ['a u],\n   are not GADTs. Furthermore, they are, respectively, covariant and\n   contravariant in ['a], while the internal promise type is invariant in ['a].\n   For these reasons, there are nasty casts between ['a t], ['a u], and the\n   internal promise type. The implementation is, of course, written in terms of\n   the internal type.\n\n   Casting from an ['a t] to an internal promise produces a reference for\n   which the state is \"unknown\": this is simulated with a helper GADT, which\n   encodes existential types. There are several similar casts, which are used\n   to document possible state changes between the time a promise is created,\n   and the later time it is used in a callback. You can see these casts in\n   action in [Lwt.bind]. The cast syntax is pretty light, and, besides being\n   commented in [bind], all such casts are documented in modules [Public_types]\n   and [Basic_helpers].\n\n\n   If you've made it this far, you are an Lwt expert! Rejoice! *)\n\n\n\n(* Suppress warning 4, \"fragile pattern matching,\" in this file only, due to\n\n     https://caml.inria.fr/mantis/view.php?id=7451\n\n   This can be removed if/when Lwt requires a minimum OCaml version 4.05. *)\n[@@@ocaml.warning \"-4\"]\n\n\n\n(* [Lwt_sequence] is deprecated – we don't want users outside Lwt using it.\n   However, it is still used internally by Lwt. So, briefly disable warning 3\n   (\"deprecated\"), and create a local, non-deprecated alias for\n   [Lwt_sequence] that can be referred to by the rest of the code in this\n   module without triggering any more warnings. *)\n[@@@ocaml.warning \"-3\"]\nmodule Lwt_sequence = Lwt_sequence\n[@@@ocaml.warning \"+3\"]\n\n\n\n(* Some sequence-associated storage types\n\n   Sequence-associated storage is defined and documented later, in module\n   [Sequence_associated_storage]. However, the following types are mentioned in\n   the definition of [promise], so they must be defined here first. *)\nmodule Storage_map =\n  Map.Make\n    (struct\n      type t = int\n      let compare = compare\n    end)\ntype storage = (unit -> unit) Storage_map.t\n\n\n\nmodule Main_internal_types =\nstruct\n  (* Phantom types for use with types [promise] and [state]. These are never\n     constructed; the purpose of the constructors is to prove to the type\n     checker that these types are distinct from each other. Warning 37, \"unused\n     constructor,\" therefore has to be temporarily suppressed. *)\n\n  [@@@ocaml.warning \"-37\"]\n\n  type underlying = private Underlying_and_this_constructor_is_not_used\n  type proxy = private Proxy_and_this_constructor_is_not_used\n\n  type resolved = private Resolved_and_this_constructor_is_not_used\n  type pending = private Pending_and_this_constructor_is_not_used\n\n  [@@@ocaml.warning \"+37\"]\n\n\n\n  (* Promises proper. *)\n\n  type ('a, 'u, 'c) promise = {\n    mutable state : ('a, 'u, 'c) state;\n  }\n\n  and (_, _, _) state =\n    | Fulfilled : 'a                  -> ('a, underlying, resolved) state\n    | Rejected  : exn                 -> ( _, underlying, resolved) state\n    | Pending   : 'a callbacks        -> ('a, underlying, pending)  state\n    | Proxy     : ('a, _, 'c) promise -> ('a, proxy,      'c)       state\n\n  (* Note:\n\n     A promise whose state is [Proxy _] is a \"proxy\" promise. A promise whose\n     state is *not* [Proxy _] is an \"underlying\" promise.\n\n     The \"underlying promise of [p]\" is:\n\n     - [p], if [p] is itself underlying.\n     - Otherwise, [p] is a proxy and has state [Proxy p']. The underlying\n       promise of [p] is the underlying promise of [p'].\n\n     In other words, to find the underlying promise of a proxy, Lwt follows the\n     [Proxy _] links to the end. *)\n\n  (* Note:\n\n     When a promise is resolved, or becomes a proxy, its state field is\n     mutated. This invalidates the type invariants on the promise. See internal\n     function [set_promise_state] for details about that.\n\n     When an Lwt function has a reference to a promise, and also registers a\n     callback that has a reference to the same promise, the invariants on the\n     reference may become invalid by the time the callback is called. All such\n     callbacks have comments explaining what the valid invariants are at that\n     point, and/or casts to (1) get the correct typing and (2) document the\n     potential state change for readers of the code. *)\n\n\n\n  (* Callback information for pending promises. *)\n\n  and 'a callbacks = {\n    mutable regular_callbacks : 'a regular_callback_list;\n    mutable cancel_callbacks  : 'a cancel_callback_list;\n    mutable how_to_cancel     : how_to_cancel;\n    mutable cleanups_deferred : int;\n  }\n\n  and 'a regular_callback = 'a resolved_state -> unit\n\n  and cancel_callback = unit -> unit\n\n  and 'a resolved_state = ('a, underlying, resolved) state\n\n  and how_to_cancel =\n    | Not_cancelable              :                           how_to_cancel\n    | Cancel_this_promise         :                           how_to_cancel\n    | Propagate_cancel_to_one     : (_, _, _) promise      -> how_to_cancel\n    | Propagate_cancel_to_several : (_, _, _) promise list -> how_to_cancel\n\n  and 'a regular_callback_list =\n    | Regular_callback_list_empty\n    | Regular_callback_list_concat of\n      'a regular_callback_list * 'a regular_callback_list\n    | Regular_callback_list_implicitly_removed_callback of\n      'a regular_callback\n    | Regular_callback_list_explicitly_removable_callback of\n      'a regular_callback option ref\n\n  and _ cancel_callback_list =\n    | Cancel_callback_list_empty :\n      _ cancel_callback_list\n    | Cancel_callback_list_concat :\n      'a cancel_callback_list * 'a cancel_callback_list ->\n        'a cancel_callback_list\n    | Cancel_callback_list_callback :\n      storage * cancel_callback ->\n        _ cancel_callback_list\n    | Cancel_callback_list_remove_sequence_node :\n      ('a, _, _) promise Lwt_sequence.node ->\n        'a cancel_callback_list\n\n  (* Notes:\n\n     These type definitions are guilty of performing several optimizations,\n     without which they would be much easier to understand.\n\n     - The type parameters of ['a resolved_state] guarantee that it is either\n       [Fulfilled _] or [Rejected _]. So, it is equivalent to\n       [('a, exn) Pervasives.result], and, indeed, should have an identical\n       memory representation.\n\n     - As per the Overview, there are regular callbacks and cancel callbacks.\n       Cancel callbacks are called only on cancelation, and, then, before any\n       regular callbacks are called.\n\n       Despite the different types for the two kinds of callbacks, they are\n       otherwise the same. Cancel callbacks just don't need a result state\n       argument, because it is known to be [Rejected Canceled].\n\n     - Regular callbacks are not allowed to raise exceptions. All regular\n       callbacks are created in this file, so this can be checked.\n\n       Cancel callbacks can raise exceptions, but if they do so, the exceptions\n       are passed to [async_exception_hook].\n\n     - [how_to_cancel] implements the dependency graph mentioned in the\n       Overview. It is traversed backwards during [Lwt.cancel]. It is a GADT\n       because we don't care about the actual types of the promise references\n       stored, or their invariants. The constructors correspond to pending\n       promise kinds as follows:\n         - [Not_cancelable]: initial, [Lwt.wait].\n         - [Cancel_this_promise]: initial, [Lwt.task].\n         - [Propagate_cancel_to_one]: sequential composition, e.g. [Lwt.bind].\n         - [Propagate_cancel_to_several]: concurrent composition, e.g.\n           [Lwt.join].\n\n     - The two callback list types are ordinary append-friendly lists, with two\n       optimizations inlined:\n\n       - ['a regular_callback_list] apparently has two \"kinds\" of regular\n         callbacks, implicitly removed and explicitly removable. All callbacks\n         are removable. It's just that, for some callbacks, they will only be\n         removed at the same time that the promise they are attached to becomes\n         resolved. When that happens, the entire state of that promise changes\n         to [Fulfilled _] or [Rejected _], and the reference to the whole\n         callback list is simply lost. This \"removes\" the callback. For these\n         callbacks, ['a regular_callback_list] attempts to trim an option and a\n         reference cell with the\n         [Regular_callback_list_implicitly_removed_callback] constructor.\n\n       - ['a cancel_callback_list] has\n         [Cancel_callback_list_remove_sequence_node node], which is the same as\n         [Cancel_callback_list_callback (_, (fun _ ->\n           Lwt_sequence.remove node))].\n         This was probably done to avoid a closure allocation.\n\n     - The [cleanups_deferred] field is explained in module\n       [Pending_callbacks]. *)\nend\nopen Main_internal_types\n\n\n\nmodule Public_types =\nstruct\n  type +'a t\n  type -'a u\n  (* The contravariance of resolvers is, technically, unsound due to the\n     existence of [Lwt.waiter_of_wakener]. That is why that function is\n     deprecated. See\n\n       https://github.com/ocsigen/lwt/issues/458 *)\n\n  let to_public_promise : ('a, _, _) promise -> 'a t = Obj.magic\n  let to_public_resolver : ('a, _, _) promise -> 'a u = Obj.magic\n\n  type _ packed_promise =\n    | Internal : ('a, _, _) promise -> 'a packed_promise\n    [@@ocaml.unboxed]\n\n  let to_internal_promise (p : 'a t) : 'a packed_promise =\n    Internal (Obj.magic p)\n  let to_internal_resolver (r : 'a u) : 'a packed_promise =\n    Internal (Obj.magic r)\n\n  (* Most functions that take a public promise (['a t]) convert it to an\n     internal promise as follows:\n\n       (* p : 'a t *)\n\n       let Internal p = to_internal_promise p in\n\n       (* p : ('a, u, c) promise, where u and c are fresh types, i.e. the\n          invariants on p are unknown. *)\n\n     This cast is a no-op cast. It only produces a reference with a different\n     type. The introduction and immediate elimination of [Internal _] seems to\n     be optimized away even on older versions of OCaml that don't have Flambda\n     and don't support [[@@ocaml.unboxed]]. *)\n\n\n\n  (* Internal name of the public [+'a Lwt.result]. The public name is defined\n     later in the module. This is to avoid potential confusion with\n     [Pervasives.result]/[Result.result], as the public name would not be\n     prefixed with [Lwt.] inside this file. *)\n  type +'a lwt_result = ('a, exn) Result.result\n\n  (* This could probably save an allocation by using [Obj.magic]. *)\n  let state_of_result = function\n    | Result.Ok x -> Fulfilled x\n    | Result.Error exn -> Rejected exn\nend\ninclude Public_types\n\n\n\nmodule Basic_helpers :\nsig\n  val identical : ('a, _, _) promise -> ('a, _, _) promise -> bool\n  val underlying : ('a, 'u, 'c) promise -> ('a, underlying, 'c) promise\n\n  type ('a, 'u, 'c) state_changed =\n    | State_may_have_changed of ('a, 'u, 'c) promise\n    [@@ocaml.unboxed]\n  val set_promise_state :\n    ('a, _, _) promise -> ('a, 'u, 'c) state -> ('a, 'u, 'c) state_changed\n\n  type 'a may_now_be_proxy =\n    | State_may_now_be_pending_proxy :\n      ('a, _, pending) promise -> 'a may_now_be_proxy\n    [@@ocaml.unboxed]\n  val may_now_be_proxy :\n    ('a, underlying, pending) promise -> 'a may_now_be_proxy\nend =\nstruct\n  (* Checks physical equality ([==]) of two internal promises. Unlike [==], does\n     not force unification of their invariants. *)\n  let identical p1 p2 =\n    (to_public_promise p1) == (to_public_promise p2)\n\n  (* [underlying p] evaluates to the underlying promise of [p].\n\n     If multiple [Proxy _] links are traversed, [underlying] updates all the\n     proxies to point immediately to their final underlying promise. *)\n  let rec underlying\n      : 'u 'c. ('a, 'u, 'c) promise -> ('a, underlying, 'c) promise =\n    fun\n      (type u)\n      (type c)\n      (p : ('a, u, c) promise) ->\n\n    match p.state with\n    | Fulfilled _ -> (p : (_, underlying, _) promise)\n    | Rejected _ -> p\n    | Pending _ -> p\n    | Proxy p' ->\n      let p'' = underlying p' in\n      if not (identical p'' p') then\n        p.state <- Proxy p'';\n      p''\n\n\n\n  type ('a, 'u, 'c) state_changed =\n    | State_may_have_changed of ('a, 'u, 'c) promise\n    [@@ocaml.unboxed]\n\n  let set_promise_state p state =\n    let p : (_, _, _) promise = Obj.magic p in\n    p.state <- state;\n    State_may_have_changed p\n\n  (* [set_promise_state p state] mutates the state of [p], and evaluates to a\n     (wrapped) reference to [p] with the same invariants as on [state]. The\n     original reference [p] should be shadowed when calling this function:\n\n       let State_may_have_changed p = set_promise_state p (Fulfilled 42) in ...\n\n     This is a kind of cheap imitation of linear typing, which is good enough\n     for the needs of [lwt.ml].\n\n     Internal functions that transitively call [set_promise_state] likewise\n     return the new reference. This ends at some top-level function, typically\n     either a callback or a function in the public API. There, the new reference\n     is still bound, but is then explicitly ignored.\n\n     The state of a promise is never updated directly outside this module\n     [Basic_helpers]. All updates elsewhere are done through\n     [set_promise_state].\n\n     To avoid problems with type-level invariants not matching reality, data\n     structures do not store promises with concrete invariants -- except\n     resolved promises, which are immutable. Indeed, if one looks at\n     definitions of data structures that can store pending promises, e.g. the\n     [how_to_cancel] graph, the invariants are existentially quantified.\n\n     Note: it's possible to statically disallow the setting of the [state] field\n     by making type [promise] private. However, that seems to require writing a\n     signature that is a near-duplicate of [Main_internal_types], or some abuse\n     of functors. *)\n\n\n\n  type 'a may_now_be_proxy =\n    | State_may_now_be_pending_proxy :\n      ('a, _, pending) promise -> 'a may_now_be_proxy\n    [@@ocaml.unboxed]\n\n  let may_now_be_proxy p = State_may_now_be_pending_proxy p\n\n  (* Many functions, for example [Lwt.bind] and [Lwt.join], create a fresh\n     pending promise [p] and return it to the user.\n\n     They do not return a corresponding resolver. That means that only the\n     function itself (typically, a callback registered by it) can resolve [p].\n     The only thing the user can do directly is try to cancel [p], but, since\n     [p] is not an initial promise, the cancelation attempt simply propagates\n     past [p] to [p]'s predecessors. If that eventually results in canceling\n     [p], it will be through the normal mechanisms of the function (e.g.\n     [Lwt.bind]'s callback).\n\n     As a result, the only possible state change, before the callback, is that\n     [p] may have become a proxy. Now,\n\n     - If [p] does not undergo this state change and become a proxy, it remains\n       an underlying, pending promise.\n     - If [p] does become a proxy, it will be a proxy for another promise [p']\n       created fresh by [Lwt.bind], to which this same argument applies. See\n       [make_into_proxy].\n\n     So, by induction on the length of the proxy ([Proxy _]) chain, at the time\n     the callback is called, [p] is either an underlying, pending promise, or a\n     proxy for a pending promise.\n\n     The cast\n\n       let State_may_now_be_pending_proxy p = may_now_be_proxy p in ...\n\n     encodes the possibility of this state change. It replaces a reference\n\n       p : ('a, underlying, pending)\n\n     with\n\n       p : ('a, $Unknown, pending)\n\n     and is typically seen at the beginning of callbacks registered by\n     [Lwt.bind] and similar functions.\n\n     The cast is a no-op cast. The introduction and immediate elimination of\n     [State_may_have_changed _] seems to be optimized away even on old versions\n     of OCaml. *)\nend\nopen Basic_helpers\n\n\n\nmodule Sequence_associated_storage :\nsig\n  (* Public interface *)\n  type 'v key\n  val new_key : unit -> _ key\n  val get : 'v key -> 'v option\n  val with_value : 'v key -> 'v option -> (unit -> 'b) -> 'b\n\n  (* Internal interface *)\n  val current_storage : storage ref\nend =\nstruct\n  (* The idea behind sequence-associated storage is to preserve some values\n     during a call to [bind] or other sequential composition operation, and\n     restore those values in the callback function:\n\n       Lwt.with_value my_key (Some \"foo\") (fun () ->\n       p >|= fun () ->\n       assert (Lwt.get my_key = Some \"foo\"))\n         (* Will succeed even if this callback is called later. *)\n\n     Note that it does not matter that the callback is defined within an\n     argument of [with_value], i.e., this does the same:\n\n       let f = fun () -> assert (Lwt.get my_key = Some \"foo\") in\n       Lwt.with_value my_key (Some \"foo\") (fun () -> p >|= f)\n\n     All that matters is that the top-most sequencing operation (in this case,\n     map) is executed by that argument.\n\n     This is implemented using a single global heterogeneous key-value map.\n     Sequential composition functions snapshot this map when they are called,\n     and restore the snapshot right before calling the user's callback. The same\n     happens for cancel triggers added by [on_cancel].\n\n     Maintainer's note: I think using this mechanism should be discouraged in\n     new code. *)\n\n  type 'v key = {\n    id : int;\n    mutable value : 'v option;\n  }\n\n  let next_key_id = ref 0\n\n  let new_key () =\n    let id = !next_key_id in\n    next_key_id := id + 1;\n    {id = id; value = None}\n\n  let current_storage = ref Storage_map.empty\n\n  let get key =\n    try\n      let refresh = Storage_map.find key.id !current_storage in\n      refresh ();\n      let value = key.value in\n      key.value <- None;\n      value\n    with Not_found ->\n      None\n\n  let with_value key value f =\n    let new_storage =\n      match value with\n      | Some _ ->\n        let refresh = fun () -> key.value <- value in\n        Storage_map.add key.id refresh !current_storage\n      | None ->\n        Storage_map.remove key.id !current_storage\n    in\n\n    let saved_storage = !current_storage in\n    current_storage := new_storage;\n    try\n      let result = f () in\n      current_storage := saved_storage;\n      result\n    with exn ->\n      current_storage := saved_storage;\n      raise exn\nend\ninclude Sequence_associated_storage\n\n\n\nmodule Pending_callbacks :\nsig\n  (* Mutating callback lists attached to pending promises *)\n  val add_implicitly_removed_callback :\n    'a callbacks -> 'a regular_callback -> unit\n  val add_explicitly_removable_callback_to_each_of :\n    'a t list -> 'a regular_callback -> unit\n  val add_explicitly_removable_callback_and_give_remove_function :\n    'a t list -> 'a regular_callback -> (unit -> unit)\n  val add_cancel_callback : 'a callbacks -> (unit -> unit) -> unit\n  val merge_callbacks : from:'a callbacks -> into:'a callbacks -> unit\nend =\nstruct\n  let concat_regular_callbacks l1 l2 =\n    begin match l1, l2 with\n    | Regular_callback_list_empty, _ -> l2\n    | _, Regular_callback_list_empty -> l1\n    | _, _ -> Regular_callback_list_concat (l1, l2)\n    end [@ocaml.warning \"-4\"]\n\n  let concat_cancel_callbacks l1 l2 =\n    begin match l1, l2 with\n    | Cancel_callback_list_empty, _ -> l2\n    | _, Cancel_callback_list_empty -> l1\n    | _, _ -> Cancel_callback_list_concat (l1, l2)\n    end [@ocaml.warning \"-4\"]\n\n  (* In a callback list, filters out cells of explicitly removable callbacks\n     that have been removed. *)\n  let rec clean_up_callback_cells = function\n    | Regular_callback_list_explicitly_removable_callback {contents = None} ->\n      Regular_callback_list_empty\n\n    | Regular_callback_list_explicitly_removable_callback {contents = Some _}\n    | Regular_callback_list_implicitly_removed_callback _\n    | Regular_callback_list_empty as callbacks ->\n      callbacks\n\n    | Regular_callback_list_concat (l1, l2) ->\n      let l1 = clean_up_callback_cells l1 in\n      let l2 = clean_up_callback_cells l2 in\n      concat_regular_callbacks l1 l2\n\n  (* See [clear_explicitly_removable_callback_cell] and [merge_callbacks]. *)\n  let cleanup_throttle = 42\n\n  (* Explicitly removable callbacks are added (mainly) by [Lwt.choose] and its\n     similar functions. In [Lwt.choose [p; p']], if [p'] resolves first, the\n     callback added by [Lwt.choose] to [p] is removed.\n\n     The removal itself is accomplished when this function clears the reference\n     cell [cell], which contains the reference to that callback.\n\n     If [p] is a long-pending promise that repeatedly participates in\n     [Lwt.choose], perhaps in a loop, it will accumulate a large number of\n     cleared reference cells in this fashion. To avoid a memory leak, they must\n     be cleaned up. However, the cells are not cleaned up on *every* removal,\n     presumably because scanning the callback list that often, and rebuilding\n     it, can get expensive.\n\n     Cleanup is throttled by maintaining a counter, [cleanups_deferred], on each\n     pending promise. The counter is incremented each time this function wants\n     to clean the callback list (right after clearing a cell). When the counter\n     reaches [cleanup_throttle], the callback list is actually scanned and\n     cleared callback cells are removed. *)\n  let clear_explicitly_removable_callback_cell cell ~originally_added_to:ps =\n    cell := None;\n\n    (* Go through the promises the cell had originally been added to, and either\n       defer a cleanup, or actually clean up their callback lists. *)\n    ps |> List.iter (fun p ->\n      let Internal p = to_internal_promise p in\n      match (underlying p).state with\n      (* Some of the promises may already have been resolved at the time this\n         function is called. *)\n      | Fulfilled _ -> ()\n      | Rejected _ -> ()\n\n      | Pending callbacks ->\n        match callbacks.regular_callbacks with\n        (* If the promise has only one regular callback, and it is removable, it\n           must have been the cell cleared in this function, above. In that\n           case, just set its callback list to empty. *)\n        | Regular_callback_list_explicitly_removable_callback _ ->\n          callbacks.regular_callbacks <- Regular_callback_list_empty\n\n        (* Maintainer's note: I think this function shouldn't try to trigger a\n           cleanup in the first two cases, but I am preserving them for now, as\n           this is how the code was written in the past. *)\n        | Regular_callback_list_empty\n        | Regular_callback_list_implicitly_removed_callback _\n        | Regular_callback_list_concat _ ->\n          let cleanups_deferred = callbacks.cleanups_deferred + 1 in\n          if cleanups_deferred > cleanup_throttle then begin\n            callbacks.cleanups_deferred <- 0;\n            callbacks.regular_callbacks <-\n              clean_up_callback_cells callbacks.regular_callbacks\n          end else\n            callbacks.cleanups_deferred <- cleanups_deferred)\n\n  (* Concatenates both kinds of callbacks on [~from] to the corresponding lists\n     of [~into]. The callback lists on [~from] are *not* then cleared, because\n     this function is called only by [Sequential_composition.make_into_proxy],\n     which immediately changes the state of [~from] and loses references to the\n     original callback lists.\n\n     The [cleanups_deferred] fields of both promises are summed, and if the sum\n     exceeds [cleanup_throttle], a cleanup of regular callbacks is triggered.\n     This is to prevent memory leaks; see\n     [clear_explicitly_removable_callback_cell]. *)\n  let merge_callbacks ~from ~into =\n    let regular_callbacks =\n      concat_regular_callbacks into.regular_callbacks from.regular_callbacks in\n    let cleanups_deferred = into.cleanups_deferred + from.cleanups_deferred in\n\n    let regular_callbacks, cleanups_deferred =\n      if cleanups_deferred > cleanup_throttle then\n        clean_up_callback_cells regular_callbacks, 0\n      else\n        regular_callbacks, cleanups_deferred\n    in\n\n    let cancel_callbacks =\n      concat_cancel_callbacks into.cancel_callbacks from.cancel_callbacks in\n\n    into.regular_callbacks <- regular_callbacks;\n    into.cancel_callbacks <- cancel_callbacks;\n    into.cleanups_deferred <- cleanups_deferred\n\n\n\n  (* General, internal, function for adding a regular callback. *)\n  let add_regular_callback_list_node callbacks node =\n    callbacks.regular_callbacks <-\n      match callbacks.regular_callbacks with\n      | Regular_callback_list_empty ->\n        node\n      | Regular_callback_list_implicitly_removed_callback _\n      | Regular_callback_list_explicitly_removable_callback _\n      | Regular_callback_list_concat _ as existing ->\n        Regular_callback_list_concat (node, existing)\n\n  let add_implicitly_removed_callback callbacks f =\n    add_regular_callback_list_node\n      callbacks (Regular_callback_list_implicitly_removed_callback f)\n\n  (* Adds [callback] as removable to each promise in [ps]. The first promise in\n     [ps] to trigger [callback] removes [callback] from the other promises; this\n     guarantees that [callback] is called at most once. All the promises in [ps]\n     must be pending.\n\n     This is an internal function, indirectly used by the implementations of\n     [Lwt.choose] and related functions. *)\n  let add_explicitly_removable_callback_and_give_cell ps f =\n    let rec cell = ref (Some self_removing_callback_wrapper)\n    and self_removing_callback_wrapper result =\n      clear_explicitly_removable_callback_cell cell ~originally_added_to:ps;\n      f result\n    in\n\n    let node = Regular_callback_list_explicitly_removable_callback cell in\n    ps |> List.iter (fun p ->\n      let Internal p = to_internal_promise p in\n      match (underlying p).state with\n      | Pending callbacks -> add_regular_callback_list_node callbacks node\n      | Fulfilled _ -> assert false\n      | Rejected _ -> assert false);\n\n    cell\n\n  let add_explicitly_removable_callback_to_each_of ps f =\n    ignore (add_explicitly_removable_callback_and_give_cell ps f)\n\n  (* This is basically just to support [Lwt.protected], which needs to remove\n     the callback in circumstances other than the callback being called. *)\n  let add_explicitly_removable_callback_and_give_remove_function ps f =\n    let cell = add_explicitly_removable_callback_and_give_cell ps f in\n    fun () ->\n      clear_explicitly_removable_callback_cell cell ~originally_added_to:ps\n\n  let add_cancel_callback callbacks f =\n    (* Ugly cast :( *)\n    let cast_cancel_callback : (unit -> unit) -> cancel_callback = Obj.magic in\n    let f = cast_cancel_callback f in\n\n    let node = Cancel_callback_list_callback (!current_storage, f) in\n\n    callbacks.cancel_callbacks <-\n      match callbacks.cancel_callbacks with\n      | Cancel_callback_list_empty ->\n        node\n\n      | Cancel_callback_list_callback _\n      | Cancel_callback_list_remove_sequence_node _\n      | Cancel_callback_list_concat _ ->\n        Cancel_callback_list_concat (node, callbacks.cancel_callbacks)\nend\nopen Pending_callbacks\n\n\n\nmodule Resolution_loop :\nsig\n  (* All user-provided callbacks are called by Lwt only through this module. It\n     tracks the current callback stack depth, and decides whether each callback\n     call should be deferred or not. *)\n\n  (* Internal interface used only in this module Lwt *)\n  val resolve :\n    ?allow_deferring:bool ->\n    ?maximum_callback_nesting_depth:int ->\n    ('a, underlying, pending) promise ->\n    'a resolved_state ->\n      ('a, underlying, resolved) state_changed\n\n  val run_callbacks_or_defer_them :\n    ?allow_deferring:bool ->\n    ?maximum_callback_nesting_depth:int ->\n    ('a callbacks) ->\n    'a resolved_state ->\n      unit\n\n  val run_callback_or_defer_it :\n    ?run_immediately_and_ensure_tail_call:bool ->\n    callback:(unit -> 'a) ->\n    if_deferred:(unit -> 'a * 'b regular_callback * 'b resolved_state) ->\n      'a\n\n  val handle_with_async_exception_hook : ('a -> unit) -> 'a -> unit\n\n  (* Internal interface exposed to other modules in Lwt *)\n  val abandon_wakeups : unit -> unit\n\n  (* Public interface *)\n  exception Canceled\n\n  val async_exception_hook : (exn -> unit) ref\nend =\nstruct\n  (* When Lwt needs to call a callback, it enters the resolution loop. This\n     typically happens when Lwt sets the state of one promise to [Fulfilled _]\n     or [Rejected _]. The callbacks that were attached to the promise when it\n     was pending must then be called.\n\n     This also happens in a few other situations. For example, when [Lwt.bind]\n     is called on a promise, but that promise is already resolved, the callback\n     passed to [bind] must be called.\n\n     The callbacks triggered during the resolution loop might resolve more\n     promises, triggering more callbacks, and so on. This is what makes the\n     resolution loop a {e loop}.\n\n     Lwt generally tries to call each callback immediately. However, this can\n     lead to a progressive deepening of the call stack, until there is a stack\n     overflow. This can't be avoided by doing tail calls, because Lwt always\n     needs to do exception handling around callbacks calls: each callback call\n     is followed by an exception handler. Instead, what Lwt does is track the\n     current callback call depth. Once that depth reaches a certain number,\n     [default_maximum_callback_nesting_depth], defined below, further callbacks\n     are deferred into a queue instead. That queue is drained when Lwt exits\n     from the top-most callback call that triggered the resolution loop in the\n     first place.\n\n     To ensure that this deferral mechanism is always properly invoked, all\n     callbacks called by Lwt are called through one of three functions provided\n     by this module:\n\n     - [resolve], which calls all the callbacks associated to a pending promise\n       (and resolves it, changing its state).\n     - [run_callbacks_or_defer_them], which is internally used by [resolve] to\n       call callbacks that are in a record of type ['a callbacks], which records\n       are associated with pending promises. This function is exposed because\n       the current implementation of [Lwt.cancel] needs to call it directly.\n       Promise resolution and callback calling are separated in a unique way in\n       [cancel].\n     - [run_callback_or_defer_it], which is used by [Lwt.bind] and similar\n       functions to call single callbacks when the promises passed to\n       [Lwt.bind], etc., are already resolved.\n\n     Current Lwt actually has a messy mix of callback-calling behaviors. For\n     example, [Lwt.bind] is expected to always call its callback immediately,\n     while [Lwt.wakeup_later] is expected to defer all callbacks of the promise\n     resolved, {e unless} Lwt is not already inside the resolution loop.\n\n     These behaviors will be made uniform in Lwt 4.0.0. However, in the\n     meantime, the above callback-invoking functions support several optional\n     arguments to emulate the behaviors:\n\n     - [~allow_deferring:false] allows ignoring the callback stack depth, and\n       calling the callbacks immediately. This emulates the old resolution\n       behavior.\n     - [~maximum_callback_nesting_depth:1] allows limiting the depth which\n       triggers deferral on a per-call-site basis. This is used by\n       [Lwt.wakeup_later].\n     - [~run_immediately_and_ensure_tail_call:true] is like\n       [~allow_deferring:false], which ignores the callback stack depth.\n       However, to ensure that the callback is tail-called, Lwt doesn't even\n       update the callback stack depth for the benefit of *other* callback\n       calls. It just blindly calls the callback.\n\n     It should be possible to eliminate these optional arguments in Lwt 4.0.0,\n     or restrict their usage to only deprecated APIs.\n\n     See discussion of callback-calling semantics in:\n\n       https://github.com/ocsigen/lwt/issues/329\n\n     * Context\n\n     The resolution loop effectively handles all promises that can be resolved\n     immediately, without blocking on I/O. A complete program that does I/O\n     calls [Lwt_main.run]. See \"No I/O\" in the Overview. *)\n\n\n\n  let async_exception_hook =\n    ref (fun exn ->\n      prerr_string \"Fatal error: exception \";\n      prerr_string (Printexc.to_string exn);\n      prerr_char '\\n';\n      Printexc.print_backtrace stderr;\n      flush stderr;\n      exit 2)\n\n  let handle_with_async_exception_hook f v =\n    (* Note that this function does not care if [f] evaluates to a promise. In\n       particular, if [f v] evaluates to [p] and [p] is already rejected or will\n       be reject later, it is not the responsibility of this function to pass\n       the exception to [!async_exception_hook]. *)\n    try f v\n    with exn -> !async_exception_hook exn\n\n\n\n  exception Canceled\n\n\n\n  (* Runs the callbacks (formerly) associated to a promise. Cancel callbacks are\n     run first, if the promise was canceled. These are followed by regular\n     callbacks.\n\n     The reason for the \"formerly\" is that the promise's state has already been\n     set to [Fulfilled _] or [Rejected _], so the callbacks are no longer\n     reachable through the promise reference. This is why the direct [callbacks]\n     record must be given to this function. *)\n  let run_callbacks\n      (callbacks : 'a callbacks)\n      (result : 'a resolved_state) : unit =\n\n    let run_cancel_callbacks fs =\n      let rec iter_callback_list fs rest =\n        match fs with\n        | Cancel_callback_list_empty ->\n          iter_list rest\n        | Cancel_callback_list_callback (storage, f) ->\n          current_storage := storage;\n          handle_with_async_exception_hook f ();\n          iter_list rest\n        | Cancel_callback_list_remove_sequence_node node ->\n          Lwt_sequence.remove node;\n          iter_list rest\n        | Cancel_callback_list_concat (fs, fs') ->\n          iter_callback_list fs (fs'::rest)\n\n      and iter_list rest =\n        match rest with\n        | [] -> ()\n        | fs::rest -> iter_callback_list fs rest\n\n      in\n\n      iter_callback_list fs []\n    in\n\n    let run_regular_callbacks fs =\n      let rec iter_callback_list fs rest =\n        match fs with\n        | Regular_callback_list_empty ->\n          iter_list rest\n        | Regular_callback_list_implicitly_removed_callback f ->\n          f result;\n          iter_list rest\n        | Regular_callback_list_explicitly_removable_callback\n            {contents = None} ->\n          iter_list rest\n        | Regular_callback_list_explicitly_removable_callback\n            {contents = Some f} ->\n          f result;\n          iter_list rest\n        | Regular_callback_list_concat (fs, fs') ->\n          iter_callback_list fs (fs'::rest)\n\n      and iter_list rest =\n        match rest with\n        | [] -> ()\n        | fs::rest -> iter_callback_list fs rest\n\n      in\n\n      iter_callback_list fs []\n    in\n\n    (* Pattern matching is much faster than polymorphic comparison. *)\n    let is_canceled =\n      match result with\n      | Rejected Canceled -> true\n      | Rejected _ -> false\n      | Fulfilled _ -> false\n    in\n    if is_canceled then\n      run_cancel_callbacks callbacks.cancel_callbacks;\n    run_regular_callbacks callbacks.regular_callbacks\n\n\n\n  let default_maximum_callback_nesting_depth = 42\n\n  let current_callback_nesting_depth = ref 0\n\n  type deferred_callbacks =\n    Deferred : ('a callbacks * 'a resolved_state) -> deferred_callbacks\n    [@@ocaml.unboxed]\n\n  let deferred_callbacks : deferred_callbacks Queue.t = Queue.create ()\n\n  (* Before entering a resolution loop, it is necessary to take a snapshot of\n     the current state of sequence-associated storage. This is because many of\n     the callbacks that will be run will modify the storage. The storage is\n     restored to the snapshot when the resolution loop is exited. *)\n  let enter_resolution_loop () =\n    current_callback_nesting_depth := !current_callback_nesting_depth + 1;\n    let storage_snapshot = !current_storage in\n    storage_snapshot\n\n  let leave_resolution_loop (storage_snapshot : storage) : unit =\n    if !current_callback_nesting_depth = 1 then begin\n      while not (Queue.is_empty deferred_callbacks) do\n        let Deferred (callbacks, result) = Queue.pop deferred_callbacks in\n        run_callbacks callbacks result\n      done\n    end;\n    current_callback_nesting_depth := !current_callback_nesting_depth - 1;\n    current_storage := storage_snapshot\n\n  let run_in_resolution_loop f =\n    let storage_snapshot = enter_resolution_loop () in\n    let result = f () in\n    leave_resolution_loop storage_snapshot;\n    result\n\n  (* This is basically a hack to fix https://github.com/ocsigen/lwt/issues/48.\n     If currently resolving promises, it immediately exits all recursive\n     entries of the resolution loop, goes to the top level, runs any deferred\n     callbacks, and exits the top-level resolution loop.\n\n     The name should probably be [abaondon_resolution_loop]. *)\n  let abandon_wakeups () =\n    if !current_callback_nesting_depth <> 0 then\n      leave_resolution_loop Storage_map.empty\n\n\n\n  let run_callbacks_or_defer_them\n      ?(allow_deferring = true)\n      ?(maximum_callback_nesting_depth = default_maximum_callback_nesting_depth)\n      callbacks result =\n\n    let should_defer =\n      allow_deferring\n      && !current_callback_nesting_depth >= maximum_callback_nesting_depth\n    in\n\n    if should_defer then\n      Queue.push (Deferred (callbacks, result)) deferred_callbacks\n    else\n      run_in_resolution_loop (fun () ->\n        run_callbacks callbacks result)\n\n  let resolve ?allow_deferring ?maximum_callback_nesting_depth p result =\n    let Pending callbacks = p.state in\n    let p = set_promise_state p result in\n\n    run_callbacks_or_defer_them\n      ?allow_deferring ?maximum_callback_nesting_depth callbacks result;\n\n    p\n\n  let run_callback_or_defer_it\n      ?(run_immediately_and_ensure_tail_call = false)\n      ~callback:f\n      ~if_deferred =\n\n    if run_immediately_and_ensure_tail_call then\n      f ()\n\n    else\n      let should_defer =\n        !current_callback_nesting_depth\n          >= default_maximum_callback_nesting_depth\n      in\n\n      if should_defer then begin\n        let immediate_result, deferred_callback, deferred_result =\n          if_deferred () in\n        let deferred_record =\n          {\n            regular_callbacks =\n              Regular_callback_list_implicitly_removed_callback\n                deferred_callback;\n            cancel_callbacks = Cancel_callback_list_empty;\n            how_to_cancel = Not_cancelable;\n            cleanups_deferred = 0\n          }\n        in\n        Queue.push\n          (Deferred (deferred_record, deferred_result)) deferred_callbacks;\n        immediate_result\n      end\n      else\n        run_in_resolution_loop (fun () ->\n          f ())\nend\ninclude Resolution_loop\n\n\n\nmodule Resolving :\nsig\n  val wakeup_later_result : 'a u -> 'a lwt_result -> unit\n  val wakeup_later : 'a u -> 'a -> unit\n  val wakeup_later_exn : _ u -> exn -> unit\n\n  val wakeup_result : 'a u -> 'a lwt_result -> unit\n  val wakeup : 'a u -> 'a -> unit\n  val wakeup_exn : _ u -> exn -> unit\n\n  val cancel : 'a t -> unit\nend =\nstruct\n  (* Note that this function deviates from the \"ideal\" callback deferral\n     behavior: it runs callbacks directly on the current stack. It should\n     therefore be possible to cause a stack overflow using this function. *)\n  let wakeup_general api_function_name r result =\n    let Internal p = to_internal_resolver r in\n    let p = underlying p in\n\n    match p.state with\n    | Rejected Canceled ->\n      ()\n    | Fulfilled _ ->\n      Printf.ksprintf invalid_arg \"Lwt.%s\" api_function_name\n    | Rejected _ ->\n      Printf.ksprintf invalid_arg \"Lwt.%s\" api_function_name\n\n    | Pending _ ->\n      let result = state_of_result result in\n      let State_may_have_changed p = resolve ~allow_deferring:false p result in\n      ignore p\n\n  let wakeup_result r result = wakeup_general \"wakeup_result\" r result\n  let wakeup r v = wakeup_general \"wakeup\" r (Result.Ok v)\n  let wakeup_exn r exn = wakeup_general \"wakeup_exn\" r (Result.Error exn)\n\n  let wakeup_later_general api_function_name r result =\n    let Internal p = to_internal_resolver r in\n    let p = underlying p in\n\n    match p.state with\n    | Rejected Canceled ->\n      ()\n    | Fulfilled _ ->\n      Printf.ksprintf invalid_arg \"Lwt.%s\" api_function_name\n    | Rejected _ ->\n      Printf.ksprintf invalid_arg \"Lwt.%s\" api_function_name\n\n    | Pending _ ->\n      let result = state_of_result result in\n      let State_may_have_changed p =\n        resolve ~maximum_callback_nesting_depth:1 p result in\n      ignore p\n\n  let wakeup_later_result r result =\n    wakeup_later_general \"wakeup_later_result\" r result\n  let wakeup_later r v =\n    wakeup_later_general \"wakeup_later\" r (Result.Ok v)\n  let wakeup_later_exn r exn =\n    wakeup_later_general \"wakeup_later_exn\" r (Result.Error exn)\n\n\n\n  type packed_callbacks =\n    | Packed : _ callbacks -> packed_callbacks\n    [@@ocaml.unboxed]\n\n  (* Note that this function deviates from the \"ideal\" callback deferral\n     behavior: it runs callbacks directly on the current stack. It should\n     therefore be possible to cause a stack overflow using this function. *)\n  let cancel p =\n    let canceled_result = Rejected Canceled in\n\n    (* Walks the promise dependency graph backwards, looking for cancelable\n       initial promises, and cancels (only) them.\n\n       Found initial promises are canceled immediately, as they are found, by\n       setting their state to [Rejected Canceled]. This is to prevent them from\n       being \"found twice\" if they are reachable by two or more distinct paths\n       through the promise dependency graph.\n\n       The callbacks of these initial promises are then run, in a separate\n       phase. These callbacks propagate cancelation forwards to any dependent\n       promises. See \"Cancelation\" in the Overview. *)\n    let propagate_cancel : (_, _, _) promise -> packed_callbacks list =\n        fun p ->\n      let rec cancel_and_collect_callbacks :\n          'a 'u 'c. packed_callbacks list -> ('a, 'u, 'c) promise ->\n            packed_callbacks list =\n          fun (type c) callbacks_accumulator (p : (_, _, c) promise) ->\n\n        let p = underlying p in\n        match p.state with\n        (* If the promise is not still pending, it can't be canceled. *)\n        | Fulfilled _ ->\n          callbacks_accumulator\n        | Rejected _ ->\n          callbacks_accumulator\n\n        | Pending callbacks ->\n          match callbacks.how_to_cancel with\n          | Not_cancelable ->\n            callbacks_accumulator\n          | Cancel_this_promise ->\n            let State_may_have_changed p =\n              set_promise_state p canceled_result in\n            ignore p;\n            (Packed callbacks)::callbacks_accumulator\n          | Propagate_cancel_to_one p' ->\n            cancel_and_collect_callbacks callbacks_accumulator p'\n          | Propagate_cancel_to_several ps ->\n            List.fold_left cancel_and_collect_callbacks callbacks_accumulator ps\n      in\n      cancel_and_collect_callbacks [] p\n    in\n\n    let Internal p = to_internal_promise p in\n    let callbacks = propagate_cancel p in\n\n    callbacks |> List.iter (fun (Packed callbacks) ->\n      run_callbacks_or_defer_them\n        ~allow_deferring:false callbacks canceled_result)\nend\ninclude Resolving\n\n\n\nmodule Trivial_promises :\nsig\n  val return : 'a -> 'a t\n  val fail : exn -> _ t\n  val of_result : 'a lwt_result -> 'a t\n\n  val return_unit : unit t\n  val return_true : bool t\n  val return_false : bool t\n  val return_none : _ option t\n  val return_some : 'a -> 'a option t\n  val return_ok : 'a -> ('a, _) Result.result t\n  val return_error : 'e -> (_, 'e) Result.result t\n  val return_nil : _ list t\n\n  val fail_with : string -> _ t\n  val fail_invalid_arg : string -> _ t\nend =\nstruct\n  let return v =\n    to_public_promise {state = Fulfilled v}\n\n  let of_result result =\n    to_public_promise {state = state_of_result result}\n\n  let fail exn =\n    to_public_promise {state = Rejected exn}\n\n  let return_unit = return ()\n  let return_none = return None\n  let return_some x = return (Some x)\n  let return_nil = return []\n  let return_true = return true\n  let return_false = return false\n  let return_ok x = return (Result.Ok x)\n  let return_error x = return (Result.Error x)\n\n  let fail_with msg =\n    to_public_promise {state = Rejected (Failure msg)}\n\n  let fail_invalid_arg msg =\n    to_public_promise {state = Rejected (Invalid_argument msg)}\nend\ninclude Trivial_promises\n\n\n\nmodule Pending_promises :\nsig\n  (* Internal *)\n  val new_pending :\n    how_to_cancel:how_to_cancel -> ('a, underlying, pending) promise\n  val propagate_cancel_to_several : _ t list -> how_to_cancel\n\n  (* Initial pending promises (public) *)\n  val wait : unit -> 'a t * 'a u\n  val task : unit -> 'a t * 'a u\n\n  val waiter_of_wakener : 'a u -> 'a t\n\n  val add_task_r : 'a u Lwt_sequence.t -> 'a t\n  val add_task_l : 'a u Lwt_sequence.t -> 'a t\n\n  val protected : 'a t -> 'a t\n  val no_cancel : 'a t -> 'a t\nend =\nstruct\n  let new_pending ~how_to_cancel =\n    let state =\n      Pending {\n        regular_callbacks = Regular_callback_list_empty;\n        cancel_callbacks = Cancel_callback_list_empty;\n        how_to_cancel;\n        cleanups_deferred = 0;\n      }\n    in\n    {state}\n\n  let propagate_cancel_to_several ps =\n    (* Using a dirty cast here to avoid rebuilding the list :( Not bothering\n       with the invariants, because [Propagate_cancel_to_several] packs them,\n       and code that matches on [Propagate_cancel_to_several] doesn't care about\n       them anyway. *)\n    let cast_promise_list : 'a t list -> ('a, _, _) promise list = Obj.magic in\n    Propagate_cancel_to_several (cast_promise_list ps)\n\n\n\n  let wait () =\n    let p = new_pending ~how_to_cancel:Not_cancelable in\n    to_public_promise p, to_public_resolver p\n\n  let task () =\n    let p = new_pending ~how_to_cancel:Cancel_this_promise in\n    to_public_promise p, to_public_resolver p\n\n\n\n  let waiter_of_wakener r =\n    let Internal r = to_internal_resolver r in\n    let p = r in\n    to_public_promise p\n\n\n\n  let cast_sequence_node\n      (node : 'a u Lwt_sequence.node)\n      (_actual_content:('a, 'u, 'c) promise)\n        : ('a, 'u, 'c) promise Lwt_sequence.node =\n    Obj.magic node\n\n  let add_task_r sequence =\n    let p = new_pending ~how_to_cancel:Cancel_this_promise in\n    let node = Lwt_sequence.add_r (to_public_resolver p) sequence in\n    let node = cast_sequence_node node p in\n\n    let Pending callbacks = p.state in\n    callbacks.cancel_callbacks <-\n      Cancel_callback_list_remove_sequence_node node;\n\n    to_public_promise p\n\n  let add_task_l sequence =\n    let p = new_pending ~how_to_cancel:Cancel_this_promise in\n    let node = Lwt_sequence.add_l (to_public_resolver p) sequence in\n    let node = cast_sequence_node node p in\n\n    let Pending callbacks = p.state in\n    callbacks.cancel_callbacks <-\n      Cancel_callback_list_remove_sequence_node node;\n\n    to_public_promise p\n\n\n\n  let protected p =\n    let Internal p_internal = to_internal_promise p in\n    match (underlying p_internal).state with\n    | Fulfilled _ -> p\n    | Rejected _ -> p\n\n    | Pending _ ->\n      let p' = new_pending ~how_to_cancel:Cancel_this_promise in\n\n      let callback p_result =\n        let State_may_now_be_pending_proxy p' = may_now_be_proxy p' in\n        let p' = underlying p' in\n        (* In this callback, [p'] will either still itself be pending, or it\n           will have become a proxy for a pending promise. The reasoning for\n           this is almost the same as in the comment at [may_now_be_proxy]. The\n           differences are:\n\n           - [p'] *is* an initial promise, so it *can* get canceled. However, if\n             it does, the [on_cancel] handler installed below will remove this\n             callback.\n           - [p'] never gets passed to [make_into_proxy], the only effect of\n             which is that it cannot be the underlying promise of another\n             (proxy) promise. So, [p'] can only appear at the head of a chain of\n             [Proxy _] links, and it's not necessary to worry about whether the\n             inductive reasoning at [may_now_be_proxy] applies. *)\n\n        let State_may_have_changed p' =\n          resolve ~allow_deferring:false p' p_result in\n        ignore p'\n      in\n\n      let remove_the_callback =\n        add_explicitly_removable_callback_and_give_remove_function\n          [p] callback\n      in\n\n      let Pending p'_callbacks = p'.state in\n      add_cancel_callback p'_callbacks remove_the_callback;\n\n      to_public_promise p'\n\n  let no_cancel p =\n    let Internal p_internal = to_internal_promise p in\n    match (underlying p_internal).state with\n    | Fulfilled _ -> p\n    | Rejected _ -> p\n\n    | Pending p_callbacks ->\n      let p' = new_pending ~how_to_cancel:Not_cancelable in\n\n      let callback p_result =\n        let State_may_now_be_pending_proxy p' = may_now_be_proxy p' in\n        let p' = underlying p' in\n        (* In this callback, [p'] will either still itself be pending, or it\n           will have become a proxy for a pending promise. The reasoning for\n           this is as in [protected] and [may_now_be_proxy], but even simpler,\n           because [p'] is not cancelable. *)\n\n        let State_may_have_changed p' =\n          resolve ~allow_deferring:false p' p_result in\n        ignore p'\n      in\n      add_implicitly_removed_callback p_callbacks callback;\n\n      to_public_promise p'\nend\ninclude Pending_promises\n\n\n\nmodule Sequential_composition :\nsig\n  (* Main interface (public) *)\n  val bind : 'a t -> ('a -> 'b t) -> 'b t\n  val map : ('a -> 'b) -> 'a t -> 'b t\n  val catch : (unit -> 'a t) -> (exn -> 'a t) -> 'a t\n  val finalize : (unit -> 'a t) -> (unit -> unit t) -> 'a t\n  val try_bind : (unit -> 'a t) -> ('a -> 'b t) -> (exn -> 'b t) -> 'b t\n\n  (* Cancel callbacks (public). *)\n  val on_cancel : 'a t -> (unit -> unit) -> unit\n\n  (* Non-promise callbacks (public) *)\n  val on_success : 'a t -> ('a -> unit) -> unit\n  val on_failure : _ t -> (exn -> unit) -> unit\n  val on_termination : _ t -> (unit -> unit) -> unit\n  val on_any : 'a t -> ('a -> unit) -> (exn -> unit) -> unit\n\n  (* Backtrace support (internal; for use by the PPX) *)\n  val backtrace_bind :\n    (exn -> exn) -> 'a t -> ('a -> 'b t) -> 'b t\n  val backtrace_catch :\n    (exn -> exn) -> (unit -> 'a t) -> (exn -> 'a t) -> 'a t\n  val backtrace_finalize :\n    (exn -> exn) -> (unit -> 'a t) -> (unit -> unit t) -> 'a t\n  val backtrace_try_bind :\n    (exn -> exn) -> (unit -> 'a t) -> ('a -> 'b t) -> (exn -> 'b t) -> 'b t\nend =\nstruct\n  (* There are five primary sequential composition functions: [bind], [map],\n     [catch], [finalize], and [try_bind]. Of these, [try_bind] is the most\n     general -- all the others can be implemented in terms of it.\n\n     Lwt conflates concurrency with error propagation. If Lwt did not do this,\n     there would be only two primary functions: [bind] and [map], and, of these\n     two, [bind] is the most general. Since [bind] is the most relevant\n     specifically to concurrency, and is also the most familiar function in Lwt,\n     its implementation serves as a kind of \"model\" for the rest. It is the most\n     commented, and all the other functions follow a similar pattern to [bind].\n\n     Four of the primary functions have [backtrace_*] versions, which are not\n     truly public, and exist to support the PPX. [backtrace_map] does not exist\n     because the PPX does not need it.\n\n     The remaining four functions in this section attach \"lower-level-ish\"\n     non-promise-producing callbacks to promises: these are the [on_*]\n     functions. Of these, [on_any] is the most general. If Lwt did not conflate\n     concurrency with error handling, there would only be one: [on_success]. *)\n\n\n\n  (* Makes [~user_provided_promise] into a proxy of [~outer_promise]. After\n     [make_into_proxy], these two promise references \"behave identically.\"\n\n     Note that this is not symmetric: [user_provided_promise] always becomes the\n     proxy. [make_into_proxy] is called only by [bind] and similar functions in\n     this module. This means that:\n\n     - the only way for a promise to become a proxy is by being returned from\n       the callback given by the user to [bind], or a similar function, and\n     - the only way for a promise to become underlying for a promise other than\n       itself is to be the outer promise originally returned to the user from\n       [bind], or a similar function.\n\n     These two facts are important for reasoning about how and which promises\n     can become proxies, underlying, etc.; in particular, it is used in the\n     argument in [may_now_be_proxy] for correct predictions about state changes.\n\n     [~outer_promise] is always a pending promise when [make_into_proxy] is\n     called; for the explanation, see [may_now_be_proxy] (though the caller of\n     [make_into_proxy] always calls [underlying] first to pass the underlying\n     pending promise to [make_into_proxy]).\n\n     The reasons proxying is used, instead of adding a callback to\n     [~user_provided_promise] to resolve [~outer_promise] when the former\n     becomes resolved probably are:\n\n     - Promises have more behaviors than resolution. One would have to add a\n       cancelation handler to [~outer_promise] to propagate the cancelation back\n       to [~user_provided_promise], for example. It may be easier to just think\n       of them as the same promise.\n     - If using callbacks, resolving [~user_provided_promise] would not\n       immediately resolve [~outer_promise]. Another callback added to\n       [~user_provided_promise] might see [~user_provided_promise] resolved,\n       but [~outer_promise] still pending, depending on the order in which\n       callbacks are run. *)\n  let make_into_proxy\n      (type c)\n      ~(outer_promise : ('a, underlying, pending) promise)\n      ~(user_provided_promise : ('a, _, c) promise)\n        : ('a, underlying, c) state_changed =\n\n    (* Using [p'] as it's the name used inside [bind], etc., for promises with\n       this role -- [p'] is the promise returned by the user's function. *)\n    let p' = underlying user_provided_promise in\n\n    if identical p' outer_promise then\n      State_may_have_changed p'\n      (* We really want to return [State_may_have_changed outer_promise], but\n         the reference through [p'] has the right type. *)\n\n    else\n      match p'.state with\n      | Fulfilled _ ->\n        resolve ~allow_deferring:false outer_promise p'.state\n      | Rejected _ ->\n        resolve ~allow_deferring:false outer_promise p'.state\n\n      | Pending p'_callbacks ->\n        let Pending outer_callbacks = outer_promise.state in\n\n        merge_callbacks ~from:p'_callbacks ~into:outer_callbacks;\n        outer_callbacks.how_to_cancel <- p'_callbacks.how_to_cancel;\n\n        let State_may_have_changed p' =\n          set_promise_state p' (Proxy outer_promise) in\n        ignore p';\n\n        State_may_have_changed outer_promise\n        (* The state hasn't actually changed, but we still have to wrap\n           [outer_promise] for type checking. *)\n\n        (* The state of [p'] may instead have changed -- it may have become a\n           proxy. However, callers of [make_into_proxy] don't know if\n           [user_provided_promise] was a proxy or not (that's why we call\n           underlying on it at the top of this function, to get [p']). We can\n           therefore take a dangerous shortcut and not bother returning a new\n           reference to [user_provided_promise] for shadowing. *)\n\n\n\n  (* Maintainer's note: a lot of the code below can probably be deduplicated in\n     some way, especially if assuming Flambda. *)\n\n  let bind p f =\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    (* In case [Lwt.bind] needs to defer the call to [f], this function will be\n       called to create:\n\n       1. The promise, [p''], that must be returned to the caller immediately.\n       2. The callback that resolves [p''].\n\n       [Lwt.bind] defers the call to [f] in two circumstances:\n\n       1. The promise [p] is pending.\n       2. The promise [p] is fulfilled, but the current callback call nesting\n          depth is such that the call to [f] must go into the callback queue, in\n          order to avoid stack overflow.\n\n      Mechanism (2) is currently disabled, to emulate pre-3.2.0 Lwt semantics.\n      It will be enabled in Lwt 4.0.0.\n\n      Functions other than [Lwt.bind] have analogous deferral behavior. For\n      example, in Lwt 4.0.0, [Lwt.catch] will defer the call to its callback [h]\n      if either the promise [f ()] is pending, or if that promise is rejected,\n      but the callback nesting depth is too high to safely call [h]\n      immediately. *)\n    let create_result_promise_and_callback_if_deferred () =\n      let p'' = new_pending ~how_to_cancel:(Propagate_cancel_to_one p) in\n      (* The result promise is a fresh pending promise.\n\n         Initially, trying to cancel this fresh pending promise [p''] will\n         propagate the cancelation attempt to [p] (backwards through the promise\n         dependency graph). If/when [p] is fulfilled, Lwt will call the user's\n         callback [f] below, which will provide a new promise [p'], and [p']\n         will become a proxy of [p'']. At that point, trying to cancel [p'']\n         will be equivalent to trying to cancel [p'], so the behavior will\n         depend on how the user obtained [p']. *)\n\n      let saved_storage = !current_storage in\n\n      let callback p_result =\n        match p_result with\n        | Fulfilled v ->\n          current_storage := saved_storage;\n\n          let p' = try f v with exn -> fail exn in\n          let Internal p' = to_internal_promise p' in\n          (* Run the user's function [f]. *)\n\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n          (* [p''] was an underlying promise when it was created above, but it\n             may have become a proxy by the time this code is being executed.\n             However, it is still either an underlying pending promise, or a\n             proxy for a pending promise. Therefore, [may_now_be_proxy] produces\n             a reference with the right type variables. We immediately get\n             [p'']'s current underlying promise. *)\n\n          let State_may_have_changed p'' =\n            make_into_proxy ~outer_promise:p'' ~user_provided_promise:p' in\n          ignore p''\n          (* Make the outer promise [p''] behaviorally identical to the promise\n             [p'] returned by [f] by making [p'] into a proxy of [p'']. *)\n\n        | Rejected _ as p_result ->\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            resolve ~allow_deferring:false p'' p_result in\n          ignore p''\n      in\n\n      (to_public_promise p'', callback)\n    in\n\n    match p.state with\n    | Fulfilled v ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> f v)\n        ~if_deferred:(fun () ->\n          let (p'', callback) =\n            create_result_promise_and_callback_if_deferred () in\n          (p'', callback, p.state))\n\n    | Rejected _ as result ->\n      to_public_promise {state = result}\n\n    | Pending p_callbacks ->\n      let (p'', callback) = create_result_promise_and_callback_if_deferred () in\n      add_implicitly_removed_callback p_callbacks callback;\n      p''\n\n  let backtrace_bind add_loc p f =\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    let create_result_promise_and_callback_if_deferred () =\n      let p'' = new_pending ~how_to_cancel:(Propagate_cancel_to_one p) in\n\n      let saved_storage = !current_storage in\n\n      let callback p_result =\n        match p_result with\n        | Fulfilled v ->\n          current_storage := saved_storage;\n\n          let p' = try f v with exn -> fail (add_loc exn) in\n          let Internal p' = to_internal_promise p' in\n\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            make_into_proxy ~outer_promise:p'' ~user_provided_promise:p' in\n          ignore p''\n\n        | Rejected exn ->\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            resolve ~allow_deferring:false p'' (Rejected (add_loc exn)) in\n          ignore p''\n      in\n\n      (to_public_promise p'', callback)\n    in\n\n    match p.state with\n    | Fulfilled v ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> f v)\n        ~if_deferred:(fun () ->\n          let (p'', callback) =\n            create_result_promise_and_callback_if_deferred () in\n          (p'', callback, p.state))\n\n    | Rejected exn ->\n      to_public_promise {state = Rejected (add_loc exn)}\n\n    | Pending p_callbacks ->\n      let (p'', callback) = create_result_promise_and_callback_if_deferred () in\n      add_implicitly_removed_callback p_callbacks callback;\n      p''\n\n  let map f p =\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    let create_result_promise_and_callback_if_deferred () =\n      let p'' = new_pending ~how_to_cancel:(Propagate_cancel_to_one p) in\n\n      let saved_storage = !current_storage in\n\n      let callback p_result =\n        match p_result with\n        | Fulfilled v ->\n          current_storage := saved_storage;\n\n          let p''_result = try Fulfilled (f v) with exn -> Rejected exn in\n\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            resolve ~allow_deferring:false p'' p''_result in\n          ignore p''\n\n        | Rejected _ as p_result ->\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            resolve ~allow_deferring:false p'' p_result in\n          ignore p''\n      in\n\n      (to_public_promise p'', callback)\n    in\n\n    match p.state with\n    | Fulfilled v ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () ->\n          to_public_promise\n            {state = try Fulfilled (f v) with exn -> Rejected exn})\n        ~if_deferred:(fun () ->\n          let (p'', callback) =\n            create_result_promise_and_callback_if_deferred () in\n          (p'', callback, p.state))\n\n    | Rejected _ as result ->\n      to_public_promise {state = result}\n\n    | Pending p_callbacks ->\n      let (p'', callback) = create_result_promise_and_callback_if_deferred () in\n      add_implicitly_removed_callback p_callbacks callback;\n      p''\n\n  let catch f h =\n    let p = try f () with exn -> fail exn in\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    let create_result_promise_and_callback_if_deferred () =\n      let p'' = new_pending ~how_to_cancel:(Propagate_cancel_to_one p) in\n\n      let saved_storage = !current_storage in\n\n      let callback p_result =\n        match p_result with\n        | Fulfilled _ as p_result ->\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            resolve ~allow_deferring:false p'' p_result in\n          ignore p''\n\n        | Rejected exn ->\n          current_storage := saved_storage;\n\n          let p' = try h exn with exn -> fail exn in\n          let Internal p' = to_internal_promise p' in\n\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            make_into_proxy ~outer_promise:p'' ~user_provided_promise:p' in\n          ignore p''\n      in\n\n      (to_public_promise p'', callback)\n    in\n\n    match p.state with\n    | Fulfilled _ ->\n      to_public_promise p\n\n    | Rejected exn ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> h exn)\n        ~if_deferred:(fun () ->\n          let (p'', callback) =\n            create_result_promise_and_callback_if_deferred () in\n          (p'', callback, p.state))\n\n    | Pending p_callbacks ->\n      let (p'', callback) = create_result_promise_and_callback_if_deferred () in\n      add_implicitly_removed_callback p_callbacks callback;\n      p''\n\n  let backtrace_catch add_loc f h =\n    let p = try f () with exn -> fail exn in\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    let create_result_promise_and_callback_if_deferred () =\n      let p'' = new_pending ~how_to_cancel:(Propagate_cancel_to_one p) in\n\n      let saved_storage = !current_storage in\n\n      let callback p_result =\n        match p_result with\n        | Fulfilled _ as p_result ->\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            resolve ~allow_deferring:false p'' p_result in\n          ignore p''\n\n        | Rejected exn ->\n          current_storage := saved_storage;\n\n          let p' = try h exn with exn -> fail (add_loc exn) in\n          let Internal p' = to_internal_promise p' in\n\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            make_into_proxy ~outer_promise:p'' ~user_provided_promise:p' in\n          ignore p''\n      in\n\n      (to_public_promise p'', callback)\n    in\n\n    match p.state with\n    | Fulfilled _ ->\n      to_public_promise p\n\n    | Rejected exn ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> h (add_loc exn))\n        ~if_deferred:(fun () ->\n          let (p'', callback) =\n            create_result_promise_and_callback_if_deferred () in\n          (p'', callback, p.state))\n\n    | Pending p_callbacks ->\n      let (p'', callback) = create_result_promise_and_callback_if_deferred () in\n      add_implicitly_removed_callback p_callbacks callback;\n      p''\n\n  let try_bind f f' h =\n    let p = try f () with exn -> fail exn in\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    let create_result_promise_and_callback_if_deferred () =\n      let p'' = new_pending ~how_to_cancel:(Propagate_cancel_to_one p) in\n\n      let saved_storage = !current_storage in\n\n      let callback p_result =\n        match p_result with\n        | Fulfilled v ->\n          current_storage := saved_storage;\n\n          let p' = try f' v with exn -> fail exn in\n          let Internal p' = to_internal_promise p' in\n\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            make_into_proxy ~outer_promise:p'' ~user_provided_promise:p' in\n          ignore p''\n\n        | Rejected exn ->\n          current_storage := saved_storage;\n\n          let p' = try h exn with exn -> fail exn in\n          let Internal p' = to_internal_promise p' in\n\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            make_into_proxy ~outer_promise:p'' ~user_provided_promise:p' in\n          ignore p''\n      in\n\n      (to_public_promise p'', callback)\n    in\n\n    match p.state with\n    | Fulfilled v ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> f' v)\n        ~if_deferred:(fun () ->\n          let (p'', callback) =\n            create_result_promise_and_callback_if_deferred () in\n          (p'', callback, p.state))\n\n    | Rejected exn ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> h exn)\n        ~if_deferred:(fun () ->\n          let (p'', callback) =\n            create_result_promise_and_callback_if_deferred () in\n          (p'', callback, p.state))\n\n    | Pending p_callbacks ->\n      let (p'', callback) = create_result_promise_and_callback_if_deferred () in\n      add_implicitly_removed_callback p_callbacks callback;\n      p''\n\n  let backtrace_try_bind add_loc f f' h =\n    let p = try f () with exn -> fail exn in\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    let create_result_promise_and_callback_if_deferred () =\n      let p'' = new_pending ~how_to_cancel:(Propagate_cancel_to_one p) in\n\n      let saved_storage = !current_storage in\n\n      let callback p_result =\n        match p_result with\n        | Fulfilled v ->\n          current_storage := saved_storage;\n\n          let p' = try f' v with exn -> fail (add_loc exn) in\n          let Internal p' = to_internal_promise p' in\n\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            make_into_proxy ~outer_promise:p'' ~user_provided_promise:p' in\n          ignore p''\n\n        | Rejected exn ->\n          current_storage := saved_storage;\n\n          let p' = try h exn with exn -> fail (add_loc exn) in\n          let Internal p' = to_internal_promise p' in\n\n          let State_may_now_be_pending_proxy p'' = may_now_be_proxy p'' in\n          let p'' = underlying p'' in\n\n          let State_may_have_changed p'' =\n            make_into_proxy ~outer_promise:p'' ~user_provided_promise:p' in\n          ignore p''\n      in\n\n      (to_public_promise p'', callback)\n    in\n\n    match p.state with\n    | Fulfilled v ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> f' v)\n        ~if_deferred:(fun () ->\n          let (p'', callback) =\n            create_result_promise_and_callback_if_deferred () in\n          (p'', callback, p.state))\n\n    | Rejected exn ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> h (add_loc exn))\n        ~if_deferred:(fun () ->\n          let (p'', callback) =\n            create_result_promise_and_callback_if_deferred () in\n          (p'', callback, p.state))\n\n    | Pending p_callbacks ->\n      let (p'', callback) = create_result_promise_and_callback_if_deferred () in\n      add_implicitly_removed_callback p_callbacks callback;\n      p''\n\n  let finalize f f' =\n    try_bind f\n      (fun x -> bind (f' ()) (fun () -> return x))\n      (fun e -> bind (f' ()) (fun () -> fail e))\n\n  let backtrace_finalize add_loc f f' =\n    backtrace_try_bind add_loc f\n      (fun x -> bind (f' ()) (fun () -> return x))\n      (fun e -> bind (f' ()) (fun () -> fail (add_loc e)))\n\n\n\n  let on_cancel p f =\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    match p.state with\n    | Rejected Canceled ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> handle_with_async_exception_hook f ())\n        ~if_deferred:(fun () ->\n          ((), (fun _ -> handle_with_async_exception_hook f ()), Fulfilled ()))\n\n    | Rejected _ ->\n      ()\n\n    | Fulfilled _ ->\n      ()\n\n    | Pending callbacks ->\n      add_cancel_callback callbacks f\n\n\n\n  let on_success p f =\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    let callback_if_deferred () =\n      let saved_storage = !current_storage in\n\n      fun result ->\n        match result with\n        | Fulfilled v ->\n          current_storage := saved_storage;\n          handle_with_async_exception_hook f v\n\n        | Rejected _ ->\n          ()\n    in\n\n    match p.state with\n    | Fulfilled v ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> handle_with_async_exception_hook f v)\n        ~if_deferred:(fun () ->\n          let callback = callback_if_deferred () in\n          ((), callback, p.state))\n\n    | Rejected _ ->\n      ()\n\n    | Pending p_callbacks ->\n      let callback = callback_if_deferred () in\n      add_implicitly_removed_callback p_callbacks callback\n\n  let on_failure p f =\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    let callback_if_deferred () =\n      let saved_storage = !current_storage in\n\n      fun result ->\n        match result with\n        | Fulfilled _ ->\n          ()\n\n        | Rejected exn ->\n          current_storage := saved_storage;\n          handle_with_async_exception_hook f exn\n    in\n\n    match p.state with\n    | Fulfilled _ ->\n      ()\n\n    | Rejected exn ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> handle_with_async_exception_hook f exn)\n        ~if_deferred:(fun () ->\n          let callback = callback_if_deferred () in\n          ((), callback, p.state))\n\n    | Pending p_callbacks ->\n      let callback = callback_if_deferred () in\n      add_implicitly_removed_callback p_callbacks callback\n\n  let on_termination p f =\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    let callback_if_deferred () =\n      let saved_storage = !current_storage in\n\n      fun _result ->\n        current_storage := saved_storage;\n        handle_with_async_exception_hook f ()\n    in\n\n    match p.state with\n    | Fulfilled _ ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> handle_with_async_exception_hook f ())\n        ~if_deferred:(fun () ->\n          let callback = callback_if_deferred () in\n          ((), callback, p.state))\n\n    | Rejected _ ->\n      run_callback_or_defer_it\n      ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> handle_with_async_exception_hook f ())\n        ~if_deferred:(fun () ->\n          let callback = callback_if_deferred () in\n          ((), callback, p.state))\n\n    | Pending p_callbacks ->\n      let callback = callback_if_deferred () in\n      add_implicitly_removed_callback p_callbacks callback\n\n  let on_any p f g =\n    let Internal p = to_internal_promise p in\n    let p = underlying p in\n\n    let callback_if_deferred () =\n      let saved_storage = !current_storage in\n\n      fun result ->\n        match result with\n        | Fulfilled v ->\n          current_storage := saved_storage;\n          handle_with_async_exception_hook f v\n\n        | Rejected exn ->\n          current_storage := saved_storage;\n          handle_with_async_exception_hook g exn\n    in\n\n    match p.state with\n    | Fulfilled v ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> handle_with_async_exception_hook f v)\n        ~if_deferred:(fun () ->\n          let callback = callback_if_deferred () in\n          ((), callback, p.state))\n\n    | Rejected exn ->\n      run_callback_or_defer_it\n        ~run_immediately_and_ensure_tail_call:true\n        ~callback:(fun () -> handle_with_async_exception_hook g exn)\n        ~if_deferred:(fun () ->\n          let callback = callback_if_deferred () in\n          ((), callback, p.state))\n\n    | Pending p_callbacks ->\n      let callback = callback_if_deferred () in\n      add_implicitly_removed_callback p_callbacks callback\nend\ninclude Sequential_composition\n\n\n\nmodule Concurrent_composition :\nsig\n  val async : (unit -> _ t) -> unit\n  val ignore_result : _ t -> unit\n\n  val both : 'a t -> 'b t -> ('a * 'b) t\n  val join : unit t list -> unit t\n\n  val choose : 'a t list -> 'a t\n  val pick : 'a t list -> 'a t\n\n  val nchoose : 'a t list -> 'a list t\n  val npick : 'a t list -> 'a list t\n\n  val nchoose_split : 'a t list -> ('a list * 'a t list) t\nend =\nstruct\n  external reraise : exn -> 'a = \"%reraise\"\n\n  let async f =\n    let p = try f () with exn -> fail exn in\n    let Internal p = to_internal_promise p in\n\n    match (underlying p).state with\n    | Fulfilled _ ->\n      ()\n    | Rejected exn ->\n      !async_exception_hook exn\n\n    | Pending p_callbacks ->\n      let callback result =\n        match result with\n        | Fulfilled _ ->\n          ()\n        | Rejected exn ->\n          !async_exception_hook exn\n      in\n      add_implicitly_removed_callback p_callbacks callback\n\n  let ignore_result p =\n    let Internal p = to_internal_promise p in\n\n    match (underlying p).state with\n    | Fulfilled _ ->\n      ()\n    | Rejected exn ->\n      reraise exn\n\n    | Pending p_callbacks ->\n      let callback result =\n        match result with\n        | Fulfilled _ ->\n          ()\n        | Rejected exn ->\n          !async_exception_hook exn\n      in\n      add_implicitly_removed_callback p_callbacks callback\n\n\n\n  let join ps =\n    let p' = new_pending ~how_to_cancel:(propagate_cancel_to_several ps) in\n\n    let number_pending_in_ps = ref 0 in\n    let join_result = ref (Fulfilled ()) in\n\n    (* Callback attached to each promise in [ps] that is still pending at the\n       time [join] is called. *)\n    let callback new_result =\n      let State_may_now_be_pending_proxy p' = may_now_be_proxy p' in\n\n      begin match new_result with\n      | Fulfilled () -> ()\n      | Rejected _ ->\n      (* For the first promise in [ps] to be rejected, set the result of the\n         [join] to rejected with the same exception.. *)\n        match !join_result with\n        | Fulfilled () -> join_result := new_result\n        | Rejected _ -> ()\n      end;\n\n      (* In all cases, decrement the number of promises still pending, and\n         resolve the [join] once all promises resolve. *)\n      number_pending_in_ps := !number_pending_in_ps - 1;\n      if !number_pending_in_ps = 0 then begin\n        let p' = underlying p' in\n        let State_may_have_changed p' =\n          resolve ~allow_deferring:false (underlying p') !join_result in\n        ignore p'\n      end\n    in\n\n    (* Attach the above callback. Simultaneously count how many pending promises\n       there are in [ps] (initially). If that number is zero, the [join] must\n       resolve immediately. *)\n    let rec attach_callback_or_resolve_immediately ps =\n      match ps with\n      | [] ->\n        if !number_pending_in_ps = 0 then\n          to_public_promise {state = !join_result}\n        else\n          to_public_promise p'\n\n      | p::ps ->\n        let Internal p = to_internal_promise p in\n\n        match (underlying p).state with\n        | Pending p_callbacks ->\n          number_pending_in_ps := !number_pending_in_ps + 1;\n          add_implicitly_removed_callback p_callbacks callback;\n          attach_callback_or_resolve_immediately ps\n\n        | Rejected _ as p_result ->\n          (* As in the callback above, but for already-resolved promises in\n             [ps]: reject the [join] with the same exception as in the first\n             rejected promise found. [join] still waits for any pending promises\n             before actually resolving, though. *)\n          begin match !join_result with\n          | Fulfilled () -> join_result := p_result;\n          | Rejected _ -> ()\n          end;\n          attach_callback_or_resolve_immediately ps\n\n        | Fulfilled () ->\n          attach_callback_or_resolve_immediately ps\n    in\n\n    attach_callback_or_resolve_immediately ps\n\n  let both p1 p2 =\n    let v1 = ref None in\n    let v2 = ref None in\n    let p1' = bind p1 (fun v -> v1 := Some v; return_unit) in\n    let p2' = bind p2 (fun v -> v2 := Some v; return_unit) in\n    join [p1'; p2'] |> map (fun () ->\n      match !v1, !v2 with\n      | Some v1, Some v2 -> v1, v2\n      | _ -> assert false)\n\n\n\n  (* Maintainer's note: the next few functions are helpers for [choose] and\n     [pick]. Perhaps they should be factored into some kind of generic\n     [choose]/[pick] implementation, which may actually be optimal anyway with\n     Flambda. *)\n\n  let count_resolved_promises_in (ps : _ t list) =\n    let accumulate total p =\n      let Internal p = to_internal_promise p in\n      match (underlying p).state with\n      | Fulfilled _ -> total + 1\n      | Rejected _ -> total + 1\n      | Pending _ -> total\n    in\n    List.fold_left accumulate 0 ps\n\n  (* Evaluates to the [n]th promise in [ps], among only those promises in [ps]\n     that are resolved. The caller is expected to ensure that there are at\n     least [n] resolved promises in [ps]. *)\n  let rec nth_resolved (ps : 'a t list) (n : int) : 'a t =\n    match ps with\n    | [] ->\n      assert false\n\n    | p::ps ->\n      let Internal p' = to_internal_promise p in\n      match (underlying p').state with\n      | Pending _ ->\n        nth_resolved ps n\n\n      | Fulfilled _ ->\n        if n <= 0 then p\n        else nth_resolved ps (n - 1)\n      | Rejected _ ->\n        if n <= 0 then p\n        else nth_resolved ps (n - 1)\n\n  (* Like [nth_resolved], but cancels all pending promises found while\n     traversing [ps]. *)\n  let rec nth_resolved_and_cancel_pending (ps : 'a t list) (n : int) : 'a t =\n    match ps with\n    | [] ->\n      assert false\n\n    | p::ps ->\n      let Internal p' = to_internal_promise p in\n      match (underlying p').state with\n      | Pending _ ->\n        cancel p;\n        nth_resolved_and_cancel_pending ps n\n\n      | Fulfilled _ ->\n        if n <= 0 then (List.iter cancel ps; p)\n        else nth_resolved_and_cancel_pending ps (n - 1)\n      | Rejected _ ->\n        if n <= 0 then (List.iter cancel ps; p)\n        else nth_resolved_and_cancel_pending ps (n - 1)\n\n  (* The PRNG state is initialized with a constant to make non-IO-based programs\n     deterministic. *)\n  (* Maintainer's note: is this necessary? *)\n  let prng = lazy (Random.State.make [||])\n\n  let choose ps =\n    match count_resolved_promises_in ps with\n    | 0 ->\n      let p = new_pending ~how_to_cancel:(propagate_cancel_to_several ps) in\n\n      let callback result =\n        let State_may_now_be_pending_proxy p = may_now_be_proxy p in\n        let p = underlying p in\n        let State_may_have_changed p =\n          resolve ~allow_deferring:false p result in\n        ignore p\n      in\n      add_explicitly_removable_callback_to_each_of ps callback;\n\n      to_public_promise p\n\n    | 1 ->\n      nth_resolved ps 0\n\n    | n ->\n      nth_resolved ps (Random.State.int (Lazy.force prng) n)\n\n  let pick ps =\n    match count_resolved_promises_in ps with\n    | 0 ->\n      let p = new_pending ~how_to_cancel:(propagate_cancel_to_several ps) in\n\n      let callback result =\n        let State_may_now_be_pending_proxy p = may_now_be_proxy p in\n        List.iter cancel ps;\n        let p = underlying p in\n        let State_may_have_changed p =\n          resolve ~allow_deferring:false p result in\n        ignore p\n      in\n      add_explicitly_removable_callback_to_each_of ps callback;\n\n      to_public_promise p\n\n    | 1 ->\n      nth_resolved_and_cancel_pending ps 0\n\n    | n ->\n      nth_resolved_and_cancel_pending ps\n        (Random.State.int (Lazy.force prng) n)\n\n\n\n  (* If [nchoose ps] or [npick ps] found all promises in [ps] pending, the\n     callback added to each promise in [ps] eventually calls this function. The\n     function collects promises in [ps] that have become fulfilled, or finds one\n     promise in [ps] that has been rejected. It then returns the desired state\n     of the final promise: either the list of results collected, or the\n     exception found. *)\n  let rec collect_fulfilled_promises_after_pending\n      (results : 'a list)\n      (ps : 'a t list) :\n        ('a list resolved_state) =\n\n    match ps with\n    | [] ->\n      Fulfilled (List.rev results)\n\n    | p::ps ->\n      let Internal p = to_internal_promise p in\n\n      match (underlying p).state with\n      | Fulfilled v ->\n        collect_fulfilled_promises_after_pending (v::results) ps\n\n      | Rejected _ as result ->\n        result\n\n      | Pending _ ->\n        collect_fulfilled_promises_after_pending results ps\n\n  let nchoose ps =\n    (* If at least one promise in [ps] is found fulfilled, this function is\n       called to find all such promises. *)\n    let rec collect_already_fulfilled_promises_or_find_rejected acc ps =\n      match ps with\n      | [] ->\n        return (List.rev acc)\n\n      | p::ps ->\n        let Internal p = to_internal_promise p in\n        match (underlying p).state with\n        | Fulfilled v ->\n          collect_already_fulfilled_promises_or_find_rejected (v::acc) ps\n\n        | Rejected _ as result ->\n          to_public_promise {state = result}\n\n        | Pending _ ->\n          collect_already_fulfilled_promises_or_find_rejected acc ps\n    in\n\n    (* Looks for already-resolved promises in [ps]. If none are fulfilled or\n       rejected, adds a callback to all promises in [ps] (all of which are\n       pending). *)\n    let rec check_for_already_resolved_promises ps' =\n      match ps' with\n      | [] ->\n        let p = new_pending ~how_to_cancel:(propagate_cancel_to_several ps) in\n\n        let callback _result =\n          let State_may_now_be_pending_proxy p = may_now_be_proxy p in\n          let p = underlying p in\n          let result = collect_fulfilled_promises_after_pending [] ps in\n          let State_may_have_changed p =\n            resolve ~allow_deferring:false p result in\n          ignore p\n        in\n        add_explicitly_removable_callback_to_each_of ps callback;\n\n        to_public_promise p\n\n      | p::ps ->\n        let Internal p = to_internal_promise p in\n        match (underlying p).state with\n        | Fulfilled v ->\n          collect_already_fulfilled_promises_or_find_rejected [v] ps\n\n        | Rejected _ as result ->\n          to_public_promise {state = result}\n\n        | Pending _ ->\n          check_for_already_resolved_promises ps\n    in\n\n    let p = check_for_already_resolved_promises ps in\n    p\n\n  (* See [nchoose]. This function differs only in having additional calls to\n     [cancel]. *)\n  let npick ps =\n    let rec collect_already_fulfilled_promises_or_find_rejected acc ps' =\n      match ps' with\n      | [] ->\n        List.iter cancel ps;\n        return (List.rev acc)\n\n      | p::ps' ->\n        let Internal p = to_internal_promise p in\n        match (underlying p).state with\n        | Fulfilled v ->\n          collect_already_fulfilled_promises_or_find_rejected (v::acc) ps'\n\n        | Rejected _ as result ->\n          List.iter cancel ps;\n          to_public_promise {state = result}\n\n        | Pending _ ->\n          collect_already_fulfilled_promises_or_find_rejected acc ps'\n    in\n\n    let rec check_for_already_resolved_promises ps' =\n      match ps' with\n      | [] ->\n        let p = new_pending ~how_to_cancel:(propagate_cancel_to_several ps) in\n\n        let callback _result =\n          let State_may_now_be_pending_proxy p = may_now_be_proxy p in\n          let p = underlying p in\n          let result = collect_fulfilled_promises_after_pending [] ps in\n          List.iter cancel ps;\n          let State_may_have_changed p =\n            resolve ~allow_deferring:false p result in\n          ignore p\n        in\n        add_explicitly_removable_callback_to_each_of ps callback;\n\n        to_public_promise p\n\n      | p::ps' ->\n        let Internal p = to_internal_promise p in\n        match (underlying p).state with\n        | Fulfilled v ->\n          collect_already_fulfilled_promises_or_find_rejected [v] ps'\n\n        | Rejected _ as result ->\n          List.iter cancel ps;\n          to_public_promise {state = result}\n\n        | Pending _ ->\n          check_for_already_resolved_promises ps'\n    in\n\n    let p = check_for_already_resolved_promises ps in\n    p\n\n\n\n  (* Same general pattern as [npick] and [nchoose]. *)\n  let nchoose_split ps =\n    let rec finish\n        (to_resolve : ('a list * 'a t list, underlying, pending) promise)\n        (fulfilled : 'a list)\n        (pending : 'a t list)\n        (ps : 'a t list)\n          : ('a list * 'a t list, underlying, resolved) state_changed =\n\n      match ps with\n      | [] ->\n        resolve ~allow_deferring:false to_resolve\n          (Fulfilled (List.rev fulfilled, List.rev pending))\n\n      | p::ps ->\n        let Internal p_internal = to_internal_promise p in\n        match (underlying p_internal).state with\n        | Fulfilled v ->\n          finish to_resolve (v::fulfilled) pending ps\n\n        | Rejected _ as result ->\n          resolve ~allow_deferring:false to_resolve result\n\n        | Pending _ ->\n          finish to_resolve fulfilled (p::pending) ps\n    in\n\n    let rec collect_already_resolved_promises results pending ps =\n      match ps with\n      | [] ->\n        (* Maintainer's note: should the pending promise list also be\n           reversed? It is reversed in finish. *)\n        return (List.rev results, pending)\n\n      | p::ps ->\n        let Internal p_internal = to_internal_promise p in\n        match (underlying p_internal).state with\n        | Fulfilled v ->\n          collect_already_resolved_promises (v::results) pending ps\n\n        | Rejected _ as result ->\n          to_public_promise {state = result}\n\n        | Pending _ ->\n          collect_already_resolved_promises results (p::pending) ps\n    in\n\n    let rec check_for_already_resolved_promises pending_acc ps' =\n      match ps' with\n      | [] ->\n        let p = new_pending ~how_to_cancel:(propagate_cancel_to_several ps) in\n\n        let callback _result =\n          let State_may_now_be_pending_proxy p = may_now_be_proxy p in\n          let p = underlying p in\n          let State_may_have_changed p = finish p [] [] ps in\n          ignore p\n        in\n        add_explicitly_removable_callback_to_each_of ps callback;\n\n        to_public_promise p\n\n      | p::ps' ->\n        let Internal p_internal = to_internal_promise p in\n        match (underlying p_internal).state with\n        | Fulfilled v ->\n          collect_already_resolved_promises [v] pending_acc ps'\n\n        | Rejected _ as result ->\n          to_public_promise {state = result}\n\n        | Pending _ ->\n          check_for_already_resolved_promises (p::pending_acc) ps'\n    in\n\n    let p = check_for_already_resolved_promises [] ps in\n    p\nend\ninclude Concurrent_composition\n\n\n\nmodule Miscellaneous :\nsig\n  (* Promise state query *)\n  type 'a state =\n    | Return of 'a\n    | Fail of exn\n    | Sleep\n\n  val state : 'a t -> 'a state\n  val is_sleeping : 'a t -> bool\n  val debug_state_is : 'a state -> 'a t -> bool t\n\n  (* Function lifters *)\n  val apply : ('a -> 'b t) -> 'a -> 'b t\n\n  val wrap :\n    (unit -> 'b) ->\n    'b t\n  val wrap1 :\n    ('a1 -> 'b) ->\n    ('a1 -> 'b t)\n  val wrap2 :\n    ('a1 -> 'a2 -> 'b) ->\n    ('a1 -> 'a2 -> 'b t)\n  val wrap3 :\n    ('a1 -> 'a2 -> 'a3 -> 'b) ->\n    ('a1 -> 'a2 -> 'a3 -> 'b t)\n  val wrap4 :\n    ('a1 -> 'a2 -> 'a3 -> 'a4 -> 'b) ->\n    ('a1 -> 'a2 -> 'a3 -> 'a4 -> 'b t)\n  val wrap5 :\n    ('a1 -> 'a2 -> 'a3 -> 'a4 -> 'a5 -> 'b) ->\n    ('a1 -> 'a2 -> 'a3 -> 'a4 -> 'a5 -> 'b t)\n  val wrap6 :\n    ('a1 -> 'a2 -> 'a3 -> 'a4 -> 'a5 -> 'a6 -> 'b) ->\n    ('a1 -> 'a2 -> 'a3 -> 'a4 -> 'a5 -> 'a6 -> 'b t)\n  val wrap7 :\n    ('a1 -> 'a2 -> 'a3 -> 'a4 -> 'a5 -> 'a6 -> 'a7 -> 'b) ->\n    ('a1 -> 'a2 -> 'a3 -> 'a4 -> 'a5 -> 'a6 -> 'a7 -> 'b t)\n\n  (* Paused promises *)\n  val pause : unit -> unit t\n  val wakeup_paused : unit -> unit\n  val paused_count : unit -> int\n  val register_pause_notifier : (int -> unit) -> unit\n\n  (* Internal interface for other modules in Lwt *)\n  val poll : 'a t -> 'a option\nend =\nstruct\n  type 'a state =\n    | Return of 'a\n    | Fail of exn\n    | Sleep\n\n  external reraise : exn -> 'a = \"%reraise\"\n\n  let state p =\n    let Internal p = to_internal_promise p in\n    match (underlying p).state with\n    | Fulfilled v -> Return v\n    | Rejected exn -> Fail exn\n    | Pending _ -> Sleep\n\n  let debug_state_is expected_state p =\n    return (state p = expected_state)\n\n  let is_sleeping p =\n    let Internal p = to_internal_promise p in\n    match (underlying p).state with\n    | Fulfilled _ -> false\n    | Rejected _ -> false\n    | Pending _ -> true\n\n  let poll p =\n    let Internal p = to_internal_promise p in\n    match (underlying p).state with\n    | Rejected e -> reraise e\n    | Fulfilled v -> Some v\n    | Pending _ -> None\n\n\n\n  let apply f x = try f x with exn -> fail exn\n\n  let wrap f = try return (f ()) with exn -> fail exn\n\n  let wrap1 f x1 =\n    try return (f x1)\n    with exn -> fail exn\n\n  let wrap2 f x1 x2 =\n    try return (f x1 x2)\n    with exn -> fail exn\n\n  let wrap3 f x1 x2 x3 =\n    try return (f x1 x2 x3)\n    with exn -> fail exn\n\n  let wrap4 f x1 x2 x3 x4 =\n    try return (f x1 x2 x3 x4)\n    with exn -> fail exn\n\n  let wrap5 f x1 x2 x3 x4 x5 =\n    try return (f x1 x2 x3 x4 x5)\n    with exn -> fail exn\n\n  let wrap6 f x1 x2 x3 x4 x5 x6 =\n    try return (f x1 x2 x3 x4 x5 x6)\n    with exn -> fail exn\n\n  let wrap7 f x1 x2 x3 x4 x5 x6 x7 =\n    try return (f x1 x2 x3 x4 x5 x6 x7)\n    with exn -> fail exn\n\n\n\n  let pause_hook = ref ignore\n\n  let paused = Lwt_sequence.create ()\n  let paused_count = ref 0\n\n  let pause () =\n    let p = add_task_r paused in\n    incr paused_count;\n    !pause_hook !paused_count;\n    p\n\n  let wakeup_paused () =\n    if Lwt_sequence.is_empty paused then\n      paused_count := 0\n    else begin\n      let tmp = Lwt_sequence.create () in\n      Lwt_sequence.transfer_r paused tmp;\n      paused_count := 0;\n      Lwt_sequence.iter_l (fun r -> wakeup r ()) tmp\n    end\n\n  let register_pause_notifier f = pause_hook := f\n\n  let paused_count () = !paused_count\nend\ninclude Miscellaneous\n\n\n\nmodule Infix =\nstruct\n  let (>>=) = bind\n  let (=<<) f p = bind p f\n  let (>|=) p f = map f p\n  let (=|<) = map\n  let (<&>) p p' = join [p; p']\n  let (<?>) p p' = choose [p; p']\n\n  module Let_syntax =\n  struct\n    let return = return\n    let map t ~f = map f t\n    let bind t ~f = bind t f\n    let both = both\n\n    module Open_on_rhs =\n    struct\n    end\n  end\nend\ninclude Infix\n\n\n\nmodule Lwt_result_type =\nstruct\n  type +'a result = 'a lwt_result\n\n  (* Deprecated. *)\n  let make_value v = Result.Ok v\n  let make_error exn = Result.Error exn\nend\ninclude Lwt_result_type\n","(* Js_of_ocaml example\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\n(*\n- stop animation when not needed\n  ==> not visible\n  ==> no change (paused, follow rotation and no lighting)\n- Options:\n     ==> larger/smaller\n- adaptative size\n  ==> time 3 frames and take min\n  ==> if fast, try larger image\n\nIDEAS\n=====\n- saisons\n- satellites: geostationnaires, différentes altitudes\n  ==> trajectoire + mouvement du satellite\n- affiche l'axe de rotation de la terre, la direction du soleil\n- autres planètes\n\nSphere tessellation...\n   http://sol.gfxile.net/sphere/index.html\n   http://www.nihilogic.dk/labs/canvas3dtexture_0.2/\n\nStop animation when not visible!\n===> use window.onfocus/onblur\n\nhttp://visibleearth.nasa.gov/view_rec.php?id=2431\nhttp://maps.jpl.nasa.gov/\n*)\nopen Js_of_ocaml\nopen Js_of_ocaml_lwt\n\nlet width = 600\n\nlet height = width\n\nlet pi = 4. *. atan 1.\n\nlet obliquity = 23.5 *. pi /. 180.\n\nlet gamma = 2.\n\nlet dark = 0.2 ** gamma\n\n(****)\n\nlet doc = Dom_html.document\n\nlet button_type = Js.string \"button\"\n\nlet button txt action =\n  let b = Dom_html.createInput ~_type:button_type doc in\n  b##.value := Js.string txt;\n  b##.onclick :=\n    Dom_html.handler (fun _ ->\n        action ();\n        Js._true);\n  b\n\nlet toggle_button txt1 txt2 action =\n  let state = ref false in\n  let txt1 = Js.string txt1 in\n  let txt2 = Js.string txt2 in\n  let b = Dom_html.createInput ~_type:button_type doc in\n  b##.value := txt1;\n  b##.onclick :=\n    Dom_html.handler (fun _ ->\n        state := not !state;\n        b##.value := if !state then txt2 else txt1;\n        action !state;\n        Js._true);\n  b\n\nlet checkbox txt checked action =\n  let b = Dom_html.createInput ~_type:(Js.string \"checkbox\") doc in\n  b##.checked := Js.bool checked;\n  b##.onclick :=\n    Dom_html.handler (fun _ ->\n        action (Js.to_bool b##.checked);\n        Js._true);\n  let lab = Dom_html.createLabel doc in\n  Dom.appendChild lab b;\n  Dom.appendChild lab (doc##createTextNode (Js.string txt));\n  lab\n\nlet radio txt name checked action =\n  let b = Dom_html.createInput ~name:(Js.string name) ~_type:(Js.string \"radio\") doc in\n  b##.checked := Js.bool checked;\n  b##.onclick :=\n    Dom_html.handler (fun _ ->\n        action ();\n        Js._true);\n  let lab = Dom_html.createLabel doc in\n  Dom.appendChild lab b;\n  Dom.appendChild lab (doc##createTextNode (Js.string txt));\n  lab\n\n(****)\n\ntype vertex =\n  { x : float\n  ; y : float\n  ; z : float }\n\nlet vertex x y z = {x; y; z}\n\ntype matrix =\n  { r1 : vertex\n  ; r2 : vertex\n  ; r3 : vertex }\n\nlet vect {x = x1; y = y1; z = z1} {x = x2; y = y2; z = z2} =\n  {x = x2 -. x1; y = y2 -. y1; z = z2 -. z1}\n\nlet cross_product {x = x1; y = y1; z = z1} {x = x2; y = y2; z = z2} =\n  { x = (y1 *. z2) -. (y2 *. z1)\n  ; y = (z1 *. x2) -. (z2 *. x1)\n  ; z = (x1 *. y2) -. (x2 *. y1) }\n\nlet dot_product {x = x1; y = y1; z = z1} {x = x2; y = y2; z = z2} =\n  (x1 *. x2) +. (y1 *. y2) +. (z1 *. z2)\n\nlet matrix_vect_mul m {x; y; z} =\n  let {r1; r2; r3} = m in\n  let x' = (x *. r1.x) +. (y *. r1.y) +. (z *. r1.z) in\n  let y' = (x *. r2.x) +. (y *. r2.y) +. (z *. r2.z) in\n  let z' = (x *. r3.x) +. (y *. r3.y) +. (z *. r3.z) in\n  {x = x'; y = y'; z = z'}\n\nlet matrix_transp m =\n  let {r1; r2; r3} = m in\n  { r1 = {x = r1.x; y = r2.x; z = r3.x}\n  ; r2 = {x = r1.y; y = r2.y; z = r3.y}\n  ; r3 = {x = r1.z; y = r2.z; z = r3.z} }\n\nlet matrix_mul m m' =\n  let m' = matrix_transp m' in\n  { r1 = matrix_vect_mul m' m.r1\n  ; r2 = matrix_vect_mul m' m.r2\n  ; r3 = matrix_vect_mul m' m.r3 }\n\nlet normalize v =\n  let {x; y; z} = v in\n  let r = sqrt ((x *. x) +. (y *. y) +. (z *. z)) in\n  {x = x /. r; y = y /. r; z = z /. r}\n\nlet xz_rotation phi =\n  let cos_phi = cos phi in\n  let sin_phi = sin phi in\n  { r1 = vertex cos_phi 0. sin_phi\n  ; r2 = vertex 0. 1. 0.\n  ; r3 = vertex (-.sin_phi) 0. cos_phi }\n\nlet xy_rotation phi =\n  let cos_phi = cos phi in\n  let sin_phi = sin phi in\n  { r1 = vertex cos_phi sin_phi 0.\n  ; r2 = vertex (-.sin_phi) cos_phi 0.\n  ; r3 = vertex 0. 0. 1. }\n\nlet yz_rotation phi =\n  let cos_phi = cos phi in\n  let sin_phi = sin phi in\n  { r1 = vertex 1. 0. 0.\n  ; r2 = vertex 0. cos_phi sin_phi\n  ; r3 = vertex 0. (-.sin_phi) cos_phi }\n\nlet matrix_identity = xz_rotation 0.\n\n(* Assumes that m is orthogonal *)\nlet rotate_normal m v = matrix_vect_mul (matrix_transp m) v\n\n(****)\n\ntype face =\n  { v1 : int\n  ; v2 : int\n  ; v3 : int }\n\nlet face v1 v2 v3 = {v1; v2; v3}\n\ntype t =\n  { vertices : vertex array\n  ; faces : face array }\n\nlet rotate_object m o =\n  {o with vertices = Array.map (fun v -> matrix_vect_mul m v) o.vertices}\n\nlet octahedron =\n  { vertices =\n      [| vertex 0. 0. 1.\n       ; vertex 1. 0. 0.\n       ; vertex 0. 1. 0.\n       ; vertex (-1.) 0. 0.\n       ; vertex 0. (-1.) 0.\n       ; vertex 0. 0. (-1.) |]\n  ; faces =\n      [| face 0 1 2\n       ; face 0 2 3\n       ; face 0 3 4\n       ; face 0 4 1\n       ; face 1 5 2\n       ; face 1 4 5\n       ; face 3 5 4\n       ; face 3 2 5 |] }\n\n(****)\n\n(* 0 <= phi < 2pi *)\n(* -pi/2 <= theta <= pi/2 *)\nlet tesselate_sphere p_div t_div =\n  let p_delta = 2. *. pi /. float p_div in\n  let t_delta = pi /. float t_div in\n  let t_offset = (pi -. t_delta) /. 2. in\n  let n = t_div * p_div in\n  let vertices = Array.make (n + 2) (vertex 0. 0. 0.) in\n  let faces = Array.make (n * 2) (face 0 0 0) in\n  let north = n and south = n + 1 in\n  vertices.(north) <- vertex 0. (-1.) 0.;\n  vertices.(south) <- vertex 0. 1. 0.;\n  for i = 0 to p_div - 1 do\n    for j = 0 to t_div - 1 do\n      let phi = float i *. p_delta in\n      let theta = (float j *. t_delta) -. t_offset in\n      let x = cos phi *. cos theta in\n      let y = sin theta in\n      let z = sin phi *. cos theta in\n      let k = (i * t_div) + j in\n      vertices.(k) <- vertex x y z;\n      if j = 0\n      then (\n        faces.(2 * k) <- face north k ((k + t_div) mod n);\n        faces.((2 * k) + 1) <- face south ((k + (2 * t_div) - 1) mod n) (k + t_div - 1))\n      else (\n        faces.(2 * k) <- face k ((k + t_div) mod n) (k - 1);\n        faces.((2 * k) + 1) <- face (k - 1) ((k + t_div) mod n) ((k + t_div - 1) mod n))\n    done\n  done;\n  {vertices; faces}\n\n(****)\n\nlet divide all o =\n  let vn =\n    if all\n    then Array.length o.vertices + (Array.length o.faces * 3 / 2)\n    else Array.length o.vertices + 16\n  in\n  let vertices = Array.make vn (vertex 0. 0. 0.) in\n  let j = ref (Array.length o.vertices) in\n  Array.blit o.vertices 0 vertices 0 !j;\n  let fn = if all then 4 * Array.length o.faces else Array.length o.faces + 24 in\n  let faces = Array.make fn (face 0 0 0) in\n  let midpoints = Hashtbl.create 17 in\n  let midpoint v1 v2 =\n    let p = if v1 < v2 then v1, v2 else v2, v1 in\n    try Hashtbl.find midpoints p\n    with Not_found ->\n      let v1 = o.vertices.(v1) in\n      let v2 = o.vertices.(v2) in\n      let v =\n        {x = (v1.x +. v2.x) /. 2.; y = (v1.y +. v2.y) /. 2.; z = (v1.z +. v2.z) /. 2.}\n      in\n      let v =\n        if all || abs_float v1.y = 1. || abs_float v2.y = 1. then normalize v else v\n      in\n      let res = !j in\n      assert (res < Array.length vertices);\n      vertices.(res) <- v;\n      Hashtbl.add midpoints p res;\n      incr j;\n      res\n  in\n  let k = ref 0 in\n  for i = 0 to Array.length o.faces - 1 do\n    let {v1; v2; v3} = o.faces.(i) in\n    if all\n       || abs_float o.vertices.(v1).y = 1.\n       || abs_float o.vertices.(v2).y = 1.\n       || abs_float o.vertices.(v3).y = 1.\n    then (\n      let w1 = midpoint v1 v2 in\n      let w2 = midpoint v2 v3 in\n      let w3 = midpoint v3 v1 in\n      faces.(!k) <- {v1; v2 = w1; v3 = w3};\n      faces.(!k + 1) <- {v1 = w1; v2; v3 = w2};\n      faces.(!k + 2) <- {v1 = w3; v2 = w2; v3};\n      faces.(!k + 3) <- {v1 = w1; v2 = w2; v3 = w3};\n      k := !k + 4)\n    else (\n      faces.(!k) <- o.faces.(i);\n      incr k)\n  done;\n  assert (!j = Array.length vertices);\n  assert (!k = Array.length faces);\n  {vertices; faces}\n\n(****)\n\nmodule Html = Dom_html\n\nlet create_canvas w h =\n  let c = Html.createCanvas Html.document in\n  c##.width := w;\n  c##.height := h;\n  c\n\n(****)\n\nlet ( >>= ) = Lwt.bind\n\nlet lwt_wrap f =\n  let t, w = Lwt.task () in\n  let cont x = Lwt.wakeup w x in\n  f cont;\n  t\n\n(****)\n\nlet load_image src =\n  let img = Html.createImg Html.document in\n  lwt_wrap (fun c ->\n      img##.onload :=\n        Html.handler (fun _ ->\n            c ();\n            Js._false);\n      img##.src := src)\n  >>= fun () -> Lwt.return img\n\n(****)\n\nlet shadow texture =\n  let w = texture##.width in\n  let h = texture##.height in\n  let canvas = create_canvas w h in\n  let ctx = canvas##getContext Html._2d_ in\n  let w, h = w / 8, h / 8 in\n  let img = ctx##getImageData 0. 0. (float w) (float h) in\n  let data = img##.data in\n  let inv_gamma = 1. /. gamma in\n  let update_shadow obliquity =\n    let cos_obl = cos obliquity in\n    let sin_obl = -.sin obliquity in\n    for j = 0 to h - 1 do\n      for i = 0 to (w / 2) - 1 do\n        let k = truncate (4. *. (float i +. (float j *. float w))) in\n        let k' = truncate (4. *. (float w -. float i +. (float j *. float w) -. 1.)) in\n        let theta = ((float j /. float h) -. 0.5) *. pi in\n        let phi = float i /. float w *. 2. *. pi in\n        let x = cos phi *. cos theta in\n        let y = sin theta in\n        (*\n        let z = sin phi *. cos theta in\n  *)\n        let x, _y =\n          (x *. cos_obl) +. (y *. sin_obl), (-.x *. sin_obl) +. (y *. cos_obl)\n        in\n        let c = if x > 0. then dark else dark -. (x *. (1. -. dark) *. 1.2) in\n        let c = if c <= 1. then c else 1. in\n        let c = 255 - truncate (255.99 *. (c ** inv_gamma)) in\n        Html.pixel_set data (k + 3) c;\n        Html.pixel_set data (k' + 3) c\n      done\n    done;\n    ctx##putImageData img 0. 0.;\n    ctx##.globalCompositeOperation := Js.string \"copy\";\n    ctx##save;\n    ctx##scale (8. *. float (w + 2) /. float w) (8. *. float (h + 2) /. float h);\n    ctx##translate (-1.) (-1.);\n    ctx##drawImage_fromCanvas canvas 0. 0.;\n    ctx##restore\n  in\n  update_shadow obliquity;\n  let w = texture##.width in\n  let h = texture##.height in\n  let canvas' = create_canvas w h in\n  let ctx' = canvas'##getContext Html._2d_ in\n  let no_lighting = ref false in\n  let update_texture lighting phi =\n    if lighting\n    then (\n      no_lighting := false;\n      let phi = mod_float phi (2. *. pi) in\n      ctx'##drawImage texture 0. 0.;\n      let i =\n        truncate (mod_float (((2. *. pi) -. phi) *. float w /. 2. /. pi) (float w))\n      in\n      ctx'##drawImage_fromCanvas canvas (float i) 0.;\n      ctx'##drawImage_fromCanvas canvas (float i -. float w) 0.)\n    else if not !no_lighting\n    then (\n      ctx'##drawImage texture 0. 0.;\n      no_lighting := true)\n  in\n  (*\n  Dom.appendChild Html.document##body canvas';\n*)\n  canvas', update_shadow, update_texture\n\n(****)\n\nlet to_uv tw th {x; y; z} =\n  let cst1 = ((tw /. 2.) -. 0.99) /. pi in\n  let cst2 = th /. 2. in\n  let cst3 = (th -. 0.99) /. pi in\n  let u = mod_float (float (truncate (tw -. (atan2 z x *. cst1)))) tw in\n  let v = float (truncate (cst2 +. (asin y *. cst3))) in\n  assert (0. <= u);\n  assert (u < tw);\n  assert (0. <= v);\n  assert (v < th);\n  u, v\n\nlet min (u : float) v = if u < v then u else v\n\nlet max (u : float) v = if u < v then v else u\n\nlet precompute_mapping_info tw th uv f =\n  let {v1; v2; v3} = f in\n  let u1, v1 = uv.(v1) in\n  let u2, v2 = uv.(v2) in\n  let u3, v3 = uv.(v3) in\n  let mid = tw /. 2. in\n  let u1 = if u1 = 0. && (u2 > mid || u3 > mid) then tw -. 2. else u1 in\n  let u2 = if u2 = 0. && (u1 > mid || u3 > mid) then tw -. 2. else u2 in\n  let u3 = if u3 = 0. && (u2 > mid || u1 > mid) then tw -. 2. else u3 in\n  let mth = th -. 2. in\n  let u1 = if v1 = 0. || v1 >= mth then (u2 +. u3) /. 2. else u1 in\n  let u2 = if v2 = 0. || v2 >= mth then (u1 +. u3) /. 2. else u2 in\n  let u3 = if v3 = 0. || v3 >= mth then (u2 +. u1) /. 2. else u3 in\n  let u1 = max 1. u1 in\n  let u2 = max 1. u2 in\n  let u3 = max 1. u3 in\n  let v1 = max 1. v1 in\n  let v2 = max 1. v2 in\n  let v3 = max 1. v3 in\n  let du2 = u2 -. u1 in\n  let du3 = u3 -. u1 in\n  let dv2 = v2 -. v1 in\n  let dv3 = v3 -. v1 in\n  let su = (dv2 *. du3) -. (dv3 *. du2) in\n  let sv = (du2 *. dv3) -. (du3 *. dv2) in\n  let dv3 = dv3 /. sv in\n  let dv2 = dv2 /. sv in\n  let du3 = du3 /. su in\n  let du2 = du2 /. su in\n  let u = max 0. (min u1 (min u2 u3) -. 4.) in\n  let v = max 0. (min v1 (min v2 v3) -. 4.) in\n  let u' = min tw (max u1 (max u2 u3) +. 4.) in\n  let v' = min th (max v1 (max v2 v3) +. 4.) in\n  let du = u' -. u in\n  let dv = v' -. v in\n  u1, v1, du2, dv2, du3, dv3, u, v, du, dv\n\nlet draw ctx _img shd o _uv normals face_info dir =\n  Array.iteri\n    (fun i {v1; v2; v3} ->\n      let {x = x1; y = y1; z = _z1} = o.vertices.(v1) in\n      let {x = x2; y = y2; z = _z2} = o.vertices.(v2) in\n      let {x = x3; y = y3; z = _z3} = o.vertices.(v3) in\n      if dot_product normals.(i) dir >= 0.\n      then (\n        ctx##beginPath;\n        ctx##moveTo x1 y1;\n        ctx##lineTo x2 y2;\n        ctx##lineTo x3 y3;\n        ctx##closePath;\n        ctx##save;\n        ctx##clip;\n        let u1, v1, du2, dv2, du3, dv3, u, v, du, dv = face_info.(i) in\n        let dx2 = x2 -. x1 in\n        let dx3 = x3 -. x1 in\n        let dy2 = y2 -. y1 in\n        let dy3 = y3 -. y1 in\n        let a = (dx2 *. dv3) -. (dx3 *. dv2) in\n        let b = (dx2 *. du3) -. (dx3 *. du2) in\n        let c = x1 -. (a *. u1) -. (b *. v1) in\n        let d = (dy2 *. dv3) -. (dy3 *. dv2) in\n        let e = (dy2 *. du3) -. (dy3 *. du2) in\n        let f = y1 -. (d *. u1) -. (e *. v1) in\n        ctx##transform a d b e c f;\n        (*\nlet (u1, v1) = uv.(v1) in\nlet (u2, v2) = uv.(v2) in\nlet (u3, v3) = uv.(v3) in\nlet mid = tw /. 2. in\n\nlet u1 = if u1 = 0. && (u2 > mid || u3 > mid) then tw -. 2. else u1 in\nlet u2 = if u2 = 0. && (u1 > mid || u3 > mid) then tw -. 2. else u2 in\nlet u3 = if u3 = 0. && (u2 > mid || u1 > mid) then tw -. 2. else u3 in\n\nlet mth = th -. 2. in\nlet u1 = if v1 = 0. || v1 >= mth then (u2 +. u3) /. 2. else u1 in\nlet u2 = if v2 = 0. || v2 >= mth then (u1 +. u3) /. 2. else u2 in\nlet u3 = if v3 = 0. || v3 >= mth then (u2 +. u1) /. 2. else u3 in\n\nlet u1 = max 1. u1 in\nlet u2 = max 1. u2 in\nlet u3 = max 1. u3 in\n\nlet v1 = max 1. v1 in\nlet v2 = max 1. v2 in\nlet v3 = max 1. v3 in\n\nlet du2 = u2 -. u1 in\nlet du3 = u3 -. u1 in\nlet dv2 = v2 -. v1 in\nlet dv3 = v3 -. v1 in\nlet dx2 = x2 -. x1 in\nlet dx3 = x3 -. x1 in\nlet dy2 = y2 -. y1 in\nlet dy3 = y3 -. y1 in\nlet a = (dx2*.dv3-.dx3*.dv2) /. (du2*.dv3-.du3*.dv2) in\nlet b = (dx2*.du3-.dx3*.du2) /. (dv2*.du3-.dv3*.du2) in\nlet c = x1 -. a *. u1 -. b *. v1 in\nlet d = (dy2*.dv3-.dy3*.dv2) /. (du2*.dv3-.du3*.dv2) in\nlet e = (dy2*.du3-.dy3*.du2) /. (dv2*.du3-.dv3*.du2) in\nlet f = y1 -. d *. u1 -. e *. v1 in\n\nctx##transform (a, d, b, e, c, f);\nlet u = max 0. (min u1 (min u2 u3) -. 4.) in\nlet v = max 0. (min v1 (min v2 v3) -. 4.) in\n\nlet u' = min tw (max u1 (max u2 u3) +. 4.) in\nlet v' = min th (max v1 (max v2 v3) +. 4.) in\nlet du = u' -. u in\nlet dv = v' -. v in\n*)\n        ctx##drawImage_fullFromCanvas shd u v du dv u v du dv;\n        ctx##restore))\n    o.faces\n\nlet ( >> ) x f = f x\n\n(*\nlet o = tesselate_sphere 8 6\nlet o = octahedron >> divide true >> divide true >> divide false\n*)\nlet o = tesselate_sphere 12 8\n\n(*\nlet o = octahedron >> divide true >> divide true >> divide true\n*)\nlet v = {x = 0.; y = 0.; z = 1.}\n\nlet _texture = Js.string \"black.jpg\"\n\nlet _texture = Js.string \"../planet/land_ocean_ice_cloud_2048.jpg\"\n\nlet texture = Js.string \"../planet/texture.jpg\"\n\nlet start _ =\n  Lwt.ignore_result\n    (load_image texture\n    >>= fun texture ->\n    let shd, update_shadow, update_texture = shadow texture in\n    let canvas = create_canvas width height in\n    let canvas' = create_canvas width height in\n    Dom.appendChild Html.document##.body canvas;\n    let ctx = canvas##getContext Html._2d_ in\n    let ctx' = canvas'##getContext Html._2d_ in\n    let r = float width /. 2. in\n    let tw = float texture##.width in\n    let th = float texture##.height in\n    let uv = Array.map (fun v -> to_uv tw th v) o.vertices in\n    let normals =\n      Array.map\n        (fun {v1; v2; v3} ->\n          let v1 = o.vertices.(v1) in\n          let v2 = o.vertices.(v2) in\n          let v3 = o.vertices.(v3) in\n          cross_product (vect v1 v2) (vect v1 v3))\n        o.faces\n    in\n    let face_info = Array.map (fun f -> precompute_mapping_info tw th uv f) o.faces in\n    let paused = ref false in\n    let follow = ref false in\n    let lighting = ref true in\n    let clipped = ref true in\n    let obl = ref obliquity in\n    let m_obliq = ref (xy_rotation (-.obliquity)) in\n    let m = ref matrix_identity in\n    let phi_rot = ref 0. in\n    let rateText = doc##createTextNode (Js.string \"\") in\n    let add = Dom.appendChild in\n    let ctrl = Html.createDiv doc in\n    ctrl##.className := Js.string \"controls\";\n    let d = Html.createDiv doc in\n    add d (doc##createTextNode (Js.string \"Click and drag mouse to rotate.\"));\n    add ctrl d;\n    let form = Html.createDiv doc in\n    let br () = Html.createBr doc in\n    (add form (toggle_button \"Pause\" \"Resume\" (fun p -> paused := p));\n      add form (br ());\n      add form (toggle_button \"Follow rotation\" \"Fixed position\" (fun f -> follow := f));\n      add form (br ());\n      add\n        form\n        (button \"Reset orientation\" (fun () ->\n             m := matrix_identity;\n             phi_rot := 0.;\n             m_obliq := xy_rotation (-. !obl)));\n      add form (br ());\n      let lab = Html.createLabel doc in\n      add lab (doc##createTextNode (Js.string \"Date:\"));\n      let s = Html.createSelect doc in\n      List.iter\n        (fun txt ->\n          let o = Html.createOption doc in\n          add o (doc##createTextNode (Js.string txt));\n          s##add o Js.null)\n        [\"December solstice\"; \"Equinox\"; \"June solstice\"];\n      s##.onchange :=\n        Html.handler (fun _ ->\n            let o =\n              match s##.selectedIndex with\n              | 0 -> obliquity\n              | 1 -> 0.\n              | _ -> -.obliquity\n            in\n            update_shadow o;\n            obl := o;\n            (*m_obliq := xy_rotation (-. o);*)\n            Js._true);\n      add lab s;\n      add form lab);\n    Dom.appendChild ctrl form;\n    let form = Html.createDiv doc in\n    add form (checkbox \"Lighting\" true (fun l -> lighting := l));\n    add form (br ());\n    add form (checkbox \"Clip\" true (fun l -> clipped := l));\n    add form (br ());\n    add form (doc##createTextNode (Js.string \"Frames per second: \"));\n    add form rateText;\n    add ctrl form;\n    add doc##.body ctrl;\n    let p = Html.createP doc in\n    p##.innerHTML :=\n      Js.string \"Credit: <a href='http://visibleearth.nasa.gov/'>Visual Earth</a>, Nasa\";\n    add doc##.body p;\n    let mx = ref 0 in\n    let my = ref 0 in\n    canvas##.onmousedown :=\n      Dom_html.handler (fun ev ->\n          mx := ev##.clientX;\n          my := ev##.clientY;\n          let c1 =\n            Html.addEventListener\n              Html.document\n              Html.Event.mousemove\n              (Dom_html.handler (fun ev ->\n                   let x = ev##.clientX and y = ev##.clientY in\n                   let dx = x - !mx and dy = y - !my in\n                   if dy != 0\n                   then m := matrix_mul (yz_rotation (2. *. float dy /. float width)) !m;\n                   if dx != 0\n                   then m := matrix_mul (xz_rotation (2. *. float dx /. float width)) !m;\n                   mx := x;\n                   my := y;\n                   Js._true))\n              Js._true\n          in\n          let c2 = ref Js.null in\n          c2 :=\n            Js.some\n              (Html.addEventListener\n                 Html.document\n                 Html.Event.mouseup\n                 (Dom_html.handler (fun _ ->\n                      Html.removeEventListener c1;\n                      Js.Opt.iter !c2 Html.removeEventListener;\n                      Js._true))\n                 Js._true);\n          Js._false);\n    let ti = ref (new%js Js.date_now)##getTime in\n    let fps = ref 0. in\n    let rec loop t phi =\n      let rotation = xz_rotation (phi -. !phi_rot) in\n      update_texture !lighting phi;\n      let m = matrix_mul !m (matrix_mul !m_obliq rotation) in\n      let o' = rotate_object m o in\n      let v' = rotate_normal m v in\n      ctx'##clearRect 0. 0. (float width) (float height);\n      ctx'##save;\n      if !clipped\n      then (\n        ctx'##beginPath;\n        ctx'##arc r r (r *. 0.95) 0. (-2. *. pi) Js._true;\n        ctx'##clip);\n      ctx'##setTransform (r -. 2.) 0. 0. (r -. 2.) r r;\n      ctx'##.globalCompositeOperation := Js.string \"lighter\";\n      draw ctx' texture shd o' uv normals face_info v';\n      ctx'##restore;\n      ctx##.globalCompositeOperation := Js.string \"copy\";\n      ctx##drawImage_fromCanvas canvas' 0. 0.;\n      (try ignore (ctx##getImageData 0. 0. 1. 1.) with _ -> ());\n      let t' = (new%js Js.date_now)##getTime in\n      (fps :=\n         let hz = 1000. /. (t' -. !ti) in\n         if !fps = 0. then hz else (0.9 *. !fps) +. (0.1 *. hz));\n      rateText##.data := Js.string (Printf.sprintf \"%.2f\" !fps);\n      ti := t';\n      Lwt_js.sleep 0.01\n      >>= fun () ->\n      let t' = (new%js Js.date_now)##getTime in\n      let dt = t' -. t in\n      let dt = if dt < 0. then 0. else if dt > 1000. then 0. else dt in\n      let angle = 2. *. pi *. dt /. 1000. /. 10. in\n      (*\nif true then Lwt.return () else\n*)\n      if (not !paused) && !follow then phi_rot := !phi_rot +. angle;\n      loop t' (if !paused then phi else phi +. angle)\n    in\n    loop (new%js Js.date_now)##getTime 0.);\n  Js._false\n\nlet _ = Html.window##.onload := Html.handler start\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Padding position. *)\ntype padty =\n  | Left   (* Text is left justified ('-' option).               *)\n  | Right  (* Text is right justified (no '-' option).           *)\n  | Zeros  (* Text is right justified by zeros (see '0' option). *)\n\n(***)\n\n(* Integer conversion. *)\ntype int_conv =\n  | Int_d | Int_pd | Int_sd        (*  %d | %+d | % d  *)\n  | Int_i | Int_pi | Int_si        (*  %i | %+i | % i  *)\n  | Int_x | Int_Cx                 (*  %x | %#x        *)\n  | Int_X | Int_CX                 (*  %X | %#X        *)\n  | Int_o | Int_Co                 (*  %o | %#o        *)\n  | Int_u                          (*  %u              *)\n\n(* Float conversion. *)\ntype float_conv =\n  | Float_f | Float_pf | Float_sf  (*  %f | %+f | % f  *)\n  | Float_e | Float_pe | Float_se  (*  %e | %+e | % e  *)\n  | Float_E | Float_pE | Float_sE  (*  %E | %+E | % E  *)\n  | Float_g | Float_pg | Float_sg  (*  %g | %+g | % g  *)\n  | Float_G | Float_pG | Float_sG  (*  %G | %+G | % G  *)\n  | Float_F                        (*  %F              *)\n  | Float_h | Float_ph | Float_sh  (*  %h | %+h | % h  *)\n  | Float_H | Float_pH | Float_sH  (*  %H | %+H | % H  *)\n\n(***)\n\n(* Char sets (see %[...]) are bitmaps implemented as 32-char strings. *)\ntype char_set = string\n\n(***)\n\n(* Counter used in Scanf. *)\ntype counter =\n  | Line_counter     (*  %l      *)\n  | Char_counter     (*  %n      *)\n  | Token_counter    (*  %N, %L  *)\n\n(***)\n\n(* Padding of strings and numbers. *)\ntype ('a, 'b) padding =\n  (* No padding (ex: \"%d\") *)\n  | No_padding  : ('a, 'a) padding\n  (* Literal padding (ex: \"%8d\") *)\n  | Lit_padding : padty * int -> ('a, 'a) padding\n  (* Padding as extra argument (ex: \"%*d\") *)\n  | Arg_padding : padty -> (int -> 'a, 'a) padding\n\n(* Some formats, such as %_d,\n   only accept an optional number as padding option (no extra argument) *)\ntype pad_option = int option\n\n(* Precision of floats and '0'-padding of integers. *)\ntype ('a, 'b) precision =\n  (* No precision (ex: \"%f\") *)\n  | No_precision : ('a, 'a) precision\n  (* Literal precision (ex: \"%.3f\") *)\n  | Lit_precision : int -> ('a, 'a) precision\n  (* Precision as extra argument (ex: \"%.*f\") *)\n  | Arg_precision : (int -> 'a, 'a) precision\n\n(* Some formats, such as %_f,\n   only accept an optional number as precision option (no extra argument) *)\ntype prec_option = int option\n\n(* see the Custom format combinator *)\ntype ('a, 'b, 'c) custom_arity =\n  | Custom_zero : ('a, string, 'a) custom_arity\n  | Custom_succ : ('a, 'b, 'c) custom_arity ->\n    ('a, 'x -> 'b, 'x -> 'c) custom_arity\n\n(***)\n\n(*        Relational format types\n\nIn the first format+gadts implementation, the type for %(..%) in the\nfmt GADT was as follows:\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option * ('d1, 'q1, 'd2, 'q2) reader_nb_unifier *\n    ('x, 'b, 'c, 'd1, 'q1, 'u) fmtty *\n    ('u, 'b, 'c, 'q1, 'e1, 'f) fmt ->\n      (('x, 'b, 'c, 'd2, 'q2, 'u) format6 -> 'x, 'b, 'c, 'd1, 'e1, 'f) fmt\n\nNotice that the 'u parameter in 'f position in the format argument\n(('x, .., 'u) format6 -> ..) is equal to the 'u parameter in 'a\nposition in the format tail (('u, .., 'f) fmt). This means that the\ntype of the expected format parameter depends of where the %(...%)\nare in the format string:\n\n  # Printf.printf \"%(%)\"\n  - : (unit, out_channel, unit, '_a, '_a, unit)\n      CamlinternalFormatBasics.format6 -> unit\n  = <fun>\n  # Printf.printf \"%(%)%d\"\n  - : (int -> unit, out_channel, unit, '_a, '_a, int -> unit)\n      CamlinternalFormatBasics.format6 -> int -> unit\n  = <fun>\n\nOn the contrary, the legacy typer gives a clever type that does not\ndepend on the position of %(..%) in the format string. For example,\n%(%) will have the polymorphic type ('a, 'b, 'c, 'd, 'd, 'a): it can\nbe concatenated to any format type, and only enforces the constraint\nthat its 'a and 'f parameters are equal (no format arguments) and 'd\nand 'e are equal (no reader argument).\n\nThe weakening of this parameter type in the GADT version broke user\ncode (in fact it essentially made %(...%) unusable except at the last\nposition of a format). In particular, the following would not work\nanymore:\n\n  fun sep ->\n    Format.printf \"foo%(%)bar%(%)baz\" sep sep\n\nAs the type-checker would require two *incompatible* types for the %(%)\nin different positions.\n\nThe solution to regain a general type for %(..%) is to generalize this\ntechnique, not only on the 'd, 'e parameters, but on all six\nparameters of a format: we introduce a \"relational\" type\n  ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n   'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\nwhose values are proofs that ('a1, .., 'f1) and ('a2, .., 'f2) morally\ncorrespond to the same format type: 'a1 is obtained from 'f1,'b1,'c1\nin the exact same way that 'a2 is obtained from 'f2,'b2,'c2, etc.\n\nFor example, the relation between two format types beginning with a Char\nparameter is as follows:\n\n| Char_ty :                                                 (* %c  *)\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\nIn the general case, the term structure of fmtty_rel is (almost[1])\nisomorphic to the fmtty of the previous implementation: every\nconstructor is re-read with a binary, relational type, instead of the\nprevious unary typing. fmtty can then be re-defined as the diagonal of\nfmtty_rel:\n\n  type ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n       ('a, 'b, 'c, 'd, 'e, 'f,\n        'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\n\nOnce we have this fmtty_rel type in place, we can give the more\ngeneral type to %(...%):\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n    ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\nWe accept any format (('g, 'h, 'i, 'j, 'k, 'l) format6) (this is\ncompletely unrelated to the type of the current format), but also\nrequire a proof that this format is in relation to another format that\nis concatenable to the format tail. When executing a %(...%) format\n(in camlinternalFormat.ml:make_printf or scanf.ml:make_scanf), we\ntranstype the format along this relation using the 'recast' function\nto transpose between related format types.\n\n  val recast :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1) fmt\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmt\n\nNOTE [1]: the typing of Format_subst_ty requires not one format type, but\ntwo, one to establish the link between the format argument and the\nfirst six parameters, and the other for the link between the format\nargument and the last six parameters.\n\n| Format_subst_ty :                                         (* %(...%) *)\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n     ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2) fmtty_rel\n\nWhen we generate a format AST, we generate exactly the same witness\nfor both relations, and the witness-conversion functions in\ncamlinternalFormat do rely on this invariant. For example, the\nfunction that proves that the relation is transitive\n\n  val trans :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n\ndoes assume that the two inputs have exactly the same term structure\n(and is only every used for argument witnesses of the\nFormat_subst_ty constructor).\n*)\n\n(* Type of a block used by the Format pretty-printer. *)\ntype block_type =\n  | Pp_hbox   (* Horizontal block no line breaking *)\n  | Pp_vbox   (* Vertical block each break leads to a new line *)\n  | Pp_hvbox  (* Horizontal-vertical block: same as vbox, except if this block\n                 is small enough to fit on a single line *)\n  | Pp_hovbox (* Horizontal or Vertical block: breaks lead to new line\n                 only when necessary to print the content of the block *)\n  | Pp_box    (* Horizontal or Indent block: breaks lead to new line\n                 only when necessary to print the content of the block, or\n                 when it leads to a new indentation of the current line *)\n  | Pp_fits   (* Internal usage: when a block fits on a single line *)\n\n(* Formatting element used by the Format pretty-printer. *)\ntype formatting_lit =\n  | Close_box                                           (* @]   *)\n  | Close_tag                                           (* @}   *)\n  | Break of string * int * int          (* @, | @  | @; | @;<> *)\n  | FFlush                                              (* @?   *)\n  | Force_newline                                       (* @\\n  *)\n  | Flush_newline                                       (* @.   *)\n  | Magic_size of string * int                          (* @<n> *)\n  | Escaped_at                                          (* @@   *)\n  | Escaped_percent                                     (* @%%  *)\n  | Scan_indic of char                                  (* @X   *)\n\n(* Formatting element used by the Format pretty-printer. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen =\n  | Open_tag : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @{   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n  | Open_box : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @[   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n\n(***)\n\n(* List of format type elements. *)\n(* In particular used to represent %(...%) and %{...%} contents. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n     ('a, 'b, 'c, 'd, 'e, 'f,\n      'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\nand ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel =\n  | Char_ty :                                                 (* %c  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | String_ty :                                               (* %s  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (string -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       string -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int_ty :                                                  (* %d  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int32_ty :                                                (* %ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int32 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int32 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Nativeint_ty :                                            (* %nd *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (nativeint -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       nativeint -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int64_ty :                                                (* %Ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int64 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int64 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Float_ty :                                                (* %f  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (float -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       float -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Bool_ty :                                                 (* %B  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (bool -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       bool -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  | Format_arg_ty :                                           (* %{...%} *)\n      ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)\n           fmtty_rel\n  | Format_subst_ty :                                         (* %(...%) *)\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2)\n           fmtty_rel\n\n  (* Printf and Format specific constructors. *)\n  | Alpha_ty :                                                (* %a  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'x -> 'c1) -> 'x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'x -> 'c2) -> 'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Theta_ty :                                                (* %t  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'c1) -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'c2) -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Any_ty :                                    (* Used for custom formats *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  (* Scanf specific constructor. *)\n  | Reader_ty :                                               (* %r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n  | Ignored_reader_ty :                                       (* %_r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n\n  | End_of_fmtty :\n      ('f1, 'b1, 'c1, 'd1, 'd1, 'f1,\n       'f2, 'b2, 'c2, 'd2, 'd2, 'f2) fmtty_rel\n\n(***)\n\n(* List of format elements. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmt =\n  | Char :                                                   (* %c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_char :                                              (* %C *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | String :                                                 (* %s *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_string :                                            (* %S *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int :                                                    (* %[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int32 :                                                  (* %l[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int32 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Nativeint :                                              (* %n[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, nativeint -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int64 :                                                  (* %L[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int64 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Float :                                                  (* %[feEgGF] *)\n      float_conv * ('x, 'y) padding * ('y, float -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Bool :                                                   (* %[bB] *)\n      ('x, bool -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Flush :                                                  (* %! *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | String_literal :                                         (* abc *)\n      string * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Char_literal :                                           (* x *)\n      char * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | Format_arg :                                             (* %{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Format_subst :                                           (* %(...%) *)\n      pad_option *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\n  (* Printf and Format specific constructor. *)\n  | Alpha :                                                  (* %a *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'x -> 'c) -> 'x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Theta :                                                  (* %t *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'c) -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Format specific constructor: *)\n  | Formatting_lit :                                         (* @_ *)\n      formatting_lit * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Formatting_gen :                                             (* @_ *)\n      ('a1, 'b, 'c, 'd1, 'e1, 'f1) formatting_gen *\n      ('f1, 'b, 'c, 'e1, 'e2, 'f2) fmt -> ('a1, 'b, 'c, 'd1, 'e2, 'f2) fmt\n\n  (* Scanf specific constructors: *)\n  | Reader :                                                 (* %r *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x -> 'a, 'b, 'c, ('b -> 'x) -> 'd, 'e, 'f) fmt\n  | Scan_char_set :                                          (* %[...] *)\n      pad_option * char_set * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (string -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_get_counter :                                       (* %[nlNL] *)\n      counter * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (int -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_next_char :                                         (* %0c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Ignored_param :                                          (* %_ *)\n      ('a, 'b, 'c, 'd, 'y, 'x) ignored * ('x, 'b, 'c, 'y, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Custom printing format (PR#6452, GPR#140)\n\n     We include a type Custom of \"custom converters\", where an\n     arbitrary function can be used to convert one or more\n     arguments. There is no syntax for custom converters, it is only\n     intended for custom processors that wish to rely on the\n     stdlib-defined format GADTs.\n\n     For instance a pre-processor could choose to interpret strings\n     prefixed with [\"!\"] as format strings where [%{{ ... }}] is\n     a special form to pass a to_string function, so that one could\n     write:\n\n     {[\n       type t = { x : int; y : int }\n\n       let string_of_t t = Printf.sprintf \"{ x = %d; y = %d }\" t.x t.y\n\n       Printf.printf !\"t = %{{string_of_t}}\" { x = 42; y = 42 }\n     ]}\n  *)\n  | Custom :\n      ('a, 'x, 'y) custom_arity * (unit -> 'x) * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      ('y, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* end of a format specification *)\n  | End_of_format :\n        ('f, 'b, 'c, 'e, 'e, 'f) fmt\n\n(***)\n\n(* Type for ignored parameters (see \"%_\"). *)\nand ('a, 'b, 'c, 'd, 'e, 'f) ignored =\n  | Ignored_char :                                           (* %_c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_char :                                      (* %_C *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_string :                                         (* %_s *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_string :                                    (* %_S *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int :                                            (* %_d *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int32 :                                          (* %_ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_nativeint :                                      (* %_nd *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int64 :                                          (* %_Ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_float :                                          (* %_f *)\n      pad_option * prec_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_bool :                                           (* %_B *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_arg :                                     (* %_{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty ->\n        ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_subst :                                   (* %_(...%) *)\n      pad_option * ('a, 'b, 'c, 'd, 'e, 'f) fmtty ->\n        ('a, 'b, 'c, 'd, 'e, 'f) ignored\n  | Ignored_reader :                                         (* %_r *)\n      ('a, 'b, 'c, ('b -> 'x) -> 'd, 'd, 'a) ignored\n  | Ignored_scan_char_set :                                  (* %_[...] *)\n      pad_option * char_set -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_get_counter :                               (* %_[nlNL] *)\n      counter -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_next_char :                                 (* %_0c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n\nand ('a, 'b, 'c, 'd, 'e, 'f) format6 =\n  Format of ('a, 'b, 'c, 'd, 'e, 'f) fmt * string\n\nlet rec erase_rel : type a b c d e f g h i j k l .\n  (a, b, c, d, e, f,\n   g, h, i, j, k, l) fmtty_rel -> (a, b, c, d, e, f) fmtty\n= function\n  | Char_ty rest ->\n    Char_ty (erase_rel rest)\n  | String_ty rest ->\n    String_ty (erase_rel rest)\n  | Int_ty rest ->\n    Int_ty (erase_rel rest)\n  | Int32_ty rest ->\n    Int32_ty (erase_rel rest)\n  | Int64_ty rest ->\n    Int64_ty (erase_rel rest)\n  | Nativeint_ty rest ->\n    Nativeint_ty (erase_rel rest)\n  | Float_ty rest ->\n    Float_ty (erase_rel rest)\n  | Bool_ty rest ->\n    Bool_ty (erase_rel rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, erase_rel rest)\n  | Format_subst_ty (ty1, _ty2, rest) ->\n    Format_subst_ty (ty1, ty1, erase_rel rest)\n  | Alpha_ty rest ->\n    Alpha_ty (erase_rel rest)\n  | Theta_ty rest ->\n    Theta_ty (erase_rel rest)\n  | Any_ty rest ->\n    Any_ty (erase_rel rest)\n  | Reader_ty rest ->\n    Reader_ty (erase_rel rest)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (erase_rel rest)\n  | End_of_fmtty -> End_of_fmtty\n\n(******************************************************************************)\n                         (* Format type concatenation *)\n\n(* Concatenate two format types. *)\n(* Used by:\n   * reader_nb_unifier_of_fmtty to count readers in an fmtty,\n   * Scanf.take_fmtty_format_readers to extract readers inside %(...%),\n   * CamlinternalFormat.fmtty_of_ignored_format to extract format type. *)\n\n(*\nlet rec concat_fmtty : type a b c d e f g h .\n    (a, b, c, d, e, f) fmtty ->\n    (f, b, c, e, g, h) fmtty ->\n    (a, b, c, d, g, h) fmtty =\n*)\nlet rec concat_fmtty :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n       g1 j1 g2 j2\n  .\n    (g1, b1, c1, j1, d1, a1,\n     g2, b2, c2, j2, d2, a2) fmtty_rel ->\n    (a1, b1, c1, d1, e1, f1,\n     a2, b2, c2, d2, e2, f2) fmtty_rel ->\n    (g1, b1, c1, j1, e1, f1,\n     g2, b2, c2, j2, e2, f2) fmtty_rel =\nfun fmtty1 fmtty2 -> match fmtty1 with\n  | Char_ty rest ->\n    Char_ty (concat_fmtty rest fmtty2)\n  | String_ty rest ->\n    String_ty (concat_fmtty rest fmtty2)\n  | Int_ty rest ->\n    Int_ty (concat_fmtty rest fmtty2)\n  | Int32_ty rest ->\n    Int32_ty (concat_fmtty rest fmtty2)\n  | Nativeint_ty rest ->\n    Nativeint_ty (concat_fmtty rest fmtty2)\n  | Int64_ty rest ->\n    Int64_ty (concat_fmtty rest fmtty2)\n  | Float_ty rest ->\n    Float_ty (concat_fmtty rest fmtty2)\n  | Bool_ty rest ->\n    Bool_ty (concat_fmtty rest fmtty2)\n  | Alpha_ty rest ->\n    Alpha_ty (concat_fmtty rest fmtty2)\n  | Theta_ty rest ->\n    Theta_ty (concat_fmtty rest fmtty2)\n  | Any_ty rest ->\n    Any_ty (concat_fmtty rest fmtty2)\n  | Reader_ty rest ->\n    Reader_ty (concat_fmtty rest fmtty2)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (concat_fmtty rest fmtty2)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, concat_fmtty rest fmtty2)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty1, ty2, concat_fmtty rest fmtty2)\n  | End_of_fmtty -> fmtty2\n\n(******************************************************************************)\n                           (* Format concatenation *)\n\n(* Concatenate two formats. *)\nlet rec concat_fmt : type a b c d e f g h .\n    (a, b, c, d, e, f) fmt ->\n    (f, b, c, e, g, h) fmt ->\n    (a, b, c, d, g, h) fmt =\nfun fmt1 fmt2 -> match fmt1 with\n  | String (pad, rest) ->\n    String (pad, concat_fmt rest fmt2)\n  | Caml_string (pad, rest) ->\n    Caml_string (pad, concat_fmt rest fmt2)\n\n  | Int (iconv, pad, prec, rest) ->\n    Int (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int32 (iconv, pad, prec, rest) ->\n    Int32 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Nativeint (iconv, pad, prec, rest) ->\n    Nativeint (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int64 (iconv, pad, prec, rest) ->\n    Int64 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Float (fconv, pad, prec, rest) ->\n    Float (fconv, pad, prec, concat_fmt rest fmt2)\n\n  | Char (rest) ->\n    Char (concat_fmt rest fmt2)\n  | Caml_char rest ->\n    Caml_char (concat_fmt rest fmt2)\n  | Bool (pad, rest) ->\n    Bool (pad, concat_fmt rest fmt2)\n  | Alpha rest ->\n    Alpha (concat_fmt rest fmt2)\n  | Theta rest ->\n    Theta (concat_fmt rest fmt2)\n  | Custom (arity, f, rest) ->\n    Custom (arity, f, concat_fmt rest fmt2)\n  | Reader rest ->\n    Reader (concat_fmt rest fmt2)\n  | Flush rest ->\n    Flush (concat_fmt rest fmt2)\n\n  | String_literal (str, rest) ->\n    String_literal (str, concat_fmt rest fmt2)\n  | Char_literal (chr, rest) ->\n    Char_literal   (chr, concat_fmt rest fmt2)\n\n  | Format_arg (pad, fmtty, rest) ->\n    Format_arg   (pad, fmtty, concat_fmt rest fmt2)\n  | Format_subst (pad, fmtty, rest) ->\n    Format_subst (pad, fmtty, concat_fmt rest fmt2)\n\n  | Scan_char_set (width_opt, char_set, rest) ->\n    Scan_char_set (width_opt, char_set, concat_fmt rest fmt2)\n  | Scan_get_counter (counter, rest) ->\n    Scan_get_counter (counter, concat_fmt rest fmt2)\n  | Scan_next_char (rest) ->\n    Scan_next_char (concat_fmt rest fmt2)\n  | Ignored_param (ign, rest) ->\n    Ignored_param (ign, concat_fmt rest fmt2)\n\n  | Formatting_lit (fmting_lit, rest) ->\n    Formatting_lit (fmting_lit, concat_fmt rest fmt2)\n  | Formatting_gen (fmting_gen, rest) ->\n    Formatting_gen (fmting_gen, concat_fmt rest fmt2)\n\n  | End_of_format ->\n    fmt2\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in string.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in string.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : bytes -> int = \"%bytes_length\"\nexternal string_length : string -> int = \"%string_length\"\nexternal get : bytes -> int -> char = \"%bytes_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%bytes_safe_set\"\nexternal create : int -> bytes = \"caml_create_bytes\"\nexternal unsafe_get : bytes -> int -> char = \"%bytes_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%bytes_unsafe_set\"\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_bytes\" [@@noalloc]\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\nexternal unsafe_of_string : string -> bytes = \"%bytes_of_string\"\n\nexternal unsafe_blit : bytes -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_bytes\" [@@noalloc]\nexternal unsafe_blit_string : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\n\nlet make n c =\n  let s = create n in\n  unsafe_fill s 0 n c;\n  s\n\nlet init n f =\n  let s = create n in\n  for i = 0 to n - 1 do\n    unsafe_set s i (f i)\n  done;\n  s\n\nlet empty = create 0\n\nlet copy s =\n  let len = length s in\n  let r = create len in\n  unsafe_blit s 0 r 0 len;\n  r\n\nlet to_string b = unsafe_to_string (copy b)\nlet of_string s = copy (unsafe_of_string s)\n\nlet sub s ofs len =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.sub / Bytes.sub\"\n  else begin\n    let r = create len in\n    unsafe_blit s ofs r 0 len;\n    r\n  end\n\nlet sub_string b ofs len = unsafe_to_string (sub b ofs len)\n\n(* addition with an overflow check *)\nlet (++) a b =\n  let c = a + b in\n  match a < 0, b < 0, c < 0 with\n  | true , true , false\n  | false, false, true  -> invalid_arg \"Bytes.extend\" (* overflow *)\n  | _ -> c\n\nlet extend s left right =\n  let len = length s ++ left ++ right in\n  let r = create len in\n  let (srcoff, dstoff) = if left < 0 then -left, 0 else 0, left in\n  let cpylen = min (length s - srcoff) (len - dstoff) in\n  if cpylen > 0 then unsafe_blit s srcoff r dstoff cpylen;\n  r\n\nlet fill s ofs len c =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.fill / Bytes.fill\"\n  else unsafe_fill s ofs len c\n\nlet blit s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"Bytes.blit\"\n  else unsafe_blit s1 ofs1 s2 ofs2 len\n\nlet blit_string s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > string_length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"String.blit / Bytes.blit_string\"\n  else unsafe_blit_string s1 ofs1 s2 ofs2 len\n\n(* duplicated in string.ml *)\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\n(* duplicated in string.ml *)\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet ensure_ge (x:int) y = if x >= y then x else invalid_arg \"Bytes.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> empty\n  | l -> let seplen = length sep in\n          unsafe_blits\n            (create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\nlet cat s1 s2 =\n  let l1 = length s1 in\n  let l2 = length s2 in\n  let r = create (l1 + l2) in\n  unsafe_blit s1 0 r 0 l1;\n  unsafe_blit s2 0 r l1 l2;\n  r\n\n\nexternal char_code: char -> int = \"%identity\"\nexternal char_chr: int -> char = \"%identity\"\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  let len = length s in\n  let i = ref 0 in\n  while !i < len && is_space (unsafe_get s !i) do\n    incr i\n  done;\n  let j = ref (len - 1) in\n  while !j >= !i && is_space (unsafe_get s !j) do\n    decr j\n  done;\n  if !j >= !i then\n    sub s !i (!j - !i + 1)\n  else\n    empty\n\nlet escaped s =\n  let n = ref 0 in\n  for i = 0 to length s - 1 do\n    n := !n +\n      (match unsafe_get s i with\n       | '\\\"' | '\\\\' | '\\n' | '\\t' | '\\r' | '\\b' -> 2\n       | ' ' .. '~' -> 1\n       | _ -> 4)\n  done;\n  if !n = length s then copy s else begin\n    let s' = create !n in\n    n := 0;\n    for i = 0 to length s - 1 do\n      begin match unsafe_get s i with\n      | ('\\\"' | '\\\\') as c ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n c\n      | '\\n' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'n'\n      | '\\t' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 't'\n      | '\\r' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'r'\n      | '\\b' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'b'\n      | (' ' .. '~') as c -> unsafe_set s' !n c\n      | c ->\n          let a = char_code c in\n          unsafe_set s' !n '\\\\';\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a / 100));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + (a / 10) mod 10));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a mod 10));\n      end;\n      incr n\n    done;\n    s'\n  end\n\nlet map f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f (unsafe_get s i)) done;\n    r\n  end\n\nlet mapi f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f i (unsafe_get s i)) done;\n    r\n  end\n\nlet uppercase_ascii s = map Char.uppercase_ascii s\nlet lowercase_ascii s = map Char.lowercase_ascii s\n\nlet apply1 f s =\n  if length s = 0 then s else begin\n    let r = copy s in\n    unsafe_set r 0 (f(unsafe_get s 0));\n    r\n  end\n\nlet capitalize_ascii s = apply1 Char.uppercase_ascii s\nlet uncapitalize_ascii s = apply1 Char.lowercase_ascii s\n\n(* duplicated in string.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in string.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in string.ml *)\nlet rec index_rec_opt s lim i c =\n  if i >= lim then None else\n  if unsafe_get s i = c then Some i else index_rec_opt s lim (i + 1) c\n\n(* duplicated in string.ml *)\nlet index_opt s c = index_rec_opt s (length s) 0 c\n\n(* duplicated in string.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n  index_rec s l i c\n\n(* duplicated in string.ml *)\nlet index_from_opt s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from_opt / Bytes.index_from_opt\" else\n  index_rec_opt s l i c\n\n(* duplicated in string.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in string.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n(* duplicated in string.ml *)\nlet rec rindex_rec_opt s i c =\n  if i < 0 then None else\n  if unsafe_get s i = c then Some i else rindex_rec_opt s (i - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_opt s c = rindex_rec_opt s (length s - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_from_opt s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from_opt / Bytes.rindex_from_opt\"\n  else\n    rindex_rec_opt s i c\n\n\n(* duplicated in string.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n\n(* duplicated in string.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in string.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\n\ntype t = bytes\n\nlet compare (x: t) (y: t) = Pervasives.compare x y\nexternal equal : t -> t -> bool = \"caml_bytes_equal\"\n\n(* Deprecated functions implemented via other deprecated functions *)\n[@@@ocaml.warning \"-3\"]\nlet uppercase s = map Char.uppercase s\nlet lowercase s = map Char.lowercase s\n\nlet capitalize s = apply1 Char.uppercase s\nlet uncapitalize s = apply1 Char.lowercase s\n\n(** {6 Iterators} *)\n\nlet to_seq s =\n  let rec aux i () =\n    if i = length s then Seq.Nil\n    else\n      let x = get s i in\n      Seq.Cons (x, aux (i+1))\n  in\n  aux 0\n\nlet to_seqi s =\n  let rec aux i () =\n    if i = length s then Seq.Nil\n    else\n      let x = get s i in\n      Seq.Cons ((i,x), aux (i+1))\n  in\n  aux 0\n\nlet of_seq i =\n  let n = ref 0 in\n  let buf = ref (make 256 '\\000') in\n  let resize () =\n    (* resize *)\n    let new_len = min (2 * length !buf) Sys.max_string_length in\n    if length !buf = new_len then failwith \"Bytes.of_seq: cannot grow bytes\";\n    let new_buf = make new_len '\\000' in\n    blit !buf 0 new_buf 0 !n;\n    buf := new_buf\n  in\n  Seq.iter\n    (fun c ->\n       if !n = length !buf then resize();\n       set !buf !n c;\n       incr n)\n    i;\n  sub !buf 0 !n\n\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*           Damien Doligez, projet Gallium, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* String operations, based on byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in bytes.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in bytes.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : string -> int = \"%string_length\"\nexternal get : string -> int -> char = \"%string_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%string_safe_set\"\nexternal create : int -> bytes = \"caml_create_string\"\nexternal unsafe_get : string -> int -> char = \"%string_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%string_unsafe_set\"\nexternal unsafe_blit : string -> int ->  bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_string\" [@@noalloc]\n\nmodule B = Bytes\n\nlet bts = B.unsafe_to_string\nlet bos = B.unsafe_of_string\n\nlet make n c =\n  B.make n c |> bts\nlet init n f =\n  B.init n f |> bts\nlet copy s =\n  B.copy (bos s) |> bts\nlet sub s ofs len =\n  B.sub (bos s) ofs len |> bts\nlet fill =\n  B.fill\nlet blit =\n  B.blit_string\n\nlet ensure_ge (x:int) y = if x >= y then x else invalid_arg \"String.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> \"\"\n  | l -> let seplen = length sep in bts @@\n          unsafe_blits\n            (B.create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\n(* duplicated in bytes.ml *)\nlet iter f s =\n  for i = 0 to length s - 1 do f (unsafe_get s i) done\n\n(* duplicated in bytes.ml *)\nlet iteri f s =\n  for i = 0 to length s - 1 do f i (unsafe_get s i) done\n\nlet map f s =\n  B.map f (bos s) |> bts\nlet mapi f s =\n  B.mapi f (bos s) |> bts\n\n(* Beware: we cannot use B.trim or B.escape because they always make a\n   copy, but String.mli spells out some cases where we are not allowed\n   to make a copy. *)\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  if s = \"\" then s\n  else if is_space (unsafe_get s 0) || is_space (unsafe_get s (length s - 1))\n    then bts (B.trim (bos s))\n  else s\n\nlet escaped s =\n  let rec escape_if_needed s n i =\n    if i >= n then s else\n      match unsafe_get s i with\n      | '\\\"' | '\\\\' | '\\000'..'\\031' | '\\127'.. '\\255' -> bts (B.escaped (bos s))\n      | _ -> escape_if_needed s n (i+1)\n  in\n  escape_if_needed s (length s) 0\n\n(* duplicated in bytes.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in bytes.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in bytes.ml *)\nlet rec index_rec_opt s lim i c =\n  if i >= lim then None else\n  if unsafe_get s i = c then Some i else index_rec_opt s lim (i + 1) c\n\n(* duplicated in bytes.ml *)\nlet index_opt s c = index_rec_opt s (length s) 0 c\n\n(* duplicated in bytes.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n    index_rec s l i c\n\n(* duplicated in bytes.ml *)\nlet index_from_opt s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from_opt / Bytes.index_from_opt\" else\n  index_rec_opt s l i c\n\n(* duplicated in bytes.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n(* duplicated in bytes.ml *)\nlet rec rindex_rec_opt s i c =\n  if i < 0 then None else\n  if unsafe_get s i = c then Some i else rindex_rec_opt s (i - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_opt s c = rindex_rec_opt s (length s - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_from_opt s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from_opt / Bytes.rindex_from_opt\"\n  else\n    rindex_rec_opt s i c\n\n(* duplicated in bytes.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n(* duplicated in bytes.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in bytes.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\nlet uppercase_ascii s =\n  B.uppercase_ascii (bos s) |> bts\nlet lowercase_ascii s =\n  B.lowercase_ascii (bos s) |> bts\nlet capitalize_ascii s =\n  B.capitalize_ascii (bos s) |> bts\nlet uncapitalize_ascii s =\n  B.uncapitalize_ascii (bos s) |> bts\n\ntype t = string\n\nlet compare (x: t) (y: t) = Pervasives.compare x y\nexternal equal : string -> string -> bool = \"caml_string_equal\"\n\nlet split_on_char sep s =\n  let r = ref [] in\n  let j = ref (length s) in\n  for i = length s - 1 downto 0 do\n    if unsafe_get s i = sep then begin\n      r := sub s (i + 1) (!j - i - 1) :: !r;\n      j := i\n    end\n  done;\n  sub s 0 !j :: !r\n\n(* Deprecated functions implemented via other deprecated functions *)\n[@@@ocaml.warning \"-3\"]\nlet uppercase s =\n  B.uppercase (bos s) |> bts\nlet lowercase s =\n  B.lowercase (bos s) |> bts\nlet capitalize s =\n  B.capitalize (bos s) |> bts\nlet uncapitalize s =\n  B.uncapitalize (bos s) |> bts\n\n(** {6 Iterators} *)\n\nlet to_seq s = bos s |> B.to_seq\n\nlet to_seqi s = bos s |> B.to_seqi\n\nlet of_seq g = B.of_seq g |> bts\n\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Array operations *)\n\nexternal length : 'a array -> int = \"%array_length\"\nexternal get: 'a array -> int -> 'a = \"%array_safe_get\"\nexternal set: 'a array -> int -> 'a -> unit = \"%array_safe_set\"\nexternal unsafe_get: 'a array -> int -> 'a = \"%array_unsafe_get\"\nexternal unsafe_set: 'a array -> int -> 'a -> unit = \"%array_unsafe_set\"\nexternal make: int -> 'a -> 'a array = \"caml_make_vect\"\nexternal create: int -> 'a -> 'a array = \"caml_make_vect\"\nexternal unsafe_sub : 'a array -> int -> int -> 'a array = \"caml_array_sub\"\nexternal append_prim : 'a array -> 'a array -> 'a array = \"caml_array_append\"\nexternal concat : 'a array list -> 'a array = \"caml_array_concat\"\nexternal unsafe_blit :\n  'a array -> int -> 'a array -> int -> int -> unit = \"caml_array_blit\"\nexternal create_float: int -> float array = \"caml_make_float_vect\"\nlet make_float = create_float\n\nmodule Floatarray = struct\n  external create : int -> floatarray = \"caml_floatarray_create\"\n  external length : floatarray -> int = \"%floatarray_length\"\n  external get : floatarray -> int -> float = \"%floatarray_safe_get\"\n  external set : floatarray -> int -> float -> unit = \"%floatarray_safe_set\"\n  external unsafe_get : floatarray -> int -> float = \"%floatarray_unsafe_get\"\n  external unsafe_set : floatarray -> int -> float -> unit\n      = \"%floatarray_unsafe_set\"\nend\n\nlet init l f =\n  if l = 0 then [||] else\n  if l < 0 then invalid_arg \"Array.init\"\n  (* See #6575. We could also check for maximum array size, but this depends\n     on whether we create a float array or a regular one... *)\n  else\n   let res = create l (f 0) in\n   for i = 1 to pred l do\n     unsafe_set res i (f i)\n   done;\n   res\n\nlet make_matrix sx sy init =\n  let res = create sx [||] in\n  for x = 0 to pred sx do\n    unsafe_set res x (create sy init)\n  done;\n  res\n\nlet create_matrix = make_matrix\n\nlet copy a =\n  let l = length a in if l = 0 then [||] else unsafe_sub a 0 l\n\nlet append a1 a2 =\n  let l1 = length a1 in\n  if l1 = 0 then copy a2\n  else if length a2 = 0 then unsafe_sub a1 0 l1\n  else append_prim a1 a2\n\nlet sub a ofs len =\n  if ofs < 0 || len < 0 || ofs > length a - len\n  then invalid_arg \"Array.sub\"\n  else unsafe_sub a ofs len\n\nlet fill a ofs len v =\n  if ofs < 0 || len < 0 || ofs > length a - len\n  then invalid_arg \"Array.fill\"\n  else for i = ofs to ofs + len - 1 do unsafe_set a i v done\n\nlet blit a1 ofs1 a2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length a1 - len\n             || ofs2 < 0 || ofs2 > length a2 - len\n  then invalid_arg \"Array.blit\"\n  else unsafe_blit a1 ofs1 a2 ofs2 len\n\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\nlet iter2 f a b =\n  if length a <> length b then\n    invalid_arg \"Array.iter2: arrays must have the same length\"\n  else\n    for i = 0 to length a - 1 do f (unsafe_get a i) (unsafe_get b i) done\n\nlet map f a =\n  let l = length a in\n  if l = 0 then [||] else begin\n    let r = create l (f(unsafe_get a 0)) in\n    for i = 1 to l - 1 do\n      unsafe_set r i (f(unsafe_get a i))\n    done;\n    r\n  end\n\nlet map2 f a b =\n  let la = length a in\n  let lb = length b in\n  if la <> lb then\n    invalid_arg \"Array.map2: arrays must have the same length\"\n  else begin\n    if la = 0 then [||] else begin\n      let r = create la (f (unsafe_get a 0) (unsafe_get b 0)) in\n      for i = 1 to la - 1 do\n        unsafe_set r i (f (unsafe_get a i) (unsafe_get b i))\n      done;\n      r\n    end\n  end\n\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet mapi f a =\n  let l = length a in\n  if l = 0 then [||] else begin\n    let r = create l (f 0 (unsafe_get a 0)) in\n    for i = 1 to l - 1 do\n      unsafe_set r i (f i (unsafe_get a i))\n    done;\n    r\n  end\n\nlet to_list a =\n  let rec tolist i res =\n    if i < 0 then res else tolist (i - 1) (unsafe_get a i :: res) in\n  tolist (length a - 1) []\n\n(* Cannot use List.length here because the List module depends on Array. *)\nlet rec list_length accu = function\n  | [] -> accu\n  | _::t -> list_length (succ accu) t\n\nlet of_list = function\n    [] -> [||]\n  | hd::tl as l ->\n      let a = create (list_length 0 l) hd in\n      let rec fill i = function\n          [] -> a\n        | hd::tl -> unsafe_set a i hd; fill (i+1) tl in\n      fill 1 tl\n\nlet fold_left f x a =\n  let r = ref x in\n  for i = 0 to length a - 1 do\n    r := f !r (unsafe_get a i)\n  done;\n  !r\n\nlet fold_right f a x =\n  let r = ref x in\n  for i = length a - 1 downto 0 do\n    r := f (unsafe_get a i) !r\n  done;\n  !r\n\nlet exists p a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if p (unsafe_get a i) then true\n    else loop (succ i) in\n  loop 0\n\nlet for_all p a =\n  let n = length a in\n  let rec loop i =\n    if i = n then true\n    else if p (unsafe_get a i) then loop (succ i)\n    else false in\n  loop 0\n\nlet mem x a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if compare (unsafe_get a i) x = 0 then true\n    else loop (succ i) in\n  loop 0\n\nlet memq x a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if x == (unsafe_get a i) then true\n    else loop (succ i) in\n  loop 0\n\nexception Bottom of int\nlet sort cmp a =\n  let maxson l i =\n    let i31 = i+i+i+1 in\n    let x = ref i31 in\n    if i31+2 < l then begin\n      if cmp (get a i31) (get a (i31+1)) < 0 then x := i31+1;\n      if cmp (get a !x) (get a (i31+2)) < 0 then x := i31+2;\n      !x\n    end else\n      if i31+1 < l && cmp (get a i31) (get a (i31+1)) < 0\n      then i31+1\n      else if i31 < l then i31 else raise (Bottom i)\n  in\n  let rec trickledown l i e =\n    let j = maxson l i in\n    if cmp (get a j) e > 0 then begin\n      set a i (get a j);\n      trickledown l j e;\n    end else begin\n      set a i e;\n    end;\n  in\n  let trickle l i e = try trickledown l i e with Bottom i -> set a i e in\n  let rec bubbledown l i =\n    let j = maxson l i in\n    set a i (get a j);\n    bubbledown l j\n  in\n  let bubble l i = try bubbledown l i with Bottom i -> i in\n  let rec trickleup i e =\n    let father = (i - 1) / 3 in\n    assert (i <> father);\n    if cmp (get a father) e < 0 then begin\n      set a i (get a father);\n      if father > 0 then trickleup father e else set a 0 e;\n    end else begin\n      set a i e;\n    end;\n  in\n  let l = length a in\n  for i = (l + 1) / 3 - 1 downto 0 do trickle l i (get a i); done;\n  for i = l - 1 downto 2 do\n    let e = (get a i) in\n    set a i (get a 0);\n    trickleup (bubble i 0) e;\n  done;\n  if l > 1 then (let e = (get a 1) in set a 1 (get a 0); set a 0 e)\n\n\nlet cutoff = 5\nlet stable_sort cmp a =\n  let merge src1ofs src1len src2 src2ofs src2len dst dstofs =\n    let src1r = src1ofs + src1len and src2r = src2ofs + src2len in\n    let rec loop i1 s1 i2 s2 d =\n      if cmp s1 s2 <= 0 then begin\n        set dst d s1;\n        let i1 = i1 + 1 in\n        if i1 < src1r then\n          loop i1 (get a i1) i2 s2 (d + 1)\n        else\n          blit src2 i2 dst (d + 1) (src2r - i2)\n      end else begin\n        set dst d s2;\n        let i2 = i2 + 1 in\n        if i2 < src2r then\n          loop i1 s1 i2 (get src2 i2) (d + 1)\n        else\n          blit a i1 dst (d + 1) (src1r - i1)\n      end\n    in loop src1ofs (get a src1ofs) src2ofs (get src2 src2ofs) dstofs;\n  in\n  let isortto srcofs dst dstofs len =\n    for i = 0 to len - 1 do\n      let e = (get a (srcofs + i)) in\n      let j = ref (dstofs + i - 1) in\n      while (!j >= dstofs && cmp (get dst !j) e > 0) do\n        set dst (!j + 1) (get dst !j);\n        decr j;\n      done;\n      set dst (!j + 1) e;\n    done;\n  in\n  let rec sortto srcofs dst dstofs len =\n    if len <= cutoff then isortto srcofs dst dstofs len else begin\n      let l1 = len / 2 in\n      let l2 = len - l1 in\n      sortto (srcofs + l1) dst (dstofs + l1) l2;\n      sortto srcofs a (srcofs + l2) l1;\n      merge (srcofs + l2) l1 dst (dstofs + l1) l2 dst dstofs;\n    end;\n  in\n  let l = length a in\n  if l <= cutoff then isortto 0 a 0 l else begin\n    let l1 = l / 2 in\n    let l2 = l - l1 in\n    let t = make l2 (get a 0) in\n    sortto l1 t 0 l2;\n    sortto 0 a l2 l1;\n    merge l2 l1 t 0 l2 a 0;\n  end\n\n\nlet fast_sort = stable_sort\n\n(** {6 Iterators} *)\n\nlet to_seq a =\n  let rec aux i () =\n    if i < length a\n    then\n      let x = unsafe_get a i in\n      Seq.Cons (x, aux (i+1))\n    else Seq.Nil\n  in\n  aux 0\n\nlet to_seqi a =\n  let rec aux i () =\n    if i < length a\n    then\n      let x = unsafe_get a i in\n      Seq.Cons ((i,x), aux (i+1))\n    else Seq.Nil\n  in\n  aux 0\n\nlet of_rev_list = function\n    [] -> [||]\n  | hd::tl as l ->\n      let len = list_length 0 l in\n      let a = create len hd in\n      let rec fill i = function\n          [] -> a\n        | hd::tl -> unsafe_set a i hd; fill (i-1) tl\n      in\n      fill (len-2) tl\n\nlet of_seq i =\n  let l = Seq.fold_left (fun acc x -> x::acc) [] i in\n  of_rev_list l\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nmodule type OrderedType =\n  sig\n    type t\n    val compare: t -> t -> int\n  end\n\nmodule type S =\n  sig\n    type key\n    type +'a t\n    val empty: 'a t\n    val is_empty: 'a t -> bool\n    val mem:  key -> 'a t -> bool\n    val add: key -> 'a -> 'a t -> 'a t\n    val update: key -> ('a option -> 'a option) -> 'a t -> 'a t\n    val singleton: key -> 'a -> 'a t\n    val remove: key -> 'a t -> 'a t\n    val merge:\n          (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t\n    val union: (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t\n    val compare: ('a -> 'a -> int) -> 'a t -> 'a t -> int\n    val equal: ('a -> 'a -> bool) -> 'a t -> 'a t -> bool\n    val iter: (key -> 'a -> unit) -> 'a t -> unit\n    val fold: (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val for_all: (key -> 'a -> bool) -> 'a t -> bool\n    val exists: (key -> 'a -> bool) -> 'a t -> bool\n    val filter: (key -> 'a -> bool) -> 'a t -> 'a t\n    val partition: (key -> 'a -> bool) -> 'a t -> 'a t * 'a t\n    val cardinal: 'a t -> int\n    val bindings: 'a t -> (key * 'a) list\n    val min_binding: 'a t -> (key * 'a)\n    val min_binding_opt: 'a t -> (key * 'a) option\n    val max_binding: 'a t -> (key * 'a)\n    val max_binding_opt: 'a t -> (key * 'a) option\n    val choose: 'a t -> (key * 'a)\n    val choose_opt: 'a t -> (key * 'a) option\n    val split: key -> 'a t -> 'a t * 'a option * 'a t\n    val find: key -> 'a t -> 'a\n    val find_opt: key -> 'a t -> 'a option\n    val find_first: (key -> bool) -> 'a t -> key * 'a\n    val find_first_opt: (key -> bool) -> 'a t -> (key * 'a) option\n    val find_last: (key -> bool) -> 'a t -> key * 'a\n    val find_last_opt: (key -> bool) -> 'a t -> (key * 'a) option\n    val map: ('a -> 'b) -> 'a t -> 'b t\n    val mapi: (key -> 'a -> 'b) -> 'a t -> 'b t\n    val to_seq : 'a t -> (key * 'a) Seq.t\n    val to_seq_from : key -> 'a t -> (key * 'a) Seq.t\n    val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t\n    val of_seq : (key * 'a) Seq.t -> 'a t\n  end\n\nmodule Make(Ord: OrderedType) = struct\n\n    type key = Ord.t\n\n    type 'a t =\n        Empty\n      | Node of {l:'a t; v:key; d:'a; r:'a t; h:int}\n\n    let height = function\n        Empty -> 0\n      | Node {h} -> h\n\n    let create l x d r =\n      let hl = height l and hr = height r in\n      Node{l; v=x; d; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    let singleton x d = Node{l=Empty; v=x; d; r=Empty; h=1}\n\n    let bal l x d r =\n      let hl = match l with Empty -> 0 | Node {h} -> h in\n      let hr = match r with Empty -> 0 | Node {h} -> h in\n      if hl > hr + 2 then begin\n        match l with\n          Empty -> invalid_arg \"Map.bal\"\n        | Node{l=ll; v=lv; d=ld; r=lr} ->\n            if height ll >= height lr then\n              create ll lv ld (create lr x d r)\n            else begin\n              match lr with\n                Empty -> invalid_arg \"Map.bal\"\n              | Node{l=lrl; v=lrv; d=lrd; r=lrr}->\n                  create (create ll lv ld lrl) lrv lrd (create lrr x d r)\n            end\n      end else if hr > hl + 2 then begin\n        match r with\n          Empty -> invalid_arg \"Map.bal\"\n        | Node{l=rl; v=rv; d=rd; r=rr} ->\n            if height rr >= height rl then\n              create (create l x d rl) rv rd rr\n            else begin\n              match rl with\n                Empty -> invalid_arg \"Map.bal\"\n              | Node{l=rll; v=rlv; d=rld; r=rlr} ->\n                  create (create l x d rll) rlv rld (create rlr rv rd rr)\n            end\n      end else\n        Node{l; v=x; d; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    let empty = Empty\n\n    let is_empty = function Empty -> true | _ -> false\n\n    let rec add x data = function\n        Empty ->\n          Node{l=Empty; v=x; d=data; r=Empty; h=1}\n      | Node {l; v; d; r; h} as m ->\n          let c = Ord.compare x v in\n          if c = 0 then\n            if d == data then m else Node{l; v=x; d=data; r; h}\n          else if c < 0 then\n            let ll = add x data l in\n            if l == ll then m else bal ll v d r\n          else\n            let rr = add x data r in\n            if r == rr then m else bal l v d rr\n\n    let rec find x = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then d\n          else find x (if c < 0 then l else r)\n\n    let rec find_first_aux v0 d0 f = function\n        Empty ->\n          (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_aux v d f l\n          else\n            find_first_aux v0 d0 f r\n\n    let rec find_first f = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_aux v d f l\n          else\n            find_first f r\n\n    let rec find_first_opt_aux v0 d0 f = function\n        Empty ->\n          Some (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_opt_aux v d f l\n          else\n            find_first_opt_aux v0 d0 f r\n\n    let rec find_first_opt f = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_opt_aux v d f l\n          else\n            find_first_opt f r\n\n    let rec find_last_aux v0 d0 f = function\n        Empty ->\n          (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_aux v d f r\n          else\n            find_last_aux v0 d0 f l\n\n    let rec find_last f = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_aux v d f r\n          else\n            find_last f l\n\n    let rec find_last_opt_aux v0 d0 f = function\n        Empty ->\n          Some (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_opt_aux v d f r\n          else\n            find_last_opt_aux v0 d0 f l\n\n    let rec find_last_opt f = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_opt_aux v d f r\n          else\n            find_last_opt f l\n\n    let rec find_opt x = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then Some d\n          else find_opt x (if c < 0 then l else r)\n\n    let rec mem x = function\n        Empty ->\n          false\n      | Node {l; v; r} ->\n          let c = Ord.compare x v in\n          c = 0 || mem x (if c < 0 then l else r)\n\n    let rec min_binding = function\n        Empty -> raise Not_found\n      | Node {l=Empty; v; d} -> (v, d)\n      | Node {l} -> min_binding l\n\n    let rec min_binding_opt = function\n        Empty -> None\n      | Node {l=Empty; v; d} -> Some (v, d)\n      | Node {l}-> min_binding_opt l\n\n    let rec max_binding = function\n        Empty -> raise Not_found\n      | Node {v; d; r=Empty} -> (v, d)\n      | Node {r} -> max_binding r\n\n    let rec max_binding_opt = function\n        Empty -> None\n      | Node {v; d; r=Empty} -> Some (v, d)\n      | Node {r} -> max_binding_opt r\n\n    let rec remove_min_binding = function\n        Empty -> invalid_arg \"Map.remove_min_elt\"\n      | Node {l=Empty; r} -> r\n      | Node {l; v; d; r} -> bal (remove_min_binding l) v d r\n\n    let merge t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) ->\n          let (x, d) = min_binding t2 in\n          bal t1 x d (remove_min_binding t2)\n\n    let rec remove x = function\n        Empty ->\n          Empty\n      | (Node {l; v; d; r} as m) ->\n          let c = Ord.compare x v in\n          if c = 0 then merge l r\n          else if c < 0 then\n            let ll = remove x l in if l == ll then m else bal ll v d r\n          else\n            let rr = remove x r in if r == rr then m else bal l v d rr\n\n    let rec update x f = function\n        Empty ->\n          begin match f None with\n          | None -> Empty\n          | Some data -> Node{l=Empty; v=x; d=data; r=Empty; h=1}\n          end\n      | Node {l; v; d; r; h} as m ->\n          let c = Ord.compare x v in\n          if c = 0 then begin\n            match f (Some d) with\n            | None -> merge l r\n            | Some data ->\n                if d == data then m else Node{l; v=x; d=data; r; h}\n          end else if c < 0 then\n            let ll = update x f l in\n            if l == ll then m else bal ll v d r\n          else\n            let rr = update x f r in\n            if r == rr then m else bal l v d rr\n\n    let rec iter f = function\n        Empty -> ()\n      | Node {l; v; d; r} ->\n          iter f l; f v d; iter f r\n\n    let rec map f = function\n        Empty ->\n          Empty\n      | Node {l; v; d; r; h} ->\n          let l' = map f l in\n          let d' = f d in\n          let r' = map f r in\n          Node{l=l'; v; d=d'; r=r'; h}\n\n    let rec mapi f = function\n        Empty ->\n          Empty\n      | Node {l; v; d; r; h} ->\n          let l' = mapi f l in\n          let d' = f v d in\n          let r' = mapi f r in\n          Node{l=l'; v; d=d'; r=r'; h}\n\n    let rec fold f m accu =\n      match m with\n        Empty -> accu\n      | Node {l; v; d; r} ->\n          fold f r (f v d (fold f l accu))\n\n    let rec for_all p = function\n        Empty -> true\n      | Node {l; v; d; r} -> p v d && for_all p l && for_all p r\n\n    let rec exists p = function\n        Empty -> false\n      | Node {l; v; d; r} -> p v d || exists p l || exists p r\n\n    (* Beware: those two functions assume that the added k is *strictly*\n       smaller (or bigger) than all the present keys in the tree; it\n       does not test for equality with the current min (or max) key.\n\n       Indeed, they are only used during the \"join\" operation which\n       respects this precondition.\n    *)\n\n    let rec add_min_binding k x = function\n      | Empty -> singleton k x\n      | Node {l; v; d; r} ->\n        bal (add_min_binding k x l) v d r\n\n    let rec add_max_binding k x = function\n      | Empty -> singleton k x\n      | Node {l; v; d; r} ->\n        bal l v d (add_max_binding k x r)\n\n    (* Same as create and bal, but no assumptions are made on the\n       relative heights of l and r. *)\n\n    let rec join l v d r =\n      match (l, r) with\n        (Empty, _) -> add_min_binding v d r\n      | (_, Empty) -> add_max_binding v d l\n      | (Node{l=ll; v=lv; d=ld; r=lr; h=lh}, Node{l=rl; v=rv; d=rd; r=rr; h=rh}) ->\n          if lh > rh + 2 then bal ll lv ld (join lr v d r) else\n          if rh > lh + 2 then bal (join l v d rl) rv rd rr else\n          create l v d r\n\n    (* Merge two trees l and r into one.\n       All elements of l must precede the elements of r.\n       No assumption on the heights of l and r. *)\n\n    let concat t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) ->\n          let (x, d) = min_binding t2 in\n          join t1 x d (remove_min_binding t2)\n\n    let concat_or_join t1 v d t2 =\n      match d with\n      | Some d -> join t1 v d t2\n      | None -> concat t1 t2\n\n    let rec split x = function\n        Empty ->\n          (Empty, None, Empty)\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then (l, Some d, r)\n          else if c < 0 then\n            let (ll, pres, rl) = split x l in (ll, pres, join rl v d r)\n          else\n            let (lr, pres, rr) = split x r in (join l v d lr, pres, rr)\n\n    let rec merge f s1 s2 =\n      match (s1, s2) with\n        (Empty, Empty) -> Empty\n      | (Node {l=l1; v=v1; d=d1; r=r1; h=h1}, _) when h1 >= height s2 ->\n          let (l2, d2, r2) = split v1 s2 in\n          concat_or_join (merge f l1 l2) v1 (f v1 (Some d1) d2) (merge f r1 r2)\n      | (_, Node {l=l2; v=v2; d=d2; r=r2}) ->\n          let (l1, d1, r1) = split v2 s1 in\n          concat_or_join (merge f l1 l2) v2 (f v2 d1 (Some d2)) (merge f r1 r2)\n      | _ ->\n          assert false\n\n    let rec union f s1 s2 =\n      match (s1, s2) with\n      | (Empty, s) | (s, Empty) -> s\n      | (Node {l=l1; v=v1; d=d1; r=r1; h=h1}, Node {l=l2; v=v2; d=d2; r=r2; h=h2}) ->\n          if h1 >= h2 then\n            let (l2, d2, r2) = split v1 s2 in\n            let l = union f l1 l2 and r = union f r1 r2 in\n            match d2 with\n            | None -> join l v1 d1 r\n            | Some d2 -> concat_or_join l v1 (f v1 d1 d2) r\n          else\n            let (l1, d1, r1) = split v2 s1 in\n            let l = union f l1 l2 and r = union f r1 r2 in\n            match d1 with\n            | None -> join l v2 d2 r\n            | Some d1 -> concat_or_join l v2 (f v2 d1 d2) r\n\n    let rec filter p = function\n        Empty -> Empty\n      | Node {l; v; d; r} as m ->\n          (* call [p] in the expected left-to-right order *)\n          let l' = filter p l in\n          let pvd = p v d in\n          let r' = filter p r in\n          if pvd then if l==l' && r==r' then m else join l' v d r'\n          else concat l' r'\n\n    let rec partition p = function\n        Empty -> (Empty, Empty)\n      | Node {l; v; d; r} ->\n          (* call [p] in the expected left-to-right order *)\n          let (lt, lf) = partition p l in\n          let pvd = p v d in\n          let (rt, rf) = partition p r in\n          if pvd\n          then (join lt v d rt, concat lf rf)\n          else (concat lt rt, join lf v d rf)\n\n    type 'a enumeration = End | More of key * 'a * 'a t * 'a enumeration\n\n    let rec cons_enum m e =\n      match m with\n        Empty -> e\n      | Node {l; v; d; r} -> cons_enum l (More(v, d, r, e))\n\n    let compare cmp m1 m2 =\n      let rec compare_aux e1 e2 =\n          match (e1, e2) with\n          (End, End) -> 0\n        | (End, _)  -> -1\n        | (_, End) -> 1\n        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->\n            let c = Ord.compare v1 v2 in\n            if c <> 0 then c else\n            let c = cmp d1 d2 in\n            if c <> 0 then c else\n            compare_aux (cons_enum r1 e1) (cons_enum r2 e2)\n      in compare_aux (cons_enum m1 End) (cons_enum m2 End)\n\n    let equal cmp m1 m2 =\n      let rec equal_aux e1 e2 =\n          match (e1, e2) with\n          (End, End) -> true\n        | (End, _)  -> false\n        | (_, End) -> false\n        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->\n            Ord.compare v1 v2 = 0 && cmp d1 d2 &&\n            equal_aux (cons_enum r1 e1) (cons_enum r2 e2)\n      in equal_aux (cons_enum m1 End) (cons_enum m2 End)\n\n    let rec cardinal = function\n        Empty -> 0\n      | Node {l; r} -> cardinal l + 1 + cardinal r\n\n    let rec bindings_aux accu = function\n        Empty -> accu\n      | Node {l; v; d; r} -> bindings_aux ((v, d) :: bindings_aux accu r) l\n\n    let bindings s =\n      bindings_aux [] s\n\n    let choose = min_binding\n\n    let choose_opt = min_binding_opt\n\n    let add_seq i m =\n      Seq.fold_left (fun m (k,v) -> add k v m) m i\n\n    let of_seq i = add_seq i empty\n\n    let rec seq_of_enum_ c () = match c with\n      | End -> Seq.Nil\n      | More (k,v,t,rest) -> Seq.Cons ((k,v), seq_of_enum_ (cons_enum t rest))\n\n    let to_seq m =\n      seq_of_enum_ (cons_enum m End)\n\n    let to_seq_from low m =\n      let rec aux low m c = match m with\n        | Empty -> c\n        | Node {l; v; d; r; _} ->\n            begin match Ord.compare v low with\n              | 0 -> More (v, d, r, c)\n              | n when n<0 -> aux low r c\n              | _ -> aux low l (More (v, d, r, c))\n            end\n      in\n      seq_of_enum_ (aux low m End)\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                 Simon Cruanes                                          *)\n(*                                                                        *)\n(*   Copyright 2017 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Module [Seq]: functional iterators *)\n\ntype +'a node =\n  | Nil\n  | Cons of 'a * 'a t\n\nand 'a t = unit -> 'a node\n\nlet empty () = Nil\n\nlet return x () = Cons (x, empty)\n\nlet rec map f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) -> Cons (f x, map f next)\n\nlet rec filter_map f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) ->\n      match f x with\n        | None -> filter_map f next ()\n        | Some y -> Cons (y, filter_map f next)\n\nlet rec filter f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) ->\n      if f x\n      then Cons (x, filter f next)\n      else filter f next ()\n\nlet rec flat_map f seq () = match seq () with\n  | Nil -> Nil\n  | Cons (x, next) ->\n    flat_map_app f (f x) next ()\n\n(* this is [append seq (flat_map f tail)] *)\nand flat_map_app f seq tail () = match seq () with\n  | Nil -> flat_map f tail ()\n  | Cons (x, next) ->\n    Cons (x, flat_map_app f next tail)\n\nlet fold_left f acc seq =\n  let rec aux f acc seq = match seq () with\n    | Nil -> acc\n    | Cons (x, next) ->\n        let acc = f acc x in\n        aux f acc next\n  in\n  aux f acc seq\n\nlet iter f seq =\n  let rec aux seq = match seq () with\n    | Nil -> ()\n    | Cons (x, next) ->\n        f x;\n        aux next\n  in\n  aux seq\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*         Francois Pottier, projet Cristal, INRIA Rocquencourt           *)\n(*                  Jeremie Dimino, Jane Street Europe                    *)\n(*                                                                        *)\n(*   Copyright 2002 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nexception Empty\n\ntype 'a cell =\n  | Nil\n  | Cons of { content: 'a; mutable next: 'a cell }\n\ntype 'a t = {\n  mutable length: int;\n  mutable first: 'a cell;\n  mutable last: 'a cell\n}\n\nlet create () = {\n  length = 0;\n  first = Nil;\n  last = Nil\n}\n\nlet clear q =\n  q.length <- 0;\n  q.first <- Nil;\n  q.last <- Nil\n\nlet add x q =\n  let cell = Cons {\n    content = x;\n    next = Nil\n  } in\n  match q.last with\n  | Nil ->\n    q.length <- 1;\n    q.first <- cell;\n    q.last <- cell\n  | Cons last ->\n    q.length <- q.length + 1;\n    last.next <- cell;\n    q.last <- cell\n\nlet push =\n  add\n\nlet peek q =\n  match q.first with\n  | Nil -> raise Empty\n  | Cons { content } -> content\n\nlet top =\n  peek\n\nlet take q =\n  match q.first with\n  | Nil -> raise Empty\n  | Cons { content; next = Nil } ->\n    clear q;\n    content\n  | Cons { content; next } ->\n    q.length <- q.length - 1;\n    q.first <- next;\n    content\n\nlet pop =\n  take\n\nlet copy =\n  let rec copy q_res prev cell =\n    match cell with\n    | Nil -> q_res.last <- prev; q_res\n    | Cons { content; next } ->\n      let res = Cons { content; next = Nil } in\n      begin match prev with\n      | Nil -> q_res.first <- res\n      | Cons p -> p.next <- res\n      end;\n      copy q_res res next\n  in\n  fun q -> copy { length = q.length; first = Nil; last = Nil } Nil q.first\n\nlet is_empty q =\n  q.length = 0\n\nlet length q =\n  q.length\n\nlet iter =\n  let rec iter f cell =\n    match cell with\n    | Nil -> ()\n    | Cons { content; next } ->\n      f content;\n      iter f next\n  in\n  fun f q -> iter f q.first\n\nlet fold =\n  let rec fold f accu cell =\n    match cell with\n    | Nil -> accu\n    | Cons { content; next } ->\n      let accu = f accu content in\n      fold f accu next\n  in\n  fun f accu q -> fold f accu q.first\n\nlet transfer q1 q2 =\n  if q1.length > 0 then\n    match q2.last with\n    | Nil ->\n      q2.length <- q1.length;\n      q2.first <- q1.first;\n      q2.last <- q1.last;\n      clear q1\n    | Cons last ->\n      q2.length <- q2.length + q1.length;\n      last.next <- q1.first;\n      q2.last <- q1.last;\n      clear q1\n\n(** {6 Iterators} *)\n\nlet to_seq q =\n  let rec aux c () = match c with\n    | Nil -> Seq.Nil\n    | Cons { content=x; next; } -> Seq.Cons (x, aux next)\n  in\n  aux q.first\n\nlet add_seq q i = Seq.iter (fun x -> push x q) i\n\nlet of_seq g =\n  let q = create() in\n  add_seq q g;\n  q\n\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*    Pierre Weis and Xavier Leroy, projet Cristal, INRIA Rocquencourt    *)\n(*                                                                        *)\n(*   Copyright 1999 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Extensible buffers *)\n\ntype t =\n {mutable buffer : bytes;\n  mutable position : int;\n  mutable length : int;\n  initial_buffer : bytes}\n\nlet create n =\n let n = if n < 1 then 1 else n in\n let n = if n > Sys.max_string_length then Sys.max_string_length else n in\n let s = Bytes.create n in\n {buffer = s; position = 0; length = n; initial_buffer = s}\n\nlet contents b = Bytes.sub_string b.buffer 0 b.position\nlet to_bytes b = Bytes.sub b.buffer 0 b.position\n\nlet sub b ofs len =\n  if ofs < 0 || len < 0 || ofs > b.position - len\n  then invalid_arg \"Buffer.sub\"\n  else Bytes.sub_string b.buffer ofs len\n\n\nlet blit src srcoff dst dstoff len =\n  if len < 0 || srcoff < 0 || srcoff > src.position - len\n             || dstoff < 0 || dstoff > (Bytes.length dst) - len\n  then invalid_arg \"Buffer.blit\"\n  else\n    Bytes.unsafe_blit src.buffer srcoff dst dstoff len\n\n\nlet nth b ofs =\n  if ofs < 0 || ofs >= b.position then\n   invalid_arg \"Buffer.nth\"\n  else Bytes.unsafe_get b.buffer ofs\n\n\nlet length b = b.position\n\nlet clear b = b.position <- 0\n\nlet reset b =\n  b.position <- 0; b.buffer <- b.initial_buffer;\n  b.length <- Bytes.length b.buffer\n\nlet resize b more =\n  let len = b.length in\n  let new_len = ref len in\n  while b.position + more > !new_len do new_len := 2 * !new_len done;\n  if !new_len > Sys.max_string_length then begin\n    if b.position + more <= Sys.max_string_length\n    then new_len := Sys.max_string_length\n    else failwith \"Buffer.add: cannot grow buffer\"\n  end;\n  let new_buffer = Bytes.create !new_len in\n  (* PR#6148: let's keep using [blit] rather than [unsafe_blit] in\n     this tricky function that is slow anyway. *)\n  Bytes.blit b.buffer 0 new_buffer 0 b.position;\n  b.buffer <- new_buffer;\n  b.length <- !new_len\n\nlet add_char b c =\n  let pos = b.position in\n  if pos >= b.length then resize b 1;\n  Bytes.unsafe_set b.buffer pos c;\n  b.position <- pos + 1\n\n let add_utf_8_uchar b u = match Uchar.to_int u with\n | u when u < 0 -> assert false\n | u when u <= 0x007F ->\n     add_char b (Char.unsafe_chr u)\n | u when u <= 0x07FF ->\n     let pos = b.position in\n     if pos + 2 > b.length then resize b 2;\n     Bytes.unsafe_set b.buffer (pos    )\n       (Char.unsafe_chr (0xC0 lor (u lsr 6)));\n     Bytes.unsafe_set b.buffer (pos + 1)\n       (Char.unsafe_chr (0x80 lor (u land 0x3F)));\n     b.position <- pos + 2\n | u when u <= 0xFFFF ->\n     let pos = b.position in\n     if pos + 3 > b.length then resize b 3;\n     Bytes.unsafe_set b.buffer (pos    )\n       (Char.unsafe_chr (0xE0 lor (u lsr 12)));\n     Bytes.unsafe_set b.buffer (pos + 1)\n       (Char.unsafe_chr (0x80 lor ((u lsr 6) land 0x3F)));\n     Bytes.unsafe_set b.buffer (pos + 2)\n       (Char.unsafe_chr (0x80 lor (u land 0x3F)));\n     b.position <- pos + 3\n | u when u <= 0x10FFFF ->\n     let pos = b.position in\n     if pos + 4 > b.length then resize b 4;\n     Bytes.unsafe_set b.buffer (pos    )\n       (Char.unsafe_chr (0xF0 lor (u lsr 18)));\n     Bytes.unsafe_set b.buffer (pos + 1)\n       (Char.unsafe_chr (0x80 lor ((u lsr 12) land 0x3F)));\n     Bytes.unsafe_set b.buffer (pos + 2)\n       (Char.unsafe_chr (0x80 lor ((u lsr 6) land 0x3F)));\n     Bytes.unsafe_set b.buffer (pos + 3)\n       (Char.unsafe_chr (0x80 lor (u land 0x3F)));\n     b.position <- pos + 4\n | _ -> assert false\n\n let add_utf_16be_uchar b u = match Uchar.to_int u with\n | u when u < 0 -> assert false\n | u when u <= 0xFFFF ->\n     let pos = b.position in\n     if pos + 2 > b.length then resize b 2;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (u lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (u land 0xFF));\n     b.position <- pos + 2\n | u when u <= 0x10FFFF ->\n     let u' = u - 0x10000 in\n     let hi = 0xD800 lor (u' lsr 10) in\n     let lo = 0xDC00 lor (u' land 0x3FF) in\n     let pos = b.position in\n     if pos + 4 > b.length then resize b 4;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (hi lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (hi land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 2) (Char.unsafe_chr (lo lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 3) (Char.unsafe_chr (lo land 0xFF));\n     b.position <- pos + 4\n | _ -> assert false\n\n let add_utf_16le_uchar b u = match Uchar.to_int u with\n | u when u < 0 -> assert false\n | u when u <= 0xFFFF ->\n     let pos = b.position in\n     if pos + 2 > b.length then resize b 2;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (u land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (u lsr 8));\n     b.position <- pos + 2\n | u when u <= 0x10FFFF ->\n     let u' = u - 0x10000 in\n     let hi = 0xD800 lor (u' lsr 10) in\n     let lo = 0xDC00 lor (u' land 0x3FF) in\n     let pos = b.position in\n     if pos + 4 > b.length then resize b 4;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (hi land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (hi lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 2) (Char.unsafe_chr (lo land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 3) (Char.unsafe_chr (lo lsr 8));\n     b.position <- pos + 4\n | _ -> assert false\n\nlet add_substring b s offset len =\n  if offset < 0 || len < 0 || offset > String.length s - len\n  then invalid_arg \"Buffer.add_substring/add_subbytes\";\n  let new_position = b.position + len in\n  if new_position > b.length then resize b len;\n  Bytes.blit_string s offset b.buffer b.position len;\n  b.position <- new_position\n\nlet add_subbytes b s offset len =\n  add_substring b (Bytes.unsafe_to_string s) offset len\n\nlet add_string b s =\n  let len = String.length s in\n  let new_position = b.position + len in\n  if new_position > b.length then resize b len;\n  Bytes.blit_string s 0 b.buffer b.position len;\n  b.position <- new_position\n\nlet add_bytes b s = add_string b (Bytes.unsafe_to_string s)\n\nlet add_buffer b bs =\n  add_subbytes b bs.buffer 0 bs.position\n\n(* read up to [len] bytes from [ic] into [b]. *)\nlet rec add_channel_rec b ic len =\n  if len > 0 then (\n    let n = input ic b.buffer b.position len in\n    b.position <- b.position + n;\n    if n = 0 then raise End_of_file\n    else add_channel_rec b ic (len-n)   (* n <= len *)\n  )\n\nlet add_channel b ic len =\n  if len < 0 || len > Sys.max_string_length then   (* PR#5004 *)\n    invalid_arg \"Buffer.add_channel\";\n  if b.position + len > b.length then resize b len;\n  add_channel_rec b ic len\n\nlet output_buffer oc b =\n  output oc b.buffer 0 b.position\n\nlet closing = function\n  | '(' -> ')'\n  | '{' -> '}'\n  | _ -> assert false\n\n(* opening and closing: open and close characters, typically ( and )\n   k: balance of opening and closing chars\n   s: the string where we are searching\n   start: the index where we start the search. *)\nlet advance_to_closing opening closing k s start =\n  let rec advance k i lim =\n    if i >= lim then raise Not_found else\n    if s.[i] = opening then advance (k + 1) (i + 1) lim else\n    if s.[i] = closing then\n      if k = 0 then i else advance (k - 1) (i + 1) lim\n    else advance k (i + 1) lim in\n  advance k start (String.length s)\n\nlet advance_to_non_alpha s start =\n  let rec advance i lim =\n    if i >= lim then lim else\n    match s.[i] with\n    | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' -> advance (i + 1) lim\n    | _ -> i in\n  advance start (String.length s)\n\n(* We are just at the beginning of an ident in s, starting at start. *)\nlet find_ident s start lim =\n  if start >= lim then raise Not_found else\n  match s.[start] with\n  (* Parenthesized ident ? *)\n  | '(' | '{' as c ->\n     let new_start = start + 1 in\n     let stop = advance_to_closing c (closing c) 0 s new_start in\n     String.sub s new_start (stop - start - 1), stop + 1\n  (* Regular ident *)\n  | _ ->\n     let stop = advance_to_non_alpha s (start + 1) in\n     String.sub s start (stop - start), stop\n\n(* Substitute $ident, $(ident), or ${ident} in s,\n    according to the function mapping f. *)\nlet add_substitute b f s =\n  let lim = String.length s in\n  let rec subst previous i =\n    if i < lim then begin\n      match s.[i] with\n      | '$' as current when previous = '\\\\' ->\n         add_char b current;\n         subst ' ' (i + 1)\n      | '$' ->\n         let j = i + 1 in\n         let ident, next_i = find_ident s j lim in\n         add_string b (f ident);\n         subst ' ' next_i\n      | current when previous == '\\\\' ->\n         add_char b '\\\\';\n         add_char b current;\n         subst ' ' (i + 1)\n      | '\\\\' as current ->\n         subst current (i + 1)\n      | current ->\n         add_char b current;\n         subst current (i + 1)\n    end else\n    if previous = '\\\\' then add_char b previous in\n  subst ' ' 0\n\nlet truncate b len =\n    if len < 0 || len > length b then\n      invalid_arg \"Buffer.truncate\"\n    else\n      b.position <- len\n\n(** {6 Iterators} *)\n\nlet to_seq b =\n  let rec aux i () =\n    if i >= b.position then Seq.Nil\n    else\n      let x = Bytes.get b.buffer i in\n      Seq.Cons (x, aux (i+1))\n  in\n  aux 0\n\nlet to_seqi b =\n  let rec aux i () =\n    if i >= b.position then Seq.Nil\n    else\n      let x = Bytes.get b.buffer i in\n      Seq.Cons ((i,x), aux (i+1))\n  in\n  aux 0\n\nlet add_seq b seq = Seq.iter (add_char b) seq\n\nlet of_seq i =\n  let b = create 32 in\n  add_seq b i;\n  b\n\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\n\n(******************************************************************************)\n           (* Tools to manipulate scanning set of chars (see %[...]) *)\n\ntype mutable_char_set = bytes\n\n(* Create a fresh, empty, mutable char set. *)\nlet create_char_set () = Bytes.make 32 '\\000'\n\n(* Add a char in a mutable char set. *)\nlet add_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  Bytes.set char_set str_ind\n    (char_of_int (int_of_char (Bytes.get char_set str_ind) lor mask))\n\nlet freeze_char_set char_set =\n  Bytes.to_string char_set\n\n(* Compute the complement of a char set. *)\nlet rev_char_set char_set =\n  let char_set' = create_char_set () in\n  for i = 0 to 31 do\n    Bytes.set char_set' i\n      (char_of_int (int_of_char (String.get char_set i) lxor 0xFF));\n  done;\n  Bytes.unsafe_to_string char_set'\n\n(* Return true if a `c' is in `char_set'. *)\nlet is_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  (int_of_char (String.get char_set str_ind) land mask) <> 0\n\n\n(******************************************************************************)\n                         (* Ignored param conversion *)\n\n(* GADT used to abstract an existential type parameter. *)\n(* See param_format_of_ignored_format. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb = Param_format_EBB :\n    ('x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb\n\n(* Compute a padding associated to a pad_option (see \"%_42d\"). *)\nlet pad_of_pad_opt pad_opt = match pad_opt with\n  | None -> No_padding\n  | Some width -> Lit_padding (Right, width)\n\n(* Compute a precision associated to a prec_option (see \"%_.42f\"). *)\nlet prec_of_prec_opt prec_opt = match prec_opt with\n  | None -> No_precision\n  | Some ndec -> Lit_precision ndec\n\n(* Turn an ignored param into its equivalent not-ignored format node. *)\n(* Used for format pretty-printing and Scanf. *)\nlet param_format_of_ignored_format : type a b c d e f x y .\n    (a, b, c, d, y, x) ignored -> (x, b, c, y, e, f) fmt ->\n      (a, b, c, d, e, f) param_format_ebb =\nfun ign fmt -> match ign with\n  | Ignored_char ->\n    Param_format_EBB (Char fmt)\n  | Ignored_caml_char ->\n    Param_format_EBB (Caml_char fmt)\n  | Ignored_string pad_opt ->\n    Param_format_EBB (String (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_caml_string pad_opt ->\n    Param_format_EBB (Caml_string (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_int (iconv, pad_opt) ->\n    Param_format_EBB (Int (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int32 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int32 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_nativeint (iconv, pad_opt) ->\n    Param_format_EBB\n      (Nativeint (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int64 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int64 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_float (pad_opt, prec_opt) ->\n    Param_format_EBB\n      (Float (Float_f, pad_of_pad_opt pad_opt, prec_of_prec_opt prec_opt, fmt))\n  | Ignored_bool pad_opt ->\n    Param_format_EBB (Bool (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_format_arg (pad_opt, fmtty) ->\n    Param_format_EBB (Format_arg (pad_opt, fmtty, fmt))\n  | Ignored_format_subst (pad_opt, fmtty) ->\n    Param_format_EBB\n      (Format_subst (pad_opt, fmtty, fmt))\n  | Ignored_reader ->\n    Param_format_EBB (Reader fmt)\n  | Ignored_scan_char_set (width_opt, char_set) ->\n    Param_format_EBB (Scan_char_set (width_opt, char_set, fmt))\n  | Ignored_scan_get_counter counter ->\n    Param_format_EBB (Scan_get_counter (counter, fmt))\n  | Ignored_scan_next_char ->\n    Param_format_EBB (Scan_next_char fmt)\n\n\n(******************************************************************************)\n                                 (* Types *)\n\ntype ('b, 'c) acc_formatting_gen =\n  | Acc_open_tag of ('b, 'c) acc\n  | Acc_open_box of ('b, 'c) acc\n\n(* Reversed list of printing atoms. *)\n(* Used to accumulate printf arguments. *)\nand ('b, 'c) acc =\n  | Acc_formatting_lit of ('b, 'c) acc * formatting_lit\n      (* Special fmtting (box) *)\n  | Acc_formatting_gen of ('b, 'c) acc * ('b, 'c) acc_formatting_gen\n      (* Special fmtting (box) *)\n  | Acc_string_literal of ('b, 'c) acc * string     (* Literal string *)\n  | Acc_char_literal   of ('b, 'c) acc * char       (* Literal char *)\n  | Acc_data_string    of ('b, 'c) acc * string     (* Generated string *)\n  | Acc_data_char      of ('b, 'c) acc * char       (* Generated char *)\n  | Acc_delay          of ('b, 'c) acc * ('b -> 'c)\n                                                (* Delayed printing (%a, %t) *)\n  | Acc_flush          of ('b, 'c) acc              (* Flush *)\n  | Acc_invalid_arg    of ('b, 'c) acc * string\n      (* Raise Invalid_argument msg *)\n  | End_of_acc\n\n(* List of heterogeneous values. *)\n(* Used to accumulate scanf callback arguments. *)\ntype ('a, 'b) heter_list =\n  | Cons : 'c * ('a, 'b) heter_list -> ('c -> 'a, 'b) heter_list\n  | Nil : ('b, 'b) heter_list\n\n(* Existential Black Boxes. *)\n(* Used to abstract some existential type parameters. *)\n\n(* GADT type associating a padding and an fmtty. *)\n(* See the type_padding function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb = Padding_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb\n\n(* GADT type associating a padding, a precision and an fmtty. *)\n(* See the type_padprec function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb = Padprec_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'z) precision * ('z, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb\n\n(* GADT type associating a padding and an fmt. *)\n(* See make_padding_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) padding_fmt_ebb = Padding_fmt_EBB :\n     (_, 'x -> 'a) padding *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) padding_fmt_ebb\n\n(* GADT type associating a precision and an fmt. *)\n(* See make_precision_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) precision_fmt_ebb = Precision_fmt_EBB :\n     (_, 'x -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) precision_fmt_ebb\n\n(* GADT type associating a padding, a precision and an fmt. *)\n(* See make_padprec_fmt_ebb and parse_format functions. *)\ntype ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb = Padprec_fmt_EBB :\n     ('x, 'y) padding * ('y, 'p -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb\n\n(* Abstract the 'a and 'd parameters of an fmt. *)\n(* Output type of the format parsing function. *)\ntype ('b, 'c, 'e, 'f) fmt_ebb = Fmt_EBB :\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('b, 'c, 'e, 'f) fmt_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_format_gen function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb = Fmt_fmtty_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmt *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmtty ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_ignored_format_substitution function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb = Fmtty_fmt_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmtty *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmt_fmtty_ebb ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb\n\n(* Abstract all fmtty type parameters. *)\n(* Used to compare format types. *)\ntype fmtty_ebb = Fmtty_EBB : ('a, 'b, 'c, 'd, 'e, 'f) fmtty -> fmtty_ebb\n\n(* Abstract all padding type parameters. *)\n(* Used to compare paddings. *)\ntype padding_ebb = Padding_EBB : ('a, 'b) padding -> padding_ebb\n\n(* Abstract all precision type parameters. *)\n(* Used to compare precisions. *)\ntype precision_ebb = Precision_EBB : ('a, 'b) precision -> precision_ebb\n\n(******************************************************************************)\n                               (* Constants *)\n\n(* Default precision for float printing. *)\nlet default_float_precision = -6\n  (* For %h and %H formats, a negative precision means \"as many digits as\n     necessary\".  For the other FP formats, we take the absolute value\n     of the precision, hence 6 digits by default. *)\n\n(******************************************************************************)\n                               (* Externals *)\n\nexternal format_float: string -> float -> string\n  = \"caml_format_float\"\nexternal format_int: string -> int -> string\n  = \"caml_format_int\"\nexternal format_int32: string -> int32 -> string\n  = \"caml_int32_format\"\nexternal format_nativeint: string -> nativeint -> string\n  = \"caml_nativeint_format\"\nexternal format_int64: string -> int64 -> string\n  = \"caml_int64_format\"\nexternal hexstring_of_float: float -> int -> char -> string\n  = \"caml_hexstring_of_float\"\n\n(******************************************************************************)\n                     (* Tools to pretty-print formats *)\n\n(* Type of extensible character buffers. *)\ntype buffer = {\n  mutable ind : int;\n  mutable bytes : bytes;\n}\n\n(* Create a fresh buffer. *)\nlet buffer_create init_size = { ind = 0; bytes = Bytes.create init_size }\n\n(* Check size of the buffer and grow it if needed. *)\nlet buffer_check_size buf overhead =\n  let len = Bytes.length buf.bytes in\n  let min_len = buf.ind + overhead in\n  if min_len > len then (\n    let new_len = max (len * 2) min_len in\n    let new_str = Bytes.create new_len in\n    Bytes.blit buf.bytes 0 new_str 0 len;\n    buf.bytes <- new_str;\n  )\n\n(* Add the character `c' to the buffer `buf'. *)\nlet buffer_add_char buf c =\n  buffer_check_size buf 1;\n  Bytes.set buf.bytes buf.ind c;\n  buf.ind <- buf.ind + 1\n\n(* Add the string `s' to the buffer `buf'. *)\nlet buffer_add_string buf s =\n  let str_len = String.length s in\n  buffer_check_size buf str_len;\n  String.blit s 0 buf.bytes buf.ind str_len;\n  buf.ind <- buf.ind + str_len\n\n(* Get the content of the buffer. *)\nlet buffer_contents buf =\n  Bytes.sub_string buf.bytes 0 buf.ind\n\n(***)\n\n(* Convert an integer conversion to char. *)\nlet char_of_iconv iconv = match iconv with\n  | Int_d | Int_pd | Int_sd -> 'd' | Int_i | Int_pi | Int_si -> 'i'\n  | Int_x | Int_Cx -> 'x' | Int_X | Int_CX -> 'X' | Int_o | Int_Co -> 'o'\n  | Int_u -> 'u'\n\n(* Convert a float conversion to char. *)\nlet char_of_fconv fconv = match fconv with\n  | Float_f | Float_pf | Float_sf -> 'f' | Float_e | Float_pe | Float_se -> 'e'\n  | Float_E | Float_pE | Float_sE -> 'E' | Float_g | Float_pg | Float_sg -> 'g'\n  | Float_G | Float_pG | Float_sG -> 'G' | Float_F -> 'F'\n  | Float_h | Float_ph | Float_sh -> 'h' | Float_H | Float_pH | Float_sH -> 'H'\n\n\n(* Convert a scanning counter to char. *)\nlet char_of_counter counter = match counter with\n  | Line_counter  -> 'l'\n  | Char_counter  -> 'n'\n  | Token_counter -> 'N'\n\n(***)\n\n(* Print a char_set in a buffer with the OCaml format lexical convention. *)\nlet bprint_char_set buf char_set =\n  let rec print_start set =\n    let is_alone c =\n      let before, after = Char.(chr (code c - 1), chr (code c + 1)) in\n      is_in_char_set set c\n      && not (is_in_char_set set before && is_in_char_set set after) in\n    if is_alone ']' then buffer_add_char buf ']';\n    print_out set 1;\n    if is_alone '-' then buffer_add_char buf '-';\n  and print_out set i =\n    if i < 256 then\n      if is_in_char_set set (char_of_int i) then print_first set i\n      else print_out set (i + 1)\n  and print_first set i =\n    match char_of_int i with\n    | '\\255' -> print_char buf 255;\n    | ']' | '-' -> print_out set (i + 1);\n    | _ -> print_second set (i + 1);\n  and print_second set i =\n    if is_in_char_set set (char_of_int i) then\n      match char_of_int i with\n      | '\\255' ->\n        print_char buf 254;\n        print_char buf 255;\n      | ']' | '-' when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_out set (i + 1);\n      | _ when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_char buf i;\n        print_out set (i + 2);\n      | _ ->\n        print_in set (i - 1) (i + 2);\n    else (\n      print_char buf (i - 1);\n      print_out set (i + 1);\n    )\n  and print_in set i j =\n    if j = 256 || not (is_in_char_set set (char_of_int j)) then (\n      print_char buf i;\n      print_char buf (int_of_char '-');\n      print_char buf (j - 1);\n      if j < 256 then print_out set (j + 1);\n    ) else\n      print_in set i (j + 1);\n  and print_char buf i = match char_of_int i with\n    | '%' -> buffer_add_char buf '%'; buffer_add_char buf '%';\n    | '@' -> buffer_add_char buf '%'; buffer_add_char buf '@';\n    | c   -> buffer_add_char buf c;\n  in\n  buffer_add_char buf '[';\n  print_start (\n    if is_in_char_set char_set '\\000'\n    then ( buffer_add_char buf '^'; rev_char_set char_set )\n    else char_set\n  );\n  buffer_add_char buf ']'\n\n(***)\n\n(* Print a padty in a buffer with the format-like syntax. *)\nlet bprint_padty buf padty = match padty with\n  | Left  -> buffer_add_char buf '-'\n  | Right -> ()\n  | Zeros -> buffer_add_char buf '0'\n\n(* Print the '_' of an ignored flag if needed. *)\nlet bprint_ignored_flag buf ign_flag =\n  if ign_flag then buffer_add_char buf '_'\n\n(***)\n\nlet bprint_pad_opt buf pad_opt = match pad_opt with\n  | None -> ()\n  | Some width -> buffer_add_string buf (string_of_int width)\n\n(***)\n\n(* Print padding in a buffer with the format-like syntax. *)\nlet bprint_padding : type a b . buffer -> (a, b) padding -> unit =\nfun buf pad -> match pad with\n  | No_padding -> ()\n  | Lit_padding (padty, n) ->\n    bprint_padty buf padty;\n    buffer_add_string buf (string_of_int n);\n  | Arg_padding padty ->\n    bprint_padty buf padty;\n    buffer_add_char buf '*'\n\n(* Print precision in a buffer with the format-like syntax. *)\nlet bprint_precision : type a b . buffer -> (a, b) precision -> unit =\n  fun buf prec -> match prec with\n  | No_precision -> ()\n  | Lit_precision n ->\n    buffer_add_char buf '.';\n    buffer_add_string buf (string_of_int n);\n  | Arg_precision ->\n    buffer_add_string buf \".*\"\n\n(***)\n\n(* Print the optional '+', ' ' or '#' associated to an int conversion. *)\nlet bprint_iconv_flag buf iconv = match iconv with\n  | Int_pd | Int_pi -> buffer_add_char buf '+'\n  | Int_sd | Int_si -> buffer_add_char buf ' '\n  | Int_Cx | Int_CX | Int_Co -> buffer_add_char buf '#'\n  | Int_d | Int_i | Int_x | Int_X | Int_o | Int_u -> ()\n\n(* Print an complete int format in a buffer (ex: \"%3.*d\"). *)\nlet bprint_int_fmt buf ign_flag iconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(* Print a complete int32, nativeint or int64 format in a buffer. *)\nlet bprint_altint_fmt buf ign_flag iconv pad prec c =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf c;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(***)\n\n(* Print the optional '+' associated to a float conversion. *)\nlet bprint_fconv_flag buf fconv = match fconv with\n  | Float_pf | Float_pe | Float_pE\n  | Float_pg | Float_pG | Float_ph | Float_pH ->\n    buffer_add_char buf '+'\n  | Float_sf | Float_se | Float_sE\n  | Float_sg | Float_sG | Float_sh | Float_sH ->\n    buffer_add_char buf ' '\n  | Float_f | Float_e | Float_E\n  | Float_g | Float_G | Float_F | Float_h | Float_H ->\n    ()\n\n(* Print a complete float format in a buffer (ex: \"%+*.3f\"). *)\nlet bprint_float_fmt buf ign_flag fconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_fconv_flag buf fconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_fconv fconv)\n\n(* Compute the literal string representation of a formatting_lit. *)\n(* Also used by Printf and Scanf where formatting is not interpreted. *)\nlet string_of_formatting_lit formatting_lit = match formatting_lit with\n  | Close_box            -> \"@]\"\n  | Close_tag            -> \"@}\"\n  | Break (str, _, _)    -> str\n  | FFlush               -> \"@?\"\n  | Force_newline        -> \"@\\n\"\n  | Flush_newline        -> \"@.\"\n  | Magic_size (str, _)  -> str\n  | Escaped_at           -> \"@@\"\n  | Escaped_percent      -> \"@%\"\n  | Scan_indic c -> \"@\" ^ (String.make 1 c)\n\n(* Compute the literal string representation of a formatting. *)\n(* Also used by Printf and Scanf where formatting is not interpreted. *)\nlet string_of_formatting_gen : type a b c d e f .\n    (a, b, c, d, e, f) formatting_gen -> string =\n  fun formatting_gen -> match formatting_gen with\n  | Open_tag (Format (_, str)) -> str\n  | Open_box (Format (_, str)) -> str\n\n(***)\n\n(* Print a literal char in a buffer, escape '%' by \"%%\". *)\nlet bprint_char_literal buf chr = match chr with\n  | '%' -> buffer_add_string buf \"%%\"\n  | _ -> buffer_add_char buf chr\n\n(* Print a literal string in a buffer, escape all '%' by \"%%\". *)\nlet bprint_string_literal buf str =\n  for i = 0 to String.length str - 1 do\n    bprint_char_literal buf str.[i]\n  done\n\n(******************************************************************************)\n                          (* Format pretty-printing *)\n\n(* Print a complete format type (an fmtty) in a buffer. *)\nlet rec bprint_fmtty : type a b c d e f g h i j k l .\n    buffer -> (a, b, c, d, e, f, g, h, i, j, k, l) fmtty_rel -> unit =\nfun buf fmtty -> match fmtty with\n  | Char_ty rest      -> buffer_add_string buf \"%c\";  bprint_fmtty buf rest;\n  | String_ty rest    -> buffer_add_string buf \"%s\";  bprint_fmtty buf rest;\n  | Int_ty rest       -> buffer_add_string buf \"%i\";  bprint_fmtty buf rest;\n  | Int32_ty rest     -> buffer_add_string buf \"%li\"; bprint_fmtty buf rest;\n  | Nativeint_ty rest -> buffer_add_string buf \"%ni\"; bprint_fmtty buf rest;\n  | Int64_ty rest     -> buffer_add_string buf \"%Li\"; bprint_fmtty buf rest;\n  | Float_ty rest     -> buffer_add_string buf \"%f\";  bprint_fmtty buf rest;\n  | Bool_ty rest      -> buffer_add_string buf \"%B\";  bprint_fmtty buf rest;\n  | Alpha_ty rest     -> buffer_add_string buf \"%a\";  bprint_fmtty buf rest;\n  | Theta_ty rest     -> buffer_add_string buf \"%t\";  bprint_fmtty buf rest;\n  | Any_ty rest       -> buffer_add_string buf \"%?\";  bprint_fmtty buf rest;\n  | Reader_ty rest    -> buffer_add_string buf \"%r\";  bprint_fmtty buf rest;\n\n  | Ignored_reader_ty rest ->\n    buffer_add_string buf \"%_r\";\n    bprint_fmtty buf rest;\n\n  | Format_arg_ty (sub_fmtty, rest) ->\n    buffer_add_string buf \"%{\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%}\"; bprint_fmtty buf rest;\n  | Format_subst_ty (sub_fmtty, _, rest) ->\n    buffer_add_string buf \"%(\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%)\"; bprint_fmtty buf rest;\n\n  | End_of_fmtty -> ()\n\n(***)\n\nlet rec int_of_custom_arity : type a b c .\n  (a, b, c) custom_arity -> int =\n  function\n  | Custom_zero -> 0\n  | Custom_succ x -> 1 + int_of_custom_arity x\n\n(* Print a complete format in a buffer. *)\nlet bprint_fmt buf fmt =\n  let rec fmtiter : type a b c d e f .\n      (a, b, c, d, e, f) fmt -> bool -> unit =\n  fun fmt ign_flag -> match fmt with\n    | String (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 's';\n      fmtiter rest false;\n    | Caml_string (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 'S';\n      fmtiter rest false;\n\n    | Int (iconv, pad, prec, rest) ->\n      bprint_int_fmt buf ign_flag iconv pad prec;\n      fmtiter rest false;\n    | Int32 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'l';\n      fmtiter rest false;\n    | Nativeint (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'n';\n      fmtiter rest false;\n    | Int64 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'L';\n      fmtiter rest false;\n    | Float (fconv, pad, prec, rest) ->\n      bprint_float_fmt buf ign_flag fconv pad prec;\n      fmtiter rest false;\n\n    | Char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'c'; fmtiter rest false;\n    | Caml_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'C'; fmtiter rest false;\n    | Bool (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 'B';\n      fmtiter rest false;\n    | Alpha rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'a'; fmtiter rest false;\n    | Theta rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 't'; fmtiter rest false;\n    | Custom (arity, _, rest) ->\n      for _i = 1 to int_of_custom_arity arity do\n        buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n        buffer_add_char buf '?';\n      done;\n      fmtiter rest false;\n    | Reader rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'r'; fmtiter rest false;\n    | Flush rest ->\n      buffer_add_string buf \"%!\";\n      fmtiter rest ign_flag;\n\n    | String_literal (str, rest) ->\n      bprint_string_literal buf str;\n      fmtiter rest ign_flag;\n    | Char_literal (chr, rest) ->\n      bprint_char_literal buf chr;\n      fmtiter rest ign_flag;\n\n    | Format_arg (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '{';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf '}';\n      fmtiter rest false;\n    | Format_subst (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '(';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf ')';\n      fmtiter rest false;\n\n    | Scan_char_set (width_opt, char_set, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf width_opt; bprint_char_set buf char_set;\n      fmtiter rest false;\n    | Scan_get_counter (counter, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf (char_of_counter counter);\n      fmtiter rest false;\n    | Scan_next_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_string_literal buf \"0c\"; fmtiter rest false;\n\n    | Ignored_param (ign, rest) ->\n      let Param_format_EBB fmt' = param_format_of_ignored_format ign rest in\n      fmtiter fmt' true;\n\n    | Formatting_lit (fmting_lit, rest) ->\n      bprint_string_literal buf (string_of_formatting_lit fmting_lit);\n      fmtiter rest ign_flag;\n    | Formatting_gen (fmting_gen, rest) ->\n      bprint_string_literal buf \"@{\";\n      bprint_string_literal buf (string_of_formatting_gen fmting_gen);\n      fmtiter rest ign_flag;\n\n    | End_of_format -> ()\n\n  in fmtiter fmt false\n\n(***)\n\n(* Convert a format to string. *)\nlet string_of_fmt fmt =\n  let buf = buffer_create 16 in\n  bprint_fmt buf fmt;\n  buffer_contents buf\n\n(******************************************************************************)\n                          (* Type extraction *)\n\ntype (_, _) eq = Refl : ('a, 'a) eq\n\n(* Invariant: this function is the identity on values.\n\n   In particular, if (ty1, ty2) have equal values, then\n   (trans (symm ty1) ty2) respects the 'trans' precondition. *)\nlet rec symm : type a1 b1 c1 d1 e1 f1 a2 b2 c2 d2 e2 f2 .\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a1, b1, c1, d1, e1, f1) fmtty_rel\n= function\n  | Char_ty rest -> Char_ty (symm rest)\n  | Int_ty rest -> Int_ty (symm rest)\n  | Int32_ty rest -> Int32_ty (symm rest)\n  | Int64_ty rest -> Int64_ty (symm rest)\n  | Nativeint_ty rest -> Nativeint_ty (symm rest)\n  | Float_ty rest -> Float_ty (symm rest)\n  | Bool_ty rest -> Bool_ty (symm rest)\n  | String_ty rest -> String_ty (symm rest)\n  | Theta_ty rest -> Theta_ty (symm rest)\n  | Alpha_ty rest -> Alpha_ty (symm rest)\n  | Any_ty rest -> Any_ty (symm rest)\n  | Reader_ty rest -> Reader_ty (symm rest)\n  | Ignored_reader_ty rest -> Ignored_reader_ty (symm rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, symm rest)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty2, ty1, symm rest)\n  | End_of_fmtty -> End_of_fmtty\n\nlet rec fmtty_rel_det : type a1 b c d1 e1 f1 a2 d2 e2 f2 .\n  (a1, b, c, d1, e1, f1,\n   a2, b, c, d2, e2, f2) fmtty_rel ->\n    ((f1, f2) eq -> (a1, a2) eq)\n  * ((a1, a2) eq -> (f1, f2) eq)\n  * ((e1, e2) eq -> (d1, d2) eq)\n  * ((d1, d2) eq -> (e1, e2) eq)\n= function\n  | End_of_fmtty ->\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl)\n  | Char_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | String_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int32_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int64_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Nativeint_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Float_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Bool_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n\n  | Theta_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Alpha_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Any_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Ignored_reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Format_arg_ty (_ty, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    let ty = trans (symm ty1) ty2 in\n    let ag, ga, dj, jd = fmtty_rel_det ty in\n    (fun Refl -> let Refl = fa Refl in let Refl = ag Refl in Refl),\n    (fun Refl -> let Refl = ga Refl in let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in let Refl = dj Refl in Refl),\n    (fun Refl -> let Refl = jd Refl in let Refl = de Refl in Refl)\n\n(* Precondition: we assume that the two fmtty_rel arguments have equal\n   values (at possibly distinct types); this invariant comes from the way\n   fmtty_rel witnesses are produced by the type-checker\n\n   The code below uses (assert false) when this assumption is broken. The\n   code pattern is the following:\n\n     | Foo x, Foo y ->\n       (* case where indeed both values\n          start with constructor Foo *)\n     | Foo _, _\n     | _, Foo _ ->\n       (* different head constructors: broken precondition *)\n       assert false\n*)\nand trans : type\n  a1 b1 c1 d1 e1 f1\n  a2 b2 c2 d2 e2 f2\n  a3 b3 c3 d3 e3 f3\n.\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n-> (a1, b1, c1, d1, e1, f1,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n= fun ty1 ty2 -> match ty1, ty2 with\n  | Char_ty rest1, Char_ty rest2 -> Char_ty (trans rest1 rest2)\n  | String_ty rest1, String_ty rest2 -> String_ty (trans rest1 rest2)\n  | Bool_ty rest1, Bool_ty rest2 -> Bool_ty (trans rest1 rest2)\n  | Int_ty rest1, Int_ty rest2 -> Int_ty (trans rest1 rest2)\n  | Int32_ty rest1, Int32_ty rest2 -> Int32_ty (trans rest1 rest2)\n  | Int64_ty rest1, Int64_ty rest2 -> Int64_ty (trans rest1 rest2)\n  | Nativeint_ty rest1, Nativeint_ty rest2 -> Nativeint_ty (trans rest1 rest2)\n  | Float_ty rest1, Float_ty rest2 -> Float_ty (trans rest1 rest2)\n\n  | Alpha_ty rest1, Alpha_ty rest2 -> Alpha_ty (trans rest1 rest2)\n  | Alpha_ty _, _ -> assert false\n  | _, Alpha_ty _ -> assert false\n\n  | Theta_ty rest1, Theta_ty rest2 -> Theta_ty (trans rest1 rest2)\n  | Theta_ty _, _ -> assert false\n  | _, Theta_ty _ -> assert false\n\n  | Any_ty rest1, Any_ty rest2 -> Any_ty (trans rest1 rest2)\n  | Any_ty _, _ -> assert false\n  | _, Any_ty _ -> assert false\n\n  | Reader_ty rest1, Reader_ty rest2 -> Reader_ty (trans rest1 rest2)\n  | Reader_ty _, _ -> assert false\n  | _, Reader_ty _ -> assert false\n\n  | Ignored_reader_ty rest1, Ignored_reader_ty rest2 ->\n    Ignored_reader_ty (trans rest1 rest2)\n  | Ignored_reader_ty _, _ -> assert false\n  | _, Ignored_reader_ty _ -> assert false\n\n  | Format_arg_ty (ty1, rest1), Format_arg_ty (ty2, rest2) ->\n    Format_arg_ty (trans ty1 ty2, trans rest1 rest2)\n  | Format_arg_ty _, _ -> assert false\n  | _, Format_arg_ty _ -> assert false\n\n  | Format_subst_ty (ty11, ty12, rest1),\n    Format_subst_ty (ty21, ty22, rest2) ->\n    let ty = trans (symm ty12) ty21 in\n    let _, f2, _, f4 = fmtty_rel_det ty in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    Format_subst_ty (ty11, ty22, trans rest1 rest2)\n  | Format_subst_ty _, _ -> assert false\n  | _, Format_subst_ty _ -> assert false\n\n  | End_of_fmtty, End_of_fmtty -> End_of_fmtty\n  | End_of_fmtty, _ -> assert false\n  | _, End_of_fmtty -> assert false\n\nlet rec fmtty_of_formatting_gen : type a b c d e f .\n  (a, b, c, d, e, f) formatting_gen ->\n    (a, b, c, d, e, f) fmtty =\nfun formatting_gen -> match formatting_gen with\n  | Open_tag (Format (fmt, _)) -> fmtty_of_fmt fmt\n  | Open_box (Format (fmt, _)) -> fmtty_of_fmt fmt\n\n(* Extract the type representation (an fmtty) of a format. *)\nand fmtty_of_fmt : type a b c d e f .\n  (a, b, c, d, e, f) fmt -> (a, b, c, d, e, f) fmtty =\nfun fmtty -> match fmtty with\n  | String (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n  | Caml_string (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n\n  | Int (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int32 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int32_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Nativeint (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Nativeint_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int64 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int64_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Float (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Float_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n\n  | Char rest                  -> Char_ty (fmtty_of_fmt rest)\n  | Caml_char rest             -> Char_ty (fmtty_of_fmt rest)\n  | Bool (pad, rest)           -> fmtty_of_padding_fmtty pad (Bool_ty (fmtty_of_fmt rest))\n  | Alpha rest                 -> Alpha_ty (fmtty_of_fmt rest)\n  | Theta rest                 -> Theta_ty (fmtty_of_fmt rest)\n  | Custom (arity, _, rest)    -> fmtty_of_custom arity (fmtty_of_fmt rest)\n  | Reader rest                -> Reader_ty (fmtty_of_fmt rest)\n\n  | Format_arg (_, ty, rest) ->\n    Format_arg_ty (ty, fmtty_of_fmt rest)\n  | Format_subst (_, ty, rest) ->\n    Format_subst_ty (ty, ty, fmtty_of_fmt rest)\n\n  | Flush rest                 -> fmtty_of_fmt rest\n  | String_literal (_, rest)   -> fmtty_of_fmt rest\n  | Char_literal (_, rest)     -> fmtty_of_fmt rest\n\n  | Scan_char_set (_, _, rest) -> String_ty (fmtty_of_fmt rest)\n  | Scan_get_counter (_, rest) -> Int_ty (fmtty_of_fmt rest)\n  | Scan_next_char rest        -> Char_ty (fmtty_of_fmt rest)\n  | Ignored_param (ign, rest)  -> fmtty_of_ignored_format ign rest\n  | Formatting_lit (_, rest)   -> fmtty_of_fmt rest\n  | Formatting_gen (fmting_gen, rest)  ->\n    concat_fmtty (fmtty_of_formatting_gen fmting_gen) (fmtty_of_fmt rest)\n\n  | End_of_format              -> End_of_fmtty\n\nand fmtty_of_custom : type x y a b c d e f .\n  (a, x, y) custom_arity -> (a, b, c, d, e, f) fmtty ->\n  (y, b, c, d, e, f) fmtty =\nfun arity fmtty -> match arity with\n  | Custom_zero -> fmtty\n  | Custom_succ arity -> Any_ty (fmtty_of_custom arity fmtty)\n\n(* Extract the fmtty of an ignored parameter followed by the rest of\n   the format. *)\nand fmtty_of_ignored_format : type x y a b c d e f .\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt ->\n    (a, b, c, d, e, f) fmtty =\nfun ign fmt -> match ign with\n  | Ignored_char                    -> fmtty_of_fmt fmt\n  | Ignored_caml_char               -> fmtty_of_fmt fmt\n  | Ignored_string _                -> fmtty_of_fmt fmt\n  | Ignored_caml_string _           -> fmtty_of_fmt fmt\n  | Ignored_int (_, _)              -> fmtty_of_fmt fmt\n  | Ignored_int32 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_nativeint (_, _)        -> fmtty_of_fmt fmt\n  | Ignored_int64 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_float (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_bool _                  -> fmtty_of_fmt fmt\n  | Ignored_format_arg _            -> fmtty_of_fmt fmt\n  | Ignored_format_subst (_, fmtty) -> concat_fmtty fmtty (fmtty_of_fmt fmt)\n  | Ignored_reader                  -> Ignored_reader_ty (fmtty_of_fmt fmt)\n  | Ignored_scan_char_set _         -> fmtty_of_fmt fmt\n  | Ignored_scan_get_counter _      -> fmtty_of_fmt fmt\n  | Ignored_scan_next_char          -> fmtty_of_fmt fmt\n\n(* Add an Int_ty node if padding is taken as an extra argument (ex: \"%*s\"). *)\nand fmtty_of_padding_fmtty : type x a b c d e f .\n    (x, a) padding -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun pad fmtty -> match pad with\n    | No_padding    -> fmtty\n    | Lit_padding _ -> fmtty\n    | Arg_padding _ -> Int_ty fmtty\n\n(* Add an Int_ty node if precision is taken as an extra argument (ex: \"%.*f\").*)\nand fmtty_of_precision_fmtty : type x a b c d e f .\n    (x, a) precision -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun prec fmtty -> match prec with\n    | No_precision    -> fmtty\n    | Lit_precision _ -> fmtty\n    | Arg_precision   -> Int_ty fmtty\n\n(******************************************************************************)\n                            (* Format typing *)\n\n(* Exception raised when a format does not match a given format type. *)\nexception Type_mismatch\n\n(* Type a padding. *)\n(* Take an Int_ty from the fmtty if the integer should be kept as argument. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padding : type a b c d e f x y .\n    (x, y) padding -> (a, b, c, d, e, f) fmtty ->\n      (a, b, c, d, e, f) padding_fmtty_ebb =\nfun pad fmtty -> match pad, fmtty with\n  | No_padding, _ -> Padding_fmtty_EBB (No_padding, fmtty)\n  | Lit_padding (padty, w), _ -> Padding_fmtty_EBB (Lit_padding (padty,w),fmtty)\n  | Arg_padding padty, Int_ty rest -> Padding_fmtty_EBB (Arg_padding padty,rest)\n  | _ -> raise Type_mismatch\n\n(* Convert a (upadding, uprecision) to a (padding, precision). *)\n(* Take one or two Int_ty from the fmtty if needed. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padprec : type a b c d e f x y z .\n  (x, y) padding -> (y, z) precision -> (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) padprec_fmtty_ebb =\nfun pad prec fmtty -> match prec, type_padding pad fmtty with\n  | No_precision, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, No_precision, rest)\n  | Lit_precision p, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, Lit_precision p, rest)\n  | Arg_precision, Padding_fmtty_EBB (pad, Int_ty rest) ->\n    Padprec_fmtty_EBB (pad, Arg_precision, rest)\n  | _, Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n\n(* Type a format according to an fmtty. *)\n(* If typing succeed, generate a copy of the format with the same\n    type parameters as the fmtty. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet rec type_format :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty -> match type_format_gen fmt fmtty with\n  | Fmt_fmtty_EBB (fmt', End_of_fmtty) -> fmt'\n  | _ -> raise Type_mismatch\n\nand type_format_gen :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun fmt fmtty -> match fmt, fmtty with\n  | Char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char fmt', fmtty')\n  | Caml_char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Caml_char fmt', fmtty')\n  | String (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (String (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Caml_string (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Caml_string (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Int (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int32 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int32_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int32 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Nativeint (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Nativeint_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Nativeint (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int64 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int64_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int64 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Float (fconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Float_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Float (fconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Bool (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, Bool_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Bool (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Flush fmt_rest, fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Flush fmt', fmtty')\n\n  | String_literal (str, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (String_literal (str, fmt'), fmtty')\n  | Char_literal (chr, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char_literal (chr, fmt'), fmtty')\n\n  | Format_arg (pad_opt, sub_fmtty, fmt_rest),\n    Format_arg_ty (sub_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub_fmtty <> Fmtty_EBB sub_fmtty' then raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Format_arg (pad_opt, sub_fmtty', fmt'), fmtty')\n  | Format_subst (pad_opt, sub_fmtty, fmt_rest),\n    Format_subst_ty (sub_fmtty1, _sub_fmtty2, fmtty_rest) ->\n    if Fmtty_EBB (erase_rel sub_fmtty) <> Fmtty_EBB (erase_rel sub_fmtty1) then\n      raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') =\n      type_format_gen fmt_rest (erase_rel fmtty_rest)\n    in\n    Fmt_fmtty_EBB (Format_subst (pad_opt, sub_fmtty1, fmt'), fmtty')\n  (* Printf and Format specific constructors: *)\n  | Alpha fmt_rest, Alpha_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Alpha fmt', fmtty')\n  | Theta fmt_rest, Theta_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Theta fmt', fmtty')\n\n  (* Format specific constructors: *)\n  | Formatting_lit (formatting_lit, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Formatting_lit (formatting_lit, fmt'), fmtty')\n  | Formatting_gen (formatting_gen, fmt_rest), fmtty_rest ->\n    type_formatting_gen formatting_gen fmt_rest fmtty_rest\n\n  (* Scanf specific constructors: *)\n  | Reader fmt_rest, Reader_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Reader fmt', fmtty')\n  | Scan_char_set (width_opt, char_set, fmt_rest), String_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_char_set (width_opt, char_set, fmt'), fmtty')\n  | Scan_get_counter (counter, fmt_rest), Int_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_get_counter (counter, fmt'), fmtty')\n  | Ignored_param (ign, rest), fmtty_rest ->\n    type_ignored_param ign rest fmtty_rest\n\n  | End_of_format, fmtty_rest -> Fmt_fmtty_EBB (End_of_format, fmtty_rest)\n\n  | _ -> raise Type_mismatch\n\nand type_formatting_gen : type a1 a3 b1 b3 c1 c3 d1 d3 e1 e2 e3 f1 f2 f3 .\n    (a1, b1, c1, d1, e1, f1) formatting_gen ->\n    (f1, b1, c1, e1, e2, f2) fmt ->\n    (a3, b3, c3, d3, e3, f3) fmtty ->\n    (a3, b3, c3, d3, e3, f3) fmt_fmtty_ebb =\nfun formatting_gen fmt0 fmtty0 -> match formatting_gen with\n  | Open_tag (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_tag (Format (fmt2, str)), fmt3), fmtty3)\n  | Open_box (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_box (Format (fmt2, str)), fmt3), fmtty3)\n\n(* Type an Ignored_param node according to an fmtty. *)\nand type_ignored_param : type p q x y z t u v a b c d e f .\n    (x, y, z, t, q, p) ignored ->\n    (p, y, z, q, u, v) fmt ->\n    (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) fmt_fmtty_ebb =\nfun ign fmt fmtty -> match ign with\n  | Ignored_char               as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_char          as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_string _           as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_string _      as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int _              as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int32 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_nativeint _        as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int64 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_float _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_bool _             as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_char_set _    as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_get_counter _ as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_next_char     as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_format_arg (pad_opt, sub_fmtty) ->\n    type_ignored_param_one (Ignored_format_arg (pad_opt, sub_fmtty)) fmt fmtty\n  | Ignored_format_subst (pad_opt, sub_fmtty) ->\n    let Fmtty_fmt_EBB (sub_fmtty', Fmt_fmtty_EBB (fmt', fmtty')) =\n      type_ignored_format_substitution sub_fmtty fmt fmtty in\n    Fmt_fmtty_EBB (Ignored_param (Ignored_format_subst (pad_opt, sub_fmtty'),\n                                  fmt'),\n                   fmtty')\n  | Ignored_reader -> (\n    match fmtty with\n    | Ignored_reader_ty fmtty_rest ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty_rest in\n      Fmt_fmtty_EBB (Ignored_param (Ignored_reader, fmt'), fmtty')\n    | _ -> raise Type_mismatch\n  )\n\nand type_ignored_param_one : type a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 .\n    (a2, b2, c2, d2, d2, a2) ignored ->\n    (a1, b1, c1, d1, e1, f1) fmt ->\n    (a2, b2, c2, d2, e2, f2) fmtty ->\n    (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun ign fmt fmtty ->\n  let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty in\n  Fmt_fmtty_EBB (Ignored_param (ign, fmt'), fmtty')\n\n(* Typing of the complex case: \"%_(...%)\". *)\nand type_ignored_format_substitution : type w x y z p s t u a b c d e f .\n    (w, x, y, z, s, p) fmtty ->\n    (p, x, y, s, t, u) fmt ->\n    (a, b, c, d, e, f) fmtty -> (a, b, c, d, e, f) fmtty_fmt_ebb =\nfun sub_fmtty fmt fmtty -> match sub_fmtty, fmtty with\n  | Char_ty sub_fmtty_rest, Char_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Char_ty sub_fmtty_rest', fmt')\n  | String_ty sub_fmtty_rest, String_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (String_ty sub_fmtty_rest', fmt')\n  | Int_ty sub_fmtty_rest, Int_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int_ty sub_fmtty_rest', fmt')\n  | Int32_ty sub_fmtty_rest, Int32_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int32_ty sub_fmtty_rest', fmt')\n  | Nativeint_ty sub_fmtty_rest, Nativeint_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Nativeint_ty sub_fmtty_rest', fmt')\n  | Int64_ty sub_fmtty_rest, Int64_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int64_ty sub_fmtty_rest', fmt')\n  | Float_ty sub_fmtty_rest, Float_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Float_ty sub_fmtty_rest', fmt')\n  | Bool_ty sub_fmtty_rest, Bool_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Bool_ty sub_fmtty_rest', fmt')\n  | Alpha_ty sub_fmtty_rest, Alpha_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Alpha_ty sub_fmtty_rest', fmt')\n  | Theta_ty sub_fmtty_rest, Theta_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Theta_ty sub_fmtty_rest', fmt')\n  | Reader_ty sub_fmtty_rest, Reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Reader_ty sub_fmtty_rest', fmt')\n  | Ignored_reader_ty sub_fmtty_rest, Ignored_reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Ignored_reader_ty sub_fmtty_rest', fmt')\n\n  | Format_arg_ty (sub2_fmtty, sub_fmtty_rest),\n    Format_arg_ty (sub2_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub2_fmtty <> Fmtty_EBB sub2_fmtty' then raise Type_mismatch;\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Format_arg_ty (sub2_fmtty', sub_fmtty_rest'), fmt')\n  | Format_subst_ty (sub1_fmtty,  sub2_fmtty,  sub_fmtty_rest),\n    Format_subst_ty (sub1_fmtty', sub2_fmtty', fmtty_rest) ->\n    (* TODO define Fmtty_rel_EBB to remove those erase_rel *)\n    if Fmtty_EBB (erase_rel sub1_fmtty) <> Fmtty_EBB (erase_rel sub1_fmtty')\n    then raise Type_mismatch;\n    if Fmtty_EBB (erase_rel sub2_fmtty) <> Fmtty_EBB (erase_rel sub2_fmtty')\n    then raise Type_mismatch;\n    let sub_fmtty' = trans (symm sub1_fmtty') sub2_fmtty' in\n    let _, f2, _, f4 = fmtty_rel_det sub_fmtty' in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution (erase_rel sub_fmtty_rest) fmt fmtty_rest\n    in\n    Fmtty_fmt_EBB (Format_subst_ty (sub1_fmtty', sub2_fmtty',\n                                    symm sub_fmtty_rest'),\n                   fmt')\n  | End_of_fmtty, fmtty ->\n    Fmtty_fmt_EBB (End_of_fmtty, type_format_gen fmt fmtty)\n  | _ -> raise Type_mismatch\n\n(* This implementation of `recast` is a bit disappointing. The\n   invariant provided by the type are very strong: the input format's\n   type is in relation to the output type's as witnessed by the\n   fmtty_rel argument. One would at first expect this function to be\n   total, and implementable by exhaustive pattern matching. Instead,\n   we reuse the highly partial and much less well-defined function\n   `type_format` that has lost all knowledge of the correspondence\n   between the argument's types.\n\n   Besides the fact that this function reuses a lot of the\n   `type_format` logic (eg.: seeing Int_ty in the fmtty parameter does\n   not let you match on Int only, as you may in fact have Float\n   (Arg_padding, ...) (\"%.*d\") beginning with an Int_ty), it is also\n   a partial function, because the typing information in a format is\n   not quite enough to reconstruct it unambiguously. For example, the\n   format types of \"%d%_r\" and \"%_r%d\" have the same format6\n   parameters, but they are not at all exchangeable, and putting one\n   in place of the other must result in a dynamic failure.\n\n   Given that:\n   - we'd have to duplicate a lot of non-trivial typing logic from type_format\n   - this wouldn't even eliminate (all) the dynamic failures\n   we decided to just reuse type_format directly for now.\n*)\nlet recast :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a1, b1, c1, d1, e1, f1,\n      a2, b2, c2, d2, e2, f2) fmtty_rel\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty ->\n  type_format fmt (erase_rel (symm fmtty))\n\n(******************************************************************************)\n                             (* Printing tools *)\n\n(* Add padding spaces around a string. *)\nlet fix_padding padty width str =\n  let len = String.length str in\n  let width, padty =\n    abs width,\n    (* while literal padding widths are always non-negative,\n       dynamically-set widths (Arg_padding, eg. %*d) may be negative;\n       we interpret those as specifying a padding-to-the-left; this\n       means that '0' may get dropped even if it was explicitly set,\n       but:\n       - this is what the legacy implementation does, and\n         we preserve compatibility if possible\n       - we could only signal this issue by failing at runtime,\n         which is not very nice... *)\n    if width < 0 then Left else padty in\n  if width <= len then str else\n    let res = Bytes.make width (if padty = Zeros then '0' else ' ') in\n    begin match padty with\n    | Left  -> String.blit str 0 res 0 len\n    | Right -> String.blit str 0 res (width - len) len\n    | Zeros when len > 0 && (str.[0] = '+' || str.[0] = '-' || str.[0] = ' ') ->\n      Bytes.set res 0 str.[0];\n      String.blit str 1 res (width - len + 1) (len - 1)\n    | Zeros when len > 1 && str.[0] = '0' && (str.[1] = 'x' || str.[1] = 'X') ->\n      Bytes.set res 1 str.[1];\n      String.blit str 2 res (width - len + 2) (len - 2)\n    | Zeros ->\n      String.blit str 0 res (width - len) len\n    end;\n    Bytes.unsafe_to_string res\n\n(* Add '0' padding to int, int32, nativeint or int64 string representation. *)\nlet fix_int_precision prec str =\n  let prec = abs prec in\n  let len = String.length str in\n  match str.[0] with\n  | ('+' | '-' | ' ') as c when prec + 1 > len ->\n    let res = Bytes.make (prec + 1) '0' in\n    Bytes.set res 0 c;\n    String.blit str 1 res (prec - len + 2) (len - 1);\n    Bytes.unsafe_to_string res\n  | '0' when prec + 2 > len && len > 1 && (str.[1] = 'x' || str.[1] = 'X') ->\n    let res = Bytes.make (prec + 2) '0' in\n    Bytes.set res 1 str.[1];\n    String.blit str 2 res (prec - len + 4) (len - 2);\n    Bytes.unsafe_to_string res\n  | '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' when prec > len ->\n    let res = Bytes.make prec '0' in\n    String.blit str 0 res (prec - len) len;\n    Bytes.unsafe_to_string res\n  | _ ->\n    str\n\n(* Escape a string according to the OCaml lexing convention. *)\nlet string_to_caml_string str =\n  let str = String.escaped str in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\\"' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Generate the format_int/int32/nativeint/int64 first argument\n   from an int_conv. *)\nlet format_of_iconv = function\n  | Int_d -> \"%d\" | Int_pd -> \"%+d\" | Int_sd -> \"% d\"\n  | Int_i -> \"%i\" | Int_pi -> \"%+i\" | Int_si -> \"% i\"\n  | Int_x -> \"%x\" | Int_Cx -> \"%#x\"\n  | Int_X -> \"%X\" | Int_CX -> \"%#X\"\n  | Int_o -> \"%o\" | Int_Co -> \"%#o\"\n  | Int_u -> \"%u\"\n\nlet format_of_iconvL = function\n  | Int_d -> \"%Ld\" | Int_pd -> \"%+Ld\" | Int_sd -> \"% Ld\"\n  | Int_i -> \"%Li\" | Int_pi -> \"%+Li\" | Int_si -> \"% Li\"\n  | Int_x -> \"%Lx\" | Int_Cx -> \"%#Lx\"\n  | Int_X -> \"%LX\" | Int_CX -> \"%#LX\"\n  | Int_o -> \"%Lo\" | Int_Co -> \"%#Lo\"\n  | Int_u -> \"%Lu\"\n\nlet format_of_iconvl = function\n  | Int_d -> \"%ld\" | Int_pd -> \"%+ld\" | Int_sd -> \"% ld\"\n  | Int_i -> \"%li\" | Int_pi -> \"%+li\" | Int_si -> \"% li\"\n  | Int_x -> \"%lx\" | Int_Cx -> \"%#lx\"\n  | Int_X -> \"%lX\" | Int_CX -> \"%#lX\"\n  | Int_o -> \"%lo\" | Int_Co -> \"%#lo\"\n  | Int_u -> \"%lu\"\n\nlet format_of_iconvn = function\n  | Int_d -> \"%nd\" | Int_pd -> \"%+nd\" | Int_sd -> \"% nd\"\n  | Int_i -> \"%ni\" | Int_pi -> \"%+ni\" | Int_si -> \"% ni\"\n  | Int_x -> \"%nx\" | Int_Cx -> \"%#nx\"\n  | Int_X -> \"%nX\" | Int_CX -> \"%#nX\"\n  | Int_o -> \"%no\" | Int_Co -> \"%#no\"\n  | Int_u -> \"%nu\"\n\n(* Generate the format_float first argument form a float_conv. *)\nlet format_of_fconv fconv prec =\n  if fconv = Float_F then \"%.12g\" else\n    let prec = abs prec in\n    let symb = char_of_fconv fconv in\n    let buf = buffer_create 16 in\n    buffer_add_char buf '%';\n    bprint_fconv_flag buf fconv;\n    buffer_add_char buf '.';\n    buffer_add_string buf (string_of_int prec);\n    buffer_add_char buf symb;\n    buffer_contents buf\n\n(* Convert an integer to a string according to a conversion. *)\nlet convert_int iconv n = format_int (format_of_iconv iconv) n\nlet convert_int32 iconv n = format_int32 (format_of_iconvl iconv) n\nlet convert_nativeint iconv n = format_nativeint (format_of_iconvn iconv) n\nlet convert_int64 iconv n = format_int64 (format_of_iconvL iconv) n\n\n(* Convert a float to string. *)\n(* Fix special case of \"OCaml float format\". *)\nlet convert_float fconv prec x =\n  match fconv with\n  | Float_h | Float_ph | Float_sh | Float_H | Float_pH | Float_sH ->\n    let sign =\n      match fconv with\n      | Float_ph | Float_pH -> '+'\n      | Float_sh | Float_sH -> ' '\n      | _ -> '-' in\n    let str = hexstring_of_float x prec sign in\n    begin match fconv with\n    | Float_H | Float_pH | Float_sH -> String.uppercase_ascii str\n    | _ -> str\n    end\n  | _ ->\n    let str = format_float (format_of_fconv fconv prec) x in\n    if fconv <> Float_F then str else\n      let len = String.length str in\n      let rec is_valid i =\n        if i = len then false else\n          match str.[i] with\n          | '.' | 'e' | 'E' -> true\n          | _ -> is_valid (i + 1)\n      in\n      match classify_float x with\n      | FP_normal | FP_subnormal | FP_zero ->\n        if is_valid 0 then str else str ^ \".\"\n      | FP_infinite ->\n        if x < 0.0 then \"neg_infinity\" else \"infinity\"\n      | FP_nan -> \"nan\"\n\n(* Convert a char to a string according to the OCaml lexical convention. *)\nlet format_caml_char c =\n  let str = Char.escaped c in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\'' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Convert a format type to string *)\nlet string_of_fmtty fmtty =\n  let buf = buffer_create 16 in\n  bprint_fmtty buf fmtty;\n  buffer_contents buf\n\n(******************************************************************************)\n                        (* Generic printing function *)\n\n(* Make a generic printing function. *)\n(* Used to generate Printf and Format printing functions. *)\n(* Parameters:\n     k: a continuation finally applied to the output stream and the accumulator.\n     o: the output stream (see k, %a and %t).\n     acc: rev list of printing entities (string, char, flush, formatting, ...).\n     fmt: the format. *)\nlet rec make_printf : type a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k o acc fmt -> match fmt with\n  | Char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k o new_acc rest\n  | Caml_char rest ->\n    fun c ->\n      let new_acc = Acc_data_string (acc, format_caml_char c) in\n      make_printf k o new_acc rest\n  | String (pad, rest) ->\n    make_padding k o acc rest pad (fun str -> str)\n  | Caml_string (pad, rest) ->\n    make_padding k o acc rest pad string_to_caml_string\n  | Int (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_int iconv\n  | Int32 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_int32 iconv\n  | Nativeint (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_nativeint iconv\n  | Int64 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_int64 iconv\n  | Float (fconv, pad, prec, rest) ->\n    make_float_padding_precision k o acc rest pad prec fconv\n  | Bool (pad, rest) ->\n    make_padding k o acc rest pad string_of_bool\n  | Alpha rest ->\n    fun f x -> make_printf k o (Acc_delay (acc, fun o -> f o x)) rest\n  | Theta rest ->\n    fun f -> make_printf k o (Acc_delay (acc, f)) rest\n  | Custom (arity, f, rest) ->\n    make_custom k o acc rest arity (f ())\n  | Reader _ ->\n    (* This case is impossible, by typing of formats. *)\n    (* Indeed, since printf and co. take a format4 as argument, the 'd and 'e\n       type parameters of fmt are obviously equals. The Reader is the\n       only constructor which touch 'd and 'e type parameters of the format\n       type, it adds an (->) to the 'd parameters. Consequently, a format4\n       cannot contain a Reader node, except in the sub-format associated to\n       an %{...%}. It's not a problem because make_printf do not call\n       itself recursively on the sub-format associated to %{...%}. *)\n    assert false\n  | Flush rest ->\n    make_printf k o (Acc_flush acc) rest\n\n  | String_literal (str, rest) ->\n    make_printf k o (Acc_string_literal (acc, str)) rest\n  | Char_literal (chr, rest) ->\n    make_printf k o (Acc_char_literal (acc, chr)) rest\n\n  | Format_arg (_, sub_fmtty, rest) ->\n    let ty = string_of_fmtty sub_fmtty in\n    (fun str ->\n      ignore str;\n      make_printf k o (Acc_data_string (acc, ty)) rest)\n  | Format_subst (_, fmtty, rest) ->\n    fun (Format (fmt, _)) -> make_printf k o acc\n      (concat_fmt (recast fmt fmtty) rest)\n\n  | Scan_char_set (_, _, rest) ->\n    let new_acc = Acc_invalid_arg (acc, \"Printf: bad conversion %[\") in\n    fun _ -> make_printf k o new_acc rest\n  | Scan_get_counter (_, rest) ->\n    (* This case should be refused for Printf. *)\n    (* Accepted for backward compatibility. *)\n    (* Interpret %l, %n and %L as %u. *)\n    fun n ->\n      let new_acc = Acc_data_string (acc, format_int \"%u\" n) in\n      make_printf k o new_acc rest\n  | Scan_next_char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k o new_acc rest\n  | Ignored_param (ign, rest) ->\n    make_ignored_param k o acc ign rest\n\n  | Formatting_lit (fmting_lit, rest) ->\n    make_printf k o (Acc_formatting_lit (acc, fmting_lit)) rest\n  | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n    let k' koc kacc =\n      make_printf k koc (Acc_formatting_gen (acc, Acc_open_tag kacc)) rest in\n    make_printf k' o End_of_acc fmt'\n  | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n    let k' koc kacc =\n      make_printf k koc (Acc_formatting_gen (acc, Acc_open_box kacc)) rest in\n    make_printf k' o End_of_acc fmt'\n\n  | End_of_format ->\n    k o acc\n\n(* Delay the error (Invalid_argument \"Printf: bad conversion %_\"). *)\n(* Generate functions to take remaining arguments (after the \"%_\"). *)\nand make_ignored_param : type x y a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k o acc ign fmt -> match ign with\n  | Ignored_char                    -> make_invalid_arg k o acc fmt\n  | Ignored_caml_char               -> make_invalid_arg k o acc fmt\n  | Ignored_string _                -> make_invalid_arg k o acc fmt\n  | Ignored_caml_string _           -> make_invalid_arg k o acc fmt\n  | Ignored_int (_, _)              -> make_invalid_arg k o acc fmt\n  | Ignored_int32 (_, _)            -> make_invalid_arg k o acc fmt\n  | Ignored_nativeint (_, _)        -> make_invalid_arg k o acc fmt\n  | Ignored_int64 (_, _)            -> make_invalid_arg k o acc fmt\n  | Ignored_float (_, _)            -> make_invalid_arg k o acc fmt\n  | Ignored_bool _                  -> make_invalid_arg k o acc fmt\n  | Ignored_format_arg _            -> make_invalid_arg k o acc fmt\n  | Ignored_format_subst (_, fmtty) -> make_from_fmtty k o acc fmtty fmt\n  | Ignored_reader                  -> assert false\n  | Ignored_scan_char_set _         -> make_invalid_arg k o acc fmt\n  | Ignored_scan_get_counter _      -> make_invalid_arg k o acc fmt\n  | Ignored_scan_next_char          -> make_invalid_arg k o acc fmt\n\n\n(* Special case of printf \"%_(\". *)\nand make_from_fmtty : type x y a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, y, x) fmtty ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k o acc fmtty fmt -> match fmtty with\n  | Char_ty rest            -> fun _ -> make_from_fmtty k o acc rest fmt\n  | String_ty rest          -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Int_ty rest             -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Int32_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Nativeint_ty rest       -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Int64_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Float_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Bool_ty rest            -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Alpha_ty rest           -> fun _ _ -> make_from_fmtty k o acc rest fmt\n  | Theta_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Any_ty rest             -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Reader_ty _             -> assert false\n  | Ignored_reader_ty _     -> assert false\n  | Format_arg_ty (_, rest) -> fun _ -> make_from_fmtty k o acc rest fmt\n  | End_of_fmtty            -> make_invalid_arg k o acc fmt\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let ty = trans (symm ty1) ty2 in\n    fun _ -> make_from_fmtty k o acc (concat_fmtty ty rest) fmt\n\n(* Insert an Acc_invalid_arg in the accumulator and continue to generate\n   closures to get the remaining arguments. *)\nand make_invalid_arg : type a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k o acc fmt ->\n  make_printf k o (Acc_invalid_arg (acc, \"Printf: bad conversion %_\")) fmt\n\n(* Fix padding, take it as an extra integer argument if needed. *)\nand make_padding : type x z a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, z -> a) padding -> (z -> string) -> x =\n  fun k o acc fmt pad trans -> match pad with\n  | No_padding ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, trans x) in\n      make_printf k o new_acc fmt\n  | Lit_padding (padty, width) ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty width (trans x)) in\n      make_printf k o new_acc fmt\n  | Arg_padding padty ->\n    fun w x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty w (trans x)) in\n      make_printf k o new_acc fmt\n\n(* Fix padding and precision for int, int32, nativeint or int64. *)\n(* Take one or two extra integer arguments if needed. *)\nand make_int_padding_precision : type x y z a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, z -> a) precision -> (int_conv -> z -> string) ->\n    int_conv -> x =\n  fun k o acc fmt pad prec trans iconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = trans iconv x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n\n(* Convert a float, fix padding and precision if needed. *)\n(* Take the float argument and one or two extra integer arguments if needed. *)\nand make_float_padding_precision : type x y a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, float -> a) precision -> float_conv -> x =\n  fun k o acc fmt pad prec fconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = convert_float fconv default_float_precision x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = convert_float fconv p x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = convert_float fconv p x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = convert_float fconv default_float_precision x in\n      let str' = fix_padding padty w str in\n      make_printf k o (Acc_data_string (acc, str')) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = convert_float fconv default_float_precision x in\n      let str' = fix_padding padty w str in\n      make_printf k o (Acc_data_string (acc, str')) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\nand make_custom : type x y a b c d e f .\n  (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n  (a, b, c, d, e, f) fmt ->\n  (a, x, y) custom_arity -> x -> y =\n  fun k o acc rest arity f -> match arity with\n  | Custom_zero -> make_printf k o (Acc_data_string (acc, f)) rest\n  | Custom_succ arity ->\n    fun x ->\n      make_custom k o acc rest arity (f x)\n\nlet const x _ = x\n\nlet rec make_iprintf : type a b c d e f.\n  (b -> f) -> b -> (a, b, c, d, e, f) fmt -> a =\n  fun k o fmt -> match fmt with\n    | Char rest ->\n        const (make_iprintf k o rest)\n    | Caml_char rest ->\n        const (make_iprintf k o rest)\n    | String (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | String (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | String (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Caml_string (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Int (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int32 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Nativeint (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int64 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Float (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Bool (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | Bool (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | Bool (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Alpha rest ->\n        const (const (make_iprintf k o rest))\n    | Theta rest ->\n        const (make_iprintf k o rest)\n    | Custom (arity, _, rest) ->\n        fn_of_custom_arity k o rest arity\n    | Reader _ ->\n        (* This case is impossible, by typing of formats.  See the\n           note in the corresponding case for make_printf. *)\n        assert false\n    | Flush rest ->\n        make_iprintf k o rest\n    | String_literal (_, rest) ->\n        make_iprintf k o rest\n    | Char_literal (_, rest) ->\n        make_iprintf k o rest\n    | Format_arg (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Format_subst (_, fmtty, rest) ->\n        fun (Format (fmt, _)) ->\n          make_iprintf k o\n            (concat_fmt (recast fmt fmtty) rest)\n    | Scan_char_set (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_get_counter (_, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_next_char rest ->\n        const (make_iprintf k o rest)\n    | Ignored_param (ign, rest) ->\n        make_ignored_param (fun x _ -> k x) o (End_of_acc) ign rest\n    | Formatting_lit (_, rest) ->\n        make_iprintf k o rest\n    | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | End_of_format ->\n        k o\nand fn_of_padding_precision :\n  type x y z a b c d e f.\n  (b -> f) -> b -> (a, b, c, d, e, f) fmt ->\n  (x, y) padding -> (y, z -> a) precision -> x =\n  fun k o fmt pad prec -> match pad, prec with\n    | No_padding   , No_precision    ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Lit_padding _, No_precision    ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, No_precision    ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Lit_precision _ ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Arg_precision   ->\n        const (const (const (make_iprintf k o fmt)))\nand fn_of_custom_arity : type x y a b c d e f .\n  (b -> f) -> b -> (a, b, c, d, e, f) fmt -> (a, x, y) custom_arity -> y =\n  fun k o fmt -> function\n    | Custom_zero ->\n        make_iprintf k o fmt\n    | Custom_succ arity ->\n        const (fn_of_custom_arity k o fmt arity)\n\n(******************************************************************************)\n                          (* Continuations for make_printf *)\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in an output_stream. *)\n(* Used as a continuation of make_printf. *)\nlet rec output_acc o acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    output_acc o p; output_string o s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    output_acc o p; output_string o \"@{\"; output_acc o acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    output_acc o p; output_string o \"@[\"; output_acc o acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> output_acc o p; output_string o s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> output_acc o p; output_char o c\n  | Acc_delay (p, f)         -> output_acc o p; f o\n  | Acc_flush p              -> output_acc o p; flush o\n  | Acc_invalid_arg (p, msg) -> output_acc o p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Used as a continuation of make_printf. *)\nlet rec bufput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    bufput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    bufput_acc b p; Buffer.add_string b \"@{\"; bufput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    bufput_acc b p; Buffer.add_string b \"@[\"; bufput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> bufput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> bufput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> bufput_acc b p; f b\n  | Acc_flush p              -> bufput_acc b p;\n  | Acc_invalid_arg (p, msg) -> bufput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Differ from bufput_acc by the interpretation of %a and %t. *)\n(* Used as a continuation of make_printf. *)\nlet rec strput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    strput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    strput_acc b p; Buffer.add_string b \"@{\"; strput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    strput_acc b p; Buffer.add_string b \"@[\"; strput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> strput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> strput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> strput_acc b p; Buffer.add_string b (f ())\n  | Acc_flush p              -> strput_acc b p;\n  | Acc_invalid_arg (p, msg) -> strput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(******************************************************************************)\n                          (* Error management *)\n\n(* Raise [Failure] with a pretty-printed error message. *)\nlet failwith_message (Format (fmt, _)) =\n  let buf = Buffer.create 256 in\n  let k () acc = strput_acc buf acc; failwith (Buffer.contents buf) in\n  make_printf k () End_of_acc fmt\n\n(******************************************************************************)\n                            (* Formatting tools *)\n\n(* Convert a string to an open block description (indent, block_type) *)\nlet open_box_of_string str =\n  if str = \"\" then (0, Pp_box) else\n    let len = String.length str in\n    let invalid_box () = failwith_message \"invalid box description %S\" str in\n    let rec parse_spaces i =\n      if i = len then i else\n        match str.[i] with\n        | ' ' | '\\t' -> parse_spaces (i + 1)\n        | _ -> i\n    and parse_lword i j =\n      if j = len then j else\n        match str.[j] with\n        | 'a' .. 'z' -> parse_lword i (j + 1)\n        | _ -> j\n    and parse_int i j =\n      if j = len then j else\n        match str.[j] with\n        | '0' .. '9' | '-' -> parse_int i (j + 1)\n        | _ -> j in\n    let wstart = parse_spaces 0 in\n    let wend = parse_lword wstart wstart in\n    let box_name = String.sub str wstart (wend - wstart) in\n    let nstart = parse_spaces wend in\n    let nend = parse_int nstart nstart in\n    let indent =\n      if nstart = nend then 0 else\n        try int_of_string (String.sub str nstart (nend - nstart))\n        with Failure _ -> invalid_box () in\n    let exp_end = parse_spaces nend in\n    if exp_end <> len then invalid_box ();\n    let box_type = match box_name with\n      | \"\" | \"b\" -> Pp_box\n      | \"h\"      -> Pp_hbox\n      | \"v\"      -> Pp_vbox\n      | \"hv\"     -> Pp_hvbox\n      | \"hov\"    -> Pp_hovbox\n      | _        -> invalid_box () in\n    (indent, box_type)\n\n(******************************************************************************)\n                            (* Parsing tools *)\n\n(* Create a padding_fmt_ebb from a padding and a format. *)\n(* Copy the padding to disjoin the type parameters of argument and result. *)\nlet make_padding_fmt_ebb : type x y .\n    (x, y) padding -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) padding_fmt_ebb =\nfun pad fmt -> match pad with\n  | No_padding         -> Padding_fmt_EBB (No_padding, fmt)\n  | Lit_padding (s, w) -> Padding_fmt_EBB (Lit_padding (s, w), fmt)\n  | Arg_padding s      -> Padding_fmt_EBB (Arg_padding s, fmt)\n\n(* Create a precision_fmt_ebb from a precision and a format. *)\n(* Copy the precision to disjoin the type parameters of argument and result. *)\nlet make_precision_fmt_ebb : type x y .\n    (x, y) precision -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) precision_fmt_ebb =\nfun prec fmt -> match prec with\n  | No_precision    -> Precision_fmt_EBB (No_precision, fmt)\n  | Lit_precision p -> Precision_fmt_EBB (Lit_precision p, fmt)\n  | Arg_precision   -> Precision_fmt_EBB (Arg_precision, fmt)\n\n(* Create a padprec_fmt_ebb from a padding, a precision and a format. *)\n(* Copy the padding and the precision to disjoin type parameters of arguments\n   and result. *)\nlet make_padprec_fmt_ebb : type x y z t .\n    (x, y) padding -> (z, t) precision ->\n    (_, _, _, _, _, _) fmt ->\n    (_, _, _, _, _) padprec_fmt_ebb =\nfun pad prec fmt ->\n  let Precision_fmt_EBB (prec, fmt') = make_precision_fmt_ebb prec fmt in\n  match pad with\n  | No_padding         -> Padprec_fmt_EBB (No_padding, prec, fmt')\n  | Lit_padding (s, w) -> Padprec_fmt_EBB (Lit_padding (s, w), prec, fmt')\n  | Arg_padding s      -> Padprec_fmt_EBB (Arg_padding s, prec, fmt')\n\n(******************************************************************************)\n                             (* Format parsing *)\n\n(* Parse a string representing a format and create a fmt_ebb. *)\n(* Raise [Failure] in case of invalid format. *)\nlet fmt_ebb_of_string ?legacy_behavior str =\n  (* Parameters naming convention:                                    *)\n  (*   - lit_start: start of the literal sequence.                    *)\n  (*   - str_ind: current index in the string.                        *)\n  (*   - end_ind: end of the current (sub-)format.                    *)\n  (*   - pct_ind: index of the '%' in the current micro-format.       *)\n  (*   - zero:  is the '0' flag defined in the current micro-format.  *)\n  (*   - minus: is the '-' flag defined in the current micro-format.  *)\n  (*   - plus:  is the '+' flag defined in the current micro-format.  *)\n  (*   - hash:  is the '#' flag defined in the current micro-format.  *)\n  (*   - space: is the ' ' flag defined in the current micro-format.  *)\n  (*   - ign:   is the '_' flag defined in the current micro-format.  *)\n  (*   - pad: padding of the current micro-format.                    *)\n  (*   - prec: precision of the current micro-format.                 *)\n  (*   - symb: char representing the conversion ('c', 's', 'd', ...). *)\n  (*   - char_set: set of characters as bitmap (see scanf %[...]).    *)\n\n  let legacy_behavior = match legacy_behavior with\n    | Some flag -> flag\n    | None -> true\n  (*  When this flag is enabled, the format parser tries to behave as\n      the <4.02 implementations, in particular it ignores most benine\n      nonsensical format. When the flag is disabled, it will reject any\n      format that is not accepted by the specification.\n\n      A typical example would be \"%+ d\": specifying both '+' (if the\n      number is positive, pad with a '+' to get the same width as\n      negative numbers) and ' ' (if the number is positive, pad with\n      a space) does not make sense, but the legacy (< 4.02)\n      implementation was happy to just ignore the space.\n  *)\n  in\n\n  (* Raise [Failure] with a friendly error message. *)\n  let invalid_format_message str_ind msg =\n    failwith_message\n      \"invalid format %S: at character number %d, %s\"\n      str str_ind msg\n  in\n\n  (* Used when the end of the format (or the current sub-format) was encountered\n      unexpectedly. *)\n  let unexpected_end_of_format end_ind =\n    invalid_format_message end_ind\n      \"unexpected end of format\"\n  in\n\n  (* Used for %0c: no other widths are implemented *)\n  let invalid_nonnull_char_width str_ind =\n    invalid_format_message str_ind\n      \"non-zero widths are unsupported for %c conversions\"\n  in\n  (* Raise [Failure] with a friendly error message about an option dependency\n     problem. *)\n  let invalid_format_without str_ind c s =\n    failwith_message\n      \"invalid format %S: at character number %d, '%c' without %s\"\n      str str_ind c s\n  in\n\n  (* Raise [Failure] with a friendly error message about an unexpected\n     character. *)\n  let expected_character str_ind expected read =\n    failwith_message\n     \"invalid format %S: at character number %d, %s expected, read %C\"\n      str str_ind expected read\n  in\n\n  (* Parse the string from beg_ind (included) to end_ind (excluded). *)\n  let rec parse : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun beg_ind end_ind -> parse_literal beg_ind beg_ind end_ind\n\n  (* Read literal characters up to '%' or '@' special characters. *)\n  and parse_literal : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind end_ind ->\n    if str_ind = end_ind then add_literal lit_start str_ind End_of_format else\n      match str.[str_ind] with\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse_format str_ind end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse_after_at (str_ind + 1) end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | _ ->\n        parse_literal lit_start (str_ind + 1) end_ind\n\n  (* Parse a format after '%' *)\n  and parse_format : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind end_ind -> parse_ign pct_ind (pct_ind + 1) end_ind\n\n  and parse_ign : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n      | '_' -> parse_flags pct_ind (str_ind+1) end_ind true\n      | _ -> parse_flags pct_ind str_ind end_ind false\n\n  and parse_flags : type e f . int -> int -> int -> bool -> (_, _, e, f) fmt_ebb\n  =\n  fun pct_ind str_ind end_ind ign ->\n    let zero = ref false and minus = ref false\n    and plus = ref false and space = ref false\n    and hash = ref false in\n    let set_flag str_ind flag =\n      (* in legacy mode, duplicate flags are accepted *)\n      if !flag && not legacy_behavior then\n        failwith_message\n          \"invalid format %S: at character number %d, duplicate flag %C\"\n          str str_ind str.[str_ind];\n      flag := true;\n    in\n    let rec read_flags str_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      begin match str.[str_ind] with\n      | '0' -> set_flag str_ind zero;  read_flags (str_ind + 1)\n      | '-' -> set_flag str_ind minus; read_flags (str_ind + 1)\n      | '+' -> set_flag str_ind plus;  read_flags (str_ind + 1)\n      | '#' -> set_flag str_ind hash; read_flags (str_ind + 1)\n      | ' ' -> set_flag str_ind space; read_flags (str_ind + 1)\n      | _ ->\n        parse_padding pct_ind str_ind end_ind\n          !zero !minus !plus !hash !space ign\n      end\n    in\n    read_flags str_ind\n\n  (* Try to read a digital or a '*' padding. *)\n  and parse_padding : type e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool -> bool ->\n        (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind zero minus plus hash space ign ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let padty = match zero, minus with\n      | false, false -> Right\n      | false, true  -> Left\n      |  true, false -> Zeros\n      |  true, true  ->\n        if legacy_behavior then Left\n        else incompatible_flag pct_ind str_ind '-' \"0\" in\n    match str.[str_ind] with\n    | '0' .. '9' ->\n      let new_ind, width = parse_positive str_ind end_ind 0 in\n      parse_after_padding pct_ind new_ind end_ind minus plus hash space ign\n        (Lit_padding (padty, width))\n    | '*' ->\n      parse_after_padding pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign (Arg_padding padty)\n    | _ ->\n      begin match padty with\n      | Left  ->\n        if not legacy_behavior then\n          invalid_format_without (str_ind - 1) '-' \"padding\";\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      | Zeros ->\n         (* a '0' padding indication not followed by anything should\n           be interpreted as a Right padding of width 0. This is used\n           by scanning conversions %0s and %0c *)\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          (Lit_padding (Right, 0))\n      | Right ->\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      end\n\n  (* Is precision defined? *)\n  and parse_after_padding : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '.' ->\n      parse_precision pct_ind (str_ind + 1) end_ind minus plus hash space ign\n        pad\n    | symb ->\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        No_precision pad symb\n\n  (* Read the digital or '*' precision. *)\n  and parse_precision : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_literal minus str_ind =\n      let new_ind, prec = parse_positive str_ind end_ind 0 in\n      parse_after_precision pct_ind new_ind end_ind minus plus hash space ign\n        pad (Lit_precision prec) in\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_literal minus str_ind\n    | ('+' | '-') as symb when legacy_behavior ->\n      (* Legacy mode would accept and ignore '+' or '-' before the\n         integer describing the desired precision; note that this\n         cannot happen for padding width, as '+' and '-' already have\n         a semantics there.\n\n         That said, the idea (supported by this tweak) that width and\n         precision literals are \"integer literals\" in the OCaml sense is\n         still blatantly wrong, as 123_456 or 0xFF are rejected. *)\n      parse_literal (minus || symb = '-') (str_ind + 1)\n    | '*' ->\n      parse_after_precision pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign pad Arg_precision\n    | _ ->\n      if legacy_behavior then\n        (* note that legacy implementation did not ignore '.' without\n           a number (as it does for padding indications), but\n           interprets it as '.0' *)\n        parse_after_precision pct_ind str_ind end_ind minus plus hash space ign\n          pad (Lit_precision 0)\n      else\n        invalid_format_without (str_ind - 1) '.' \"precision\"\n\n  (* Try to read the conversion. *)\n  and parse_after_precision : type x y z t e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, y) padding -> (z, t) precision -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad prec ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_conv (type u) (type v) (padprec : (u, v) padding) =\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        prec padprec str.[str_ind] in\n    (* in legacy mode, some formats (%s and %S) accept a weird mix of\n       padding and precision, which is merged as a single padding\n       information. For example, in %.10s the precision is implicitly\n       understood as padding %10s, but the left-padding component may\n       be specified either as a left padding or a negative precision:\n       %-.3s and %.-3s are equivalent to %-3s *)\n    match pad with\n    | No_padding -> (\n      match minus, prec with\n        | _, No_precision -> parse_conv No_padding\n        | false, Lit_precision n -> parse_conv (Lit_padding (Right, n))\n        | true, Lit_precision n -> parse_conv (Lit_padding (Left, n))\n        | false, Arg_precision -> parse_conv (Arg_padding Right)\n        | true, Arg_precision -> parse_conv (Arg_padding Left)\n    )\n    | pad -> parse_conv pad\n\n  (* Case analysis on conversion. *)\n  and parse_conversion : type x y z t u v e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> (x, y) padding ->\n        (z, t) precision -> (u, v) padding -> char -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind plus hash space ign pad prec padprec symb ->\n    (* Flags used to check option usages/compatibilities. *)\n    let plus_used  = ref false and hash_used = ref false\n    and space_used = ref false and ign_used   = ref false\n    and pad_used   = ref false and prec_used  = ref false in\n\n    (* Access to options, update flags. *)\n    let get_plus    () = plus_used  := true; plus\n    and get_hash   () = hash_used := true; hash\n    and get_space   () = space_used := true; space\n    and get_ign     () = ign_used   := true; ign\n    and get_pad     () = pad_used   := true; pad\n    and get_prec    () = prec_used  := true; prec\n    and get_padprec () = pad_used   := true; padprec in\n\n    let get_int_pad () =\n      (* %5.3d is accepted and meaningful: pad to length 5 with\n         spaces, but first pad with zeros upto length 3 (0-padding\n         is the interpretation of \"precision\" for integer formats).\n\n         %05.3d is redundant: pad to length 5 *with zeros*, but\n         first pad with zeros... To add insult to the injury, the\n         legacy implementation ignores the 0-padding indication and\n         does the 5 padding with spaces instead. We reuse this\n         interpretation for compatibility, but statically reject this\n         format when the legacy mode is disabled, to protect strict\n         users from this corner case. *)\n       match get_pad (), get_prec () with\n         | pad, No_precision -> pad\n         | No_padding, _     -> No_padding\n         | Lit_padding (Zeros, n), _ ->\n           if legacy_behavior then Lit_padding (Right, n)\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Arg_padding Zeros, _ ->\n           if legacy_behavior then Arg_padding Right\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Lit_padding _ as pad, _ -> pad\n         | Arg_padding _ as pad, _ -> pad in\n\n    (* Check that padty <> Zeros. *)\n    let check_no_0 symb (type a) (type b) (pad : (a, b) padding) =\n      match pad with\n      | No_padding -> pad\n      | Lit_padding ((Left | Right), _) -> pad\n      | Arg_padding (Left | Right) -> pad\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Lit_padding (Right, width)\n        else incompatible_flag pct_ind str_ind symb \"0\"\n      | Arg_padding Zeros ->\n        if legacy_behavior then Arg_padding Right\n        else incompatible_flag pct_ind str_ind symb \"0\"\n    in\n\n    (* Get padding as a pad_option (see \"%_\", \"%{\", \"%(\" and \"%[\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let opt_of_pad c (type a) (type b) (pad : (a, b) padding) = match pad with\n      | No_padding -> None\n      | Lit_padding (Right, width) -> Some width\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'0'\"\n      | Lit_padding (Left, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'-'\"\n      | Arg_padding _ -> incompatible_flag pct_ind str_ind c \"'*'\"\n    in\n    let get_pad_opt c = opt_of_pad c (get_pad ()) in\n    let get_padprec_opt c = opt_of_pad c (get_padprec ()) in\n\n    (* Get precision as a prec_option (see \"%_f\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let get_prec_opt () = match get_prec () with\n      | No_precision       -> None\n      | Lit_precision ndec -> Some ndec\n      | Arg_precision      -> incompatible_flag pct_ind str_ind '_' \"'*'\"\n    in\n\n    let fmt_result = match symb with\n    | ',' ->\n      parse str_ind end_ind\n    | 'c' ->\n      let char_format fmt_rest = (* %c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_char, fmt_rest))\n        else Fmt_EBB (Char fmt_rest)\n      in\n      let scan_format fmt_rest = (* %0c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_scan_next_char, fmt_rest))\n        else Fmt_EBB (Scan_next_char fmt_rest)\n      in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      begin match get_pad_opt 'c' with\n        | None -> char_format fmt_rest\n        | Some 0 -> scan_format fmt_rest\n        | Some _n ->\n           if not legacy_behavior\n           then invalid_nonnull_char_width str_ind\n           else (* legacy ignores %c widths *) char_format fmt_rest\n      end\n    | 'C' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_caml_char,fmt_rest))\n      else Fmt_EBB (Caml_char fmt_rest)\n    | 's' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (String (pad', fmt_rest'))\n    | 'S' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_caml_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (Caml_string (pad', fmt_rest'))\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' ->\n      let iconv = compute_int_conv pct_ind str_ind (get_plus ()) (get_hash ())\n        (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_int (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int (iconv, pad', prec', fmt_rest'))\n    | 'N' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = Token_counter in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' | 'n' | 'L' when str_ind=end_ind || not (is_int_base str.[str_ind]) ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = counter_of_char symb in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int32 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int32 (iconv, pad', prec', fmt_rest'))\n    | 'n' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ())\n          (get_hash ()) (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_nativeint (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Nativeint (iconv, pad', prec', fmt_rest'))\n    | 'L' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int64 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int64 (iconv, pad', prec', fmt_rest'))\n    | 'f' | 'e' | 'E' | 'g' | 'G' | 'F' | 'h' | 'H' ->\n      let fconv = compute_float_conv pct_ind str_ind (get_plus ())\n        (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_float (get_pad_opt '_', get_prec_opt ()) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Float (fconv, pad', prec', fmt_rest'))\n    | 'b' | 'B' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_bool (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (Bool (pad', fmt_rest'))\n    | 'a' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Alpha fmt_rest)\n    | 't' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Theta fmt_rest)\n    | 'r' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_reader, fmt_rest))\n      else Fmt_EBB (Reader fmt_rest)\n    | '!' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Flush fmt_rest)\n    | ('%' | '@') as c ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Char_literal (c, fmt_rest))\n    | '{' ->\n      let sub_end = search_subformat_end str_ind end_ind '}' in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_arg (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_arg (get_pad_opt '{', sub_fmtty, fmt_rest))\n    | '(' ->\n      let sub_end = search_subformat_end str_ind end_ind ')' in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_subst (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_subst (get_pad_opt '(', sub_fmtty, fmt_rest))\n    | '[' ->\n      let next_ind, char_set = parse_char_set str_ind end_ind in\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_scan_char_set (get_pad_opt '_', char_set) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_char_set (get_pad_opt '[', char_set, fmt_rest))\n    | '-' | '+' | '#' | ' ' | '_' ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         flag %C is only allowed after the '%%', before padding and precision\"\n        str pct_ind symb\n    | _ ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         invalid conversion \\\"%%%c\\\"\" str (str_ind - 1) symb\n    in\n    (* Check for unused options, and reject them as incompatible.\n\n       Such checks need to be disabled in legacy mode, as the legacy\n       parser silently ignored incompatible flags. *)\n    if not legacy_behavior then begin\n    if not !plus_used && plus then\n      incompatible_flag pct_ind str_ind symb \"'+'\";\n    if not !hash_used && hash then\n      incompatible_flag pct_ind str_ind symb \"'#'\";\n    if not !space_used && space then\n      incompatible_flag pct_ind str_ind symb \"' '\";\n    if not !pad_used  && Padding_EBB pad <> Padding_EBB No_padding then\n      incompatible_flag pct_ind str_ind symb \"`padding'\";\n    if not !prec_used && Precision_EBB prec <> Precision_EBB No_precision then\n      incompatible_flag pct_ind str_ind (if ign then '_' else symb)\n        \"`precision'\";\n    if ign && plus then incompatible_flag pct_ind str_ind '_' \"'+'\";\n    end;\n    (* this last test must not be disabled in legacy mode,\n       as ignoring it would typically result in a different typing\n       than what the legacy parser used *)\n    if not !ign_used && ign then\n      begin match symb with\n        (* argument-less formats can safely be ignored in legacy mode *)\n        | ('@' | '%' | '!' | ',') when legacy_behavior -> ()\n        | _ ->\n          incompatible_flag pct_ind str_ind symb \"'_'\"\n      end;\n    fmt_result\n\n  (* Parse formatting informations (after '@'). *)\n  and parse_after_at : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    if str_ind = end_ind then Fmt_EBB (Char_literal ('@', End_of_format))\n    else\n      match str.[str_ind] with\n      | '[' ->\n        parse_tag false (str_ind + 1) end_ind\n      | ']' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_box, fmt_rest))\n      | '{' ->\n        parse_tag true (str_ind + 1) end_ind\n      | '}' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_tag, fmt_rest))\n      | ',' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@,\", 0, 0), fmt_rest))\n      | ' ' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@ \", 1, 0), fmt_rest))\n      | ';' ->\n        parse_good_break (str_ind + 1) end_ind\n      | '?' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (FFlush, fmt_rest))\n      | '\\n' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Force_newline, fmt_rest))\n      | '.' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Flush_newline, fmt_rest))\n      | '<' ->\n        parse_magic_size (str_ind + 1) end_ind\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_at, fmt_rest))\n      | '%' when str_ind + 1 < end_ind && str.[str_ind + 1] = '%' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 2) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_percent, fmt_rest))\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse str_ind end_ind in\n        Fmt_EBB (Char_literal ('@', fmt_rest))\n      | c ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Scan_indic c, fmt_rest))\n\n  and check_open_box : type a b c d e f . (a, b, c, d, e, f) fmt -> unit =\n  fun fmt -> match fmt with\n    | String_literal (str, End_of_format) -> (\n      try ignore (open_box_of_string str) with Failure _ ->\n        ((* Emit warning: invalid open box *))\n    )\n    | _ -> ()\n\n  (* Try to read the optional <name> after \"@{\" or \"@[\". *)\n  and parse_tag : type e f . bool -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun is_open_tag str_ind end_ind ->\n    try\n      if str_ind = end_ind then raise Not_found;\n      match str.[str_ind] with\n      | '<' ->\n        let ind = String.index_from str (str_ind + 1) '>' in\n        if ind >= end_ind then raise Not_found;\n        let sub_str = String.sub str str_ind (ind - str_ind + 1) in\n        let Fmt_EBB fmt_rest = parse (ind + 1) end_ind in\n        let Fmt_EBB sub_fmt = parse str_ind (ind + 1) in\n        let sub_format = Format (sub_fmt, sub_str) in\n        let formatting = if is_open_tag then Open_tag sub_format else (\n          check_open_box sub_fmt;\n          Open_box sub_format) in\n        Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n      | _ ->\n        raise Not_found\n    with Not_found ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let sub_format = Format (End_of_format, \"\") in\n      let formatting =\n        if is_open_tag then Open_tag sub_format else Open_box sub_format in\n      Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n\n  (* Try to read the optional <width offset> after \"@;\". *)\n  and parse_good_break : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    let next_ind, formatting_lit =\n      try\n        if str_ind = end_ind || str.[str_ind] <> '<' then raise Not_found;\n        let str_ind_1 = parse_spaces (str_ind + 1) end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' -> (\n          let str_ind_2, width = parse_integer str_ind_1 end_ind in\n            let str_ind_3 = parse_spaces str_ind_2 end_ind in\n            match str.[str_ind_3] with\n              | '>' ->\n                let s = String.sub str (str_ind-2) (str_ind_3-str_ind+3) in\n                str_ind_3 + 1, Break (s, width, 0)\n              | '0' .. '9' | '-' ->\n                let str_ind_4, offset = parse_integer str_ind_3 end_ind in\n                let str_ind_5 = parse_spaces str_ind_4 end_ind in\n                if str.[str_ind_5] <> '>' then raise Not_found;\n                let s = String.sub str (str_ind-2) (str_ind_5-str_ind+3) in\n                str_ind_5 + 1, Break (s, width, offset)\n              | _ -> raise Not_found\n        )\n        | _ -> raise Not_found\n      with Not_found | Failure _ ->\n        str_ind, Break (\"@;\", 1, 0)\n    in\n    let Fmt_EBB fmt_rest = parse next_ind end_ind in\n    Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n\n  (* Parse the size in a <n>. *)\n  and parse_magic_size : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    match\n      try\n        let str_ind_1 = parse_spaces str_ind end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' ->\n          let str_ind_2, size = parse_integer str_ind_1 end_ind in\n          let str_ind_3 = parse_spaces str_ind_2 end_ind in\n          if str.[str_ind_3] <> '>' then raise Not_found;\n          let s = String.sub str (str_ind - 2) (str_ind_3 - str_ind + 3) in\n          Some (str_ind_3 + 1, Magic_size (s, size))\n        | _ -> None\n      with Not_found | Failure _ ->\n        None\n    with\n    | Some (next_ind, formatting_lit) ->\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n    | None ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Formatting_lit (Scan_indic '<', fmt_rest))\n\n  (* Parse and construct a char set. *)\n  and parse_char_set str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n\n    let char_set = create_char_set () in\n    let add_char c =\n      add_in_char_set char_set c;\n    in\n    let add_range c c' =\n      for i = int_of_char c to int_of_char c' do\n        add_in_char_set char_set (char_of_int i);\n      done;\n    in\n\n    let fail_single_percent str_ind =\n      failwith_message\n        \"invalid format %S: '%%' alone is not accepted in character sets, \\\n         use %%%% instead at position %d.\" str str_ind\n    in\n\n    (* Parse the first character of a char set. *)\n    let rec parse_char_set_start str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      let c = str.[str_ind] in\n      parse_char_set_after_char (str_ind + 1) end_ind c\n\n    (* Parse the content of a char set until the first ']'. *)\n    and parse_char_set_content str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        str_ind + 1\n      | '-' ->\n        add_char '-';\n        parse_char_set_content (str_ind + 1) end_ind\n      | c ->\n        parse_char_set_after_char (str_ind + 1) end_ind c\n\n    (* Test for range in char set. *)\n    and parse_char_set_after_char str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        str_ind + 1\n      | '-' ->\n        parse_char_set_after_minus (str_ind + 1) end_ind c\n      | ('%' | '@') as c' when c = '%' ->\n        add_char c';\n        parse_char_set_content (str_ind + 1) end_ind\n      | c' ->\n        if c = '%' then fail_single_percent str_ind;\n        (* note that '@' alone is accepted, as done by the legacy\n           implementation; the documentation specifically requires %@\n           so we could warn on that *)\n        add_char c;\n        parse_char_set_after_char (str_ind + 1) end_ind c'\n\n    (* Manage range in char set (except if the '-' the last char before ']') *)\n    and parse_char_set_after_minus str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        add_char '-';\n        str_ind + 1\n      | '%' ->\n        if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n        begin match str.[str_ind + 1] with\n          | ('%' | '@') as c' ->\n            add_range c c';\n            parse_char_set_content (str_ind + 2) end_ind\n          | _ -> fail_single_percent str_ind\n        end\n      | c' ->\n        add_range c c';\n        parse_char_set_content (str_ind + 1) end_ind\n    in\n    let str_ind, reverse =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n        | '^' -> str_ind + 1, true\n        | _ -> str_ind, false in\n    let next_ind = parse_char_set_start str_ind end_ind in\n    let char_set = freeze_char_set char_set in\n    next_ind, (if reverse then rev_char_set char_set else char_set)\n\n  (* Consume all next spaces, raise an Failure if end_ind is reached. *)\n  and parse_spaces str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    if str.[str_ind] = ' ' then parse_spaces (str_ind + 1) end_ind else str_ind\n\n  (* Read a positive integer from the string, raise a Failure if end_ind is\n     reached. *)\n  and parse_positive str_ind end_ind acc =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' as c ->\n      let new_acc = acc * 10 + (int_of_char c - int_of_char '0') in\n      if new_acc > Sys.max_string_length then\n        failwith_message\n          \"invalid format %S: integer %d is greater than the limit %d\"\n          str new_acc Sys.max_string_length\n      else\n        parse_positive (str_ind + 1) end_ind new_acc\n    | _ -> str_ind, acc\n\n  (* Read a positive or negative integer from the string, raise a Failure\n     if end_ind is reached. *)\n  and parse_integer str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_positive str_ind end_ind 0\n    | '-' -> (\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind + 1] with\n      | '0' .. '9' ->\n        let next_ind, n = parse_positive (str_ind + 1) end_ind 0 in\n        next_ind, -n\n      | c ->\n        expected_character (str_ind + 1) \"digit\" c\n    )\n    | _ -> assert false\n\n  (* Add a literal to a format from a literal character sub-sequence. *)\n  and add_literal : type a d e f .\n      int -> int -> (a, _, _, d, e, f) fmt ->\n      (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind fmt -> match str_ind - lit_start with\n    | 0    -> Fmt_EBB fmt\n    | 1    -> Fmt_EBB (Char_literal (str.[lit_start], fmt))\n    | size -> Fmt_EBB (String_literal (String.sub str lit_start size, fmt))\n\n  (* Search the end of the current sub-format\n     (i.e. the corresponding \"%}\" or \"%)\") *)\n  and search_subformat_end str_ind end_ind c =\n    if str_ind = end_ind then\n      failwith_message\n        \"invalid format %S: unclosed sub-format, \\\n         expected \\\"%%%c\\\" at character number %d\" str c end_ind;\n    match str.[str_ind] with\n    | '%' ->\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      if str.[str_ind + 1] = c then (* End of format found *) str_ind else\n        begin match str.[str_ind + 1] with\n        | '_' ->\n          (* Search for \"%_(\" or \"%_{\". *)\n          if str_ind + 2 = end_ind then unexpected_end_of_format end_ind;\n          begin match str.[str_ind + 2] with\n          | '{' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind '}' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | '(' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind ')' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | _ -> search_subformat_end (str_ind + 3) end_ind c\n          end\n        | '{' ->\n          (* %{...%} sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind '}' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '(' ->\n          (* %(...%) sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind ')' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '}' ->\n          (* Error: %(...%}. *)\n          expected_character (str_ind + 1) \"character ')'\" '}'\n        | ')' ->\n          (* Error: %{...%). *)\n          expected_character (str_ind + 1) \"character '}'\" ')'\n        | _ ->\n          search_subformat_end (str_ind + 2) end_ind c\n        end\n    | _ -> search_subformat_end (str_ind + 1) end_ind c\n\n  (* Check if symb is a valid int conversion after \"%l\", \"%n\" or \"%L\" *)\n  and is_int_base symb = match symb with\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' -> true\n    | _ -> false\n\n  (* Convert a char (l, n or L) to its associated counter. *)\n  and counter_of_char symb = match symb with\n    | 'l' -> Line_counter  | 'n' -> Char_counter\n    | 'L' -> Token_counter | _ -> assert false\n\n  (* Convert (plus, symb) to its associated int_conv. *)\n  and compute_int_conv pct_ind str_ind plus hash space symb =\n    match plus, hash, space, symb with\n    | false, false, false, 'd' -> Int_d  | false, false, false, 'i' -> Int_i\n    | false, false,  true, 'd' -> Int_sd | false, false,  true, 'i' -> Int_si\n    |  true, false, false, 'd' -> Int_pd |  true, false, false, 'i' -> Int_pi\n    | false, false, false, 'x' -> Int_x  | false, false, false, 'X' -> Int_X\n    | false,  true, false, 'x' -> Int_Cx | false,  true, false, 'X' -> Int_CX\n    | false, false, false, 'o' -> Int_o\n    | false,  true, false, 'o' -> Int_Co\n    | false, false, false, 'u' -> Int_u\n    | _, true, _, 'x' when legacy_behavior -> Int_Cx\n    | _, true, _, 'X' when legacy_behavior -> Int_CX\n    | _, true, _, 'o' when legacy_behavior -> Int_Co\n    | _, true, _, ('d' | 'i' | 'u') ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus false space symb\n      else incompatible_flag pct_ind str_ind symb \"'#'\"\n    | true, _, true, _ ->\n      if legacy_behavior then\n        (* plus and space: legacy implementation prefers plus *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\"\n    | false, _, true, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind symb \"' '\"\n    | true, _, false, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind false hash space symb\n      else incompatible_flag pct_ind str_ind symb \"'+'\"\n    | false, _, false, _ -> assert false\n\n  (* Convert (plus, symb) to its associated float_conv. *)\n  and compute_float_conv pct_ind str_ind plus space symb =\n  match plus, space, symb with\n    | false, false, 'f' -> Float_f  | false, false, 'e' -> Float_e\n    | false,  true, 'f' -> Float_sf | false,  true, 'e' -> Float_se\n    |  true, false, 'f' -> Float_pf |  true, false, 'e' -> Float_pe\n    | false, false, 'E' -> Float_E  | false, false, 'g' -> Float_g\n    | false,  true, 'E' -> Float_sE | false,  true, 'g' -> Float_sg\n    |  true, false, 'E' -> Float_pE |  true, false, 'g' -> Float_pg\n    | false, false, 'G' -> Float_G\n    | false,  true, 'G' -> Float_sG\n    |  true, false, 'G' -> Float_pG\n    | false, false, 'h' -> Float_h\n    | false,  true, 'h' -> Float_sh\n    |  true, false, 'h' -> Float_ph\n    | false, false, 'H' -> Float_H\n    | false,  true, 'H' -> Float_sH\n    |  true, false, 'H' -> Float_pH\n    | false, false, 'F' -> Float_F\n    |  true,  true, _ ->\n      if legacy_behavior then\n        (* plus and space: legacy implementation prefers plus *)\n        compute_float_conv pct_ind str_ind plus false symb\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\"\n    | false,  true, _ ->\n      if legacy_behavior then (* ignore *)\n        compute_float_conv pct_ind str_ind plus false symb\n      else incompatible_flag pct_ind str_ind symb \"' '\"\n    |  true, false, _ ->\n      if legacy_behavior then (* ignore *)\n        compute_float_conv pct_ind str_ind false space symb\n      else incompatible_flag pct_ind str_ind symb \"'+'\"\n    | false, false, _ -> assert false\n\n  (* Raise [Failure] with a friendly error message about incompatible options.*)\n  and incompatible_flag : type a . int -> int -> char -> string -> a =\n    fun pct_ind str_ind symb option ->\n      let subfmt = String.sub str pct_ind (str_ind - pct_ind) in\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         %s is incompatible with '%c' in sub-format %S\"\n        str pct_ind option symb subfmt\n\n  in parse 0 (String.length str)\n\n(******************************************************************************)\n                  (* Guarded string to format conversions *)\n\n(* Convert a string to a format according to an fmtty. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet format_of_string_fmtty str fmtty =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt fmtty, str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\"\n      str (string_of_fmtty fmtty)\n\n(* Convert a string to a format compatible with an other format. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet format_of_string_format str (Format (fmt', str')) =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt (fmtty_of_fmt fmt'), str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\" str str'\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Character operations *)\n\nexternal code: char -> int = \"%identity\"\nexternal unsafe_chr: int -> char = \"%identity\"\n\nlet chr n =\n  if n < 0 || n > 255 then invalid_arg \"Char.chr\" else unsafe_chr n\n\nexternal bytes_create: int -> bytes = \"caml_create_bytes\"\nexternal bytes_unsafe_set : bytes -> int -> char -> unit\n                           = \"%bytes_unsafe_set\"\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet escaped = function\n  | '\\'' -> \"\\\\'\"\n  | '\\\\' -> \"\\\\\\\\\"\n  | '\\n' -> \"\\\\n\"\n  | '\\t' -> \"\\\\t\"\n  | '\\r' -> \"\\\\r\"\n  | '\\b' -> \"\\\\b\"\n  | ' ' .. '~' as c ->\n      let s = bytes_create 1 in\n      bytes_unsafe_set s 0 c;\n      unsafe_to_string s\n  | c ->\n      let n = code c in\n      let s = bytes_create 4 in\n      bytes_unsafe_set s 0 '\\\\';\n      bytes_unsafe_set s 1 (unsafe_chr (48 + n / 100));\n      bytes_unsafe_set s 2 (unsafe_chr (48 + (n / 10) mod 10));\n      bytes_unsafe_set s 3 (unsafe_chr (48 + n mod 10));\n      unsafe_to_string s\n\nlet lowercase c =\n  if (c >= 'A' && c <= 'Z')\n  || (c >= '\\192' && c <= '\\214')\n  || (c >= '\\216' && c <= '\\222')\n  then unsafe_chr(code c + 32)\n  else c\n\nlet uppercase c =\n  if (c >= 'a' && c <= 'z')\n  || (c >= '\\224' && c <= '\\246')\n  || (c >= '\\248' && c <= '\\254')\n  then unsafe_chr(code c - 32)\n  else c\n\nlet lowercase_ascii c =\n  if (c >= 'A' && c <= 'Z')\n  then unsafe_chr(code c + 32)\n  else c\n\nlet uppercase_ascii c =\n  if (c >= 'a' && c <= 'z')\n  then unsafe_chr(code c - 32)\n  else c\n\ntype t = char\n\nlet compare c1 c2 = code c1 - code c2\nlet equal (c1: t) (c2: t) = compare c1 c2 = 0\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*   Xavier Leroy and Pierre Weis, projet Cristal, INRIA Rocquencourt     *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\nopen CamlinternalFormat\n\nlet kfprintf k o (Format (fmt, _)) =\n  make_printf (fun o acc -> output_acc o acc; k o) o End_of_acc fmt\nlet kbprintf k b (Format (fmt, _)) =\n  make_printf (fun b acc -> bufput_acc b acc; k b) b End_of_acc fmt\nlet ikfprintf k oc (Format (fmt, _)) =\n  make_iprintf k oc fmt\n\nlet fprintf oc fmt = kfprintf ignore oc fmt\nlet bprintf b fmt = kbprintf ignore b fmt\nlet ifprintf oc fmt = ikfprintf ignore oc fmt\nlet printf fmt = fprintf stdout fmt\nlet eprintf fmt = fprintf stderr fmt\n\nlet ksprintf k (Format (fmt, _)) =\n  let k' () acc =\n    let buf = Buffer.create 64 in\n    strput_acc buf acc;\n    k (Buffer.contents buf) in\n  make_printf k' () End_of_acc fmt\n\nlet sprintf fmt = ksprintf (fun s -> s) fmt\n\nlet kprintf = ksprintf\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Operations on internal representations of values *)\n\ntype t\n\nexternal repr : 'a -> t = \"%identity\"\nexternal obj : t -> 'a = \"%identity\"\nexternal magic : 'a -> 'b = \"%identity\"\nexternal is_int : t -> bool = \"%obj_is_int\"\nlet [@inline always] is_block a = not (is_int a)\nexternal tag : t -> int = \"caml_obj_tag\"\nexternal set_tag : t -> int -> unit = \"caml_obj_set_tag\"\nexternal size : t -> int = \"%obj_size\"\nexternal reachable_words : t -> int = \"caml_obj_reachable_words\"\nexternal field : t -> int -> t = \"%obj_field\"\nexternal set_field : t -> int -> t -> unit = \"%obj_set_field\"\nexternal floatarray_get : floatarray -> int -> float = \"caml_floatarray_get\"\nexternal floatarray_set :\n    floatarray -> int -> float -> unit = \"caml_floatarray_set\"\nlet [@inline always] double_field x i = floatarray_get (obj x : floatarray) i\nlet [@inline always] set_double_field x i v =\n  floatarray_set (obj x : floatarray) i v\nexternal new_block : int -> int -> t = \"caml_obj_block\"\nexternal dup : t -> t = \"caml_obj_dup\"\nexternal truncate : t -> int -> unit = \"caml_obj_truncate\"\nexternal add_offset : t -> Int32.t -> t = \"caml_obj_add_offset\"\n\nlet marshal (obj : t) =\n  Marshal.to_bytes obj []\nlet unmarshal str pos =\n  (Marshal.from_bytes str pos, pos + Marshal.total_size str pos)\n\nlet first_non_constant_constructor_tag = 0\nlet last_non_constant_constructor_tag = 245\n\nlet lazy_tag = 246\nlet closure_tag = 247\nlet object_tag = 248\nlet infix_tag = 249\nlet forward_tag = 250\n\nlet no_scan_tag = 251\n\nlet abstract_tag = 251\nlet string_tag = 252\nlet double_tag = 253\nlet double_array_tag = 254\nlet custom_tag = 255\nlet final_tag = custom_tag\n\n\nlet int_tag = 1000\nlet out_of_heap_tag = 1001\nlet unaligned_tag = 1002\n\nlet extension_constructor x =\n  let x = repr x in\n  let slot =\n    if (is_block x) && (tag x) <> object_tag && (size x) >= 1 then field x 0\n    else x\n  in\n  let name =\n    if (is_block slot) && (tag slot) = object_tag then field slot 0\n    else invalid_arg \"Obj.extension_constructor\"\n  in\n    if (tag name) = string_tag then (obj slot : extension_constructor)\n    else invalid_arg \"Obj.extension_constructor\"\n\nlet [@inline always] extension_name (slot : extension_constructor) =\n  (obj (field (repr slot) 0) : string)\n\nlet [@inline always] extension_id (slot : extension_constructor) =\n  (obj (field (repr slot) 1) : int)\n\nmodule Ephemeron = struct\n  type obj_t = t\n\n  type t (** ephemeron *)\n\n  external create: int -> t = \"caml_ephe_create\"\n\n  let length x = size(repr x) - 2\n\n  external get_key: t -> int -> obj_t option = \"caml_ephe_get_key\"\n  external get_key_copy: t -> int -> obj_t option = \"caml_ephe_get_key_copy\"\n  external set_key: t -> int -> obj_t -> unit = \"caml_ephe_set_key\"\n  external unset_key: t -> int -> unit = \"caml_ephe_unset_key\"\n  external check_key: t -> int -> bool = \"caml_ephe_check_key\"\n  external blit_key : t -> int -> t -> int -> int -> unit\n    = \"caml_ephe_blit_key\"\n\n  external get_data: t -> obj_t option = \"caml_ephe_get_data\"\n  external get_data_copy: t -> obj_t option = \"caml_ephe_get_data_copy\"\n  external set_data: t -> obj_t -> unit = \"caml_ephe_set_data\"\n  external unset_data: t -> unit = \"caml_ephe_unset_data\"\n  external check_data: t -> bool = \"caml_ephe_check_data\"\n  external blit_data : t -> t -> unit = \"caml_ephe_blit_data\"\n\n\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Hash tables *)\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" [@@noalloc]\nexternal old_hash_param :\n  int -> int -> 'a -> int = \"caml_hash_univ_param\" [@@noalloc]\n\nlet hash x = seeded_hash_param 10 100 0 x\nlet hash_param n1 n2 x = seeded_hash_param n1 n2 0 x\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\n\n(* We do dynamic hashing, and resize the table and rehash the elements\n   when buckets become too long. *)\n\ntype ('a, 'b) t =\n  { mutable size: int;                        (* number of entries *)\n    mutable data: ('a, 'b) bucketlist array;  (* the buckets *)\n    mutable seed: int;                        (* for randomization *)\n    mutable initial_size: int;                (* initial array size *)\n  }\n\nand ('a, 'b) bucketlist =\n    Empty\n  | Cons of { mutable key: 'a;\n              mutable data: 'b;\n              mutable next: ('a, 'b) bucketlist }\n\n(* The sign of initial_size encodes the fact that a traversal is\n   ongoing or not.\n\n   This disables the efficient in place implementation of resizing.\n*)\n\nlet ongoing_traversal h =\n  Obj.size (Obj.repr h) < 4 (* compatibility with old hash tables *)\n  || h.initial_size < 0\n\nlet flip_ongoing_traversal h =\n  h.initial_size <- - h.initial_size\n\n(* To pick random seeds if requested *)\n\nlet randomized_default =\n  let params =\n    try Sys.getenv \"OCAMLRUNPARAM\" with Not_found ->\n    try Sys.getenv \"CAMLRUNPARAM\" with Not_found -> \"\" in\n  String.contains params 'R'\n\nlet randomized = ref randomized_default\n\nlet randomize () = randomized := true\nlet is_randomized () = !randomized\n\nlet prng = lazy (Random.State.make_self_init())\n\n(* Creating a fresh, empty table *)\n\nlet rec power_2_above x n =\n  if x >= n then x\n  else if x * 2 > Sys.max_array_length then x\n  else power_2_above (x * 2) n\n\nlet create ?(random = !randomized) initial_size =\n  let s = power_2_above 16 initial_size in\n  let seed = if random then Random.State.bits (Lazy.force prng) else 0 in\n  { initial_size = s; size = 0; seed = seed; data = Array.make s Empty }\n\nlet clear h =\n  h.size <- 0;\n  let len = Array.length h.data in\n  for i = 0 to len - 1 do\n    h.data.(i) <- Empty\n  done\n\nlet reset h =\n  let len = Array.length h.data in\n  if Obj.size (Obj.repr h) < 4 (* compatibility with old hash tables *)\n    || len = abs h.initial_size then\n    clear h\n  else begin\n    h.size <- 0;\n    h.data <- Array.make (abs h.initial_size) Empty\n  end\n\nlet copy_bucketlist = function\n  | Empty -> Empty\n  | Cons {key; data; next} ->\n      let rec loop prec = function\n        | Empty -> ()\n        | Cons {key; data; next} ->\n            let r = Cons {key; data; next} in\n            begin match prec with\n            | Empty -> assert false\n            | Cons prec ->  prec.next <- r\n            end;\n            loop r next\n      in\n      let r = Cons {key; data; next} in\n      loop r next;\n      r\n\nlet copy h = { h with data = Array.map copy_bucketlist h.data }\n\nlet length h = h.size\n\nlet resize indexfun h =\n  let odata = h.data in\n  let osize = Array.length odata in\n  let nsize = osize * 2 in\n  if nsize < Sys.max_array_length then begin\n    let ndata = Array.make nsize Empty in\n    let ndata_tail = Array.make nsize Empty in\n    let inplace = not (ongoing_traversal h) in\n    h.data <- ndata;          (* so that indexfun sees the new bucket count *)\n    let rec insert_bucket = function\n      | Empty -> ()\n      | Cons {key; data; next} as cell ->\n          let cell =\n            if inplace then cell\n            else Cons {key; data; next = Empty}\n          in\n          let nidx = indexfun h key in\n          begin match ndata_tail.(nidx) with\n          | Empty -> ndata.(nidx) <- cell;\n          | Cons tail -> tail.next <- cell;\n          end;\n          ndata_tail.(nidx) <- cell;\n          insert_bucket next\n    in\n    for i = 0 to osize - 1 do\n      insert_bucket odata.(i)\n    done;\n    if inplace then\n      for i = 0 to nsize - 1 do\n        match ndata_tail.(i) with\n        | Empty -> ()\n        | Cons tail -> tail.next <- Empty\n      done;\n  end\n\nlet key_index h key =\n  (* compatibility with old hash tables *)\n  if Obj.size (Obj.repr h) >= 3\n  then (seeded_hash_param 10 100 h.seed key) land (Array.length h.data - 1)\n  else (old_hash_param 10 100 key) mod (Array.length h.data)\n\nlet add h key data =\n  let i = key_index h key in\n  let bucket = Cons{key; data; next=h.data.(i)} in\n  h.data.(i) <- bucket;\n  h.size <- h.size + 1;\n  if h.size > Array.length h.data lsl 1 then resize key_index h\n\nlet rec remove_bucket h i key prec = function\n  | Empty ->\n      ()\n  | (Cons {key=k; next}) as c ->\n      if compare k key = 0\n      then begin\n        h.size <- h.size - 1;\n        match prec with\n        | Empty -> h.data.(i) <- next\n        | Cons c -> c.next <- next\n      end\n      else remove_bucket h i key c next\n\nlet remove h key =\n  let i = key_index h key in\n  remove_bucket h i key Empty h.data.(i)\n\nlet rec find_rec key = function\n  | Empty ->\n      raise Not_found\n  | Cons{key=k; data; next} ->\n      if compare key k = 0 then data else find_rec key next\n\nlet find h key =\n  match h.data.(key_index h key) with\n  | Empty -> raise Not_found\n  | Cons{key=k1; data=d1; next=next1} ->\n      if compare key k1 = 0 then d1 else\n      match next1 with\n      | Empty -> raise Not_found\n      | Cons{key=k2; data=d2; next=next2} ->\n          if compare key k2 = 0 then d2 else\n          match next2 with\n          | Empty -> raise Not_found\n          | Cons{key=k3; data=d3; next=next3} ->\n              if compare key k3 = 0 then d3 else find_rec key next3\n\nlet rec find_rec_opt key = function\n  | Empty ->\n      None\n  | Cons{key=k; data; next} ->\n      if compare key k = 0 then Some data else find_rec_opt key next\n\nlet find_opt h key =\n  match h.data.(key_index h key) with\n  | Empty -> None\n  | Cons{key=k1; data=d1; next=next1} ->\n      if compare key k1 = 0 then Some d1 else\n      match next1 with\n      | Empty -> None\n      | Cons{key=k2; data=d2; next=next2} ->\n          if compare key k2 = 0 then Some d2 else\n          match next2 with\n          | Empty -> None\n          | Cons{key=k3; data=d3; next=next3} ->\n              if compare key k3 = 0 then Some d3 else find_rec_opt key next3\n\nlet find_all h key =\n  let rec find_in_bucket = function\n  | Empty ->\n      []\n  | Cons{key=k; data; next} ->\n      if compare k key = 0\n      then data :: find_in_bucket next\n      else find_in_bucket next in\n  find_in_bucket h.data.(key_index h key)\n\nlet rec replace_bucket key data = function\n  | Empty ->\n      true\n  | Cons ({key=k; next} as slot) ->\n      if compare k key = 0\n      then (slot.key <- key; slot.data <- data; false)\n      else replace_bucket key data next\n\nlet replace h key data =\n  let i = key_index h key in\n  let l = h.data.(i) in\n  if replace_bucket key data l then begin\n    h.data.(i) <- Cons{key; data; next=l};\n    h.size <- h.size + 1;\n    if h.size > Array.length h.data lsl 1 then resize key_index h\n  end\n\nlet mem h key =\n  let rec mem_in_bucket = function\n  | Empty ->\n      false\n  | Cons{key=k; next} ->\n      compare k key = 0 || mem_in_bucket next in\n  mem_in_bucket h.data.(key_index h key)\n\nlet iter f h =\n  let rec do_bucket = function\n    | Empty ->\n        ()\n    | Cons{key; data; next} ->\n        f key data; do_bucket next in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    let d = h.data in\n    for i = 0 to Array.length d - 1 do\n      do_bucket d.(i)\n    done;\n    if not old_trav then flip_ongoing_traversal h;\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\nlet rec filter_map_inplace_bucket f h i prec = function\n  | Empty ->\n      begin match prec with\n      | Empty -> h.data.(i) <- Empty\n      | Cons c -> c.next <- Empty\n      end\n  | (Cons ({key; data; next} as c)) as slot ->\n      begin match f key data with\n      | None ->\n          h.size <- h.size - 1;\n          filter_map_inplace_bucket f h i prec next\n      | Some data ->\n          begin match prec with\n          | Empty -> h.data.(i) <- slot\n          | Cons c -> c.next <- slot\n          end;\n          c.data <- data;\n          filter_map_inplace_bucket f h i slot next\n      end\n\nlet filter_map_inplace f h =\n  let d = h.data in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    for i = 0 to Array.length d - 1 do\n      filter_map_inplace_bucket f h i Empty h.data.(i)\n    done\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\nlet fold f h init =\n  let rec do_bucket b accu =\n    match b with\n      Empty ->\n        accu\n    | Cons{key; data; next} ->\n        do_bucket next (f key data accu) in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    let d = h.data in\n    let accu = ref init in\n    for i = 0 to Array.length d - 1 do\n      accu := do_bucket d.(i) !accu\n    done;\n    if not old_trav then flip_ongoing_traversal h;\n    !accu\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\ntype statistics = {\n  num_bindings: int;\n  num_buckets: int;\n  max_bucket_length: int;\n  bucket_histogram: int array\n}\n\nlet rec bucket_length accu = function\n  | Empty -> accu\n  | Cons{next} -> bucket_length (accu + 1) next\n\nlet stats h =\n  let mbl =\n    Array.fold_left (fun m b -> max m (bucket_length 0 b)) 0 h.data in\n  let histo = Array.make (mbl + 1) 0 in\n  Array.iter\n    (fun b ->\n      let l = bucket_length 0 b in\n      histo.(l) <- histo.(l) + 1)\n    h.data;\n  { num_bindings = h.size;\n    num_buckets = Array.length h.data;\n    max_bucket_length = mbl;\n    bucket_histogram = histo }\n\n(** {6 Iterators} *)\n\nlet to_seq tbl =\n  (* capture current array, so that even if the table is resized we\n     keep iterating on the same array *)\n  let tbl_data = tbl.data in\n  (* state: index * next bucket to traverse *)\n  let rec aux i buck () = match buck with\n    | Empty ->\n        if i = Array.length tbl_data\n        then Seq.Nil\n        else aux(i+1) tbl_data.(i) ()\n    | Cons {key; data; next} ->\n        Seq.Cons ((key, data), aux i next)\n  in\n  aux 0 Empty\n\nlet to_seq_keys m = Seq.map fst (to_seq m)\n\nlet to_seq_values m = Seq.map snd (to_seq m)\n\nlet add_seq tbl i =\n  Seq.iter (fun (k,v) -> add tbl k v) i\n\nlet replace_seq tbl i =\n  Seq.iter (fun (k,v) -> replace tbl k v) i\n\nlet of_seq i =\n  let tbl = create 16 in\n  replace_seq tbl i;\n  tbl\n\n(* Functorial interface *)\n\nmodule type HashedType =\n  sig\n    type t\n    val equal: t -> t -> bool\n    val hash: t -> int\n  end\n\nmodule type SeededHashedType =\n  sig\n    type t\n    val equal: t -> t -> bool\n    val hash: int -> t -> int\n  end\n\nmodule type S =\n  sig\n    type key\n    type 'a t\n    val create: int -> 'a t\n    val clear : 'a t -> unit\n    val reset : 'a t -> unit\n    val copy: 'a t -> 'a t\n    val add: 'a t -> key -> 'a -> unit\n    val remove: 'a t -> key -> unit\n    val find: 'a t -> key -> 'a\n    val find_opt: 'a t -> key -> 'a option\n    val find_all: 'a t -> key -> 'a list\n    val replace : 'a t -> key -> 'a -> unit\n    val mem : 'a t -> key -> bool\n    val iter: (key -> 'a -> unit) -> 'a t -> unit\n    val filter_map_inplace: (key -> 'a -> 'a option) -> 'a t -> unit\n    val fold: (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val length: 'a t -> int\n    val stats: 'a t -> statistics\n    val to_seq : 'a t -> (key * 'a) Seq.t\n    val to_seq_keys : _ t -> key Seq.t\n    val to_seq_values : 'a t -> 'a Seq.t\n    val add_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val of_seq : (key * 'a) Seq.t -> 'a t\n  end\n\nmodule type SeededS =\n  sig\n    type key\n    type 'a t\n    val create : ?random:bool -> int -> 'a t\n    val clear : 'a t -> unit\n    val reset : 'a t -> unit\n    val copy : 'a t -> 'a t\n    val add : 'a t -> key -> 'a -> unit\n    val remove : 'a t -> key -> unit\n    val find : 'a t -> key -> 'a\n    val find_opt: 'a t -> key -> 'a option\n    val find_all : 'a t -> key -> 'a list\n    val replace : 'a t -> key -> 'a -> unit\n    val mem : 'a t -> key -> bool\n    val iter : (key -> 'a -> unit) -> 'a t -> unit\n    val filter_map_inplace: (key -> 'a -> 'a option) -> 'a t -> unit\n    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val length : 'a t -> int\n    val stats: 'a t -> statistics\n    val to_seq : 'a t -> (key * 'a) Seq.t\n    val to_seq_keys : _ t -> key Seq.t\n    val to_seq_values : 'a t -> 'a Seq.t\n    val add_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val of_seq : (key * 'a) Seq.t -> 'a t\n  end\n\nmodule MakeSeeded(H: SeededHashedType): (SeededS with type key = H.t) =\n  struct\n    type key = H.t\n    type 'a hashtbl = (key, 'a) t\n    type 'a t = 'a hashtbl\n    let create = create\n    let clear = clear\n    let reset = reset\n    let copy = copy\n\n    let key_index h key =\n      (H.hash h.seed key) land (Array.length h.data - 1)\n\n    let add h key data =\n      let i = key_index h key in\n      let bucket = Cons{key; data; next=h.data.(i)} in\n      h.data.(i) <- bucket;\n      h.size <- h.size + 1;\n      if h.size > Array.length h.data lsl 1 then resize key_index h\n\n    let rec remove_bucket h i key prec = function\n      | Empty ->\n          ()\n      | (Cons {key=k; next}) as c ->\n          if H.equal k key\n          then begin\n            h.size <- h.size - 1;\n            match prec with\n            | Empty -> h.data.(i) <- next\n            | Cons c -> c.next <- next\n          end\n          else remove_bucket h i key c next\n\n    let remove h key =\n      let i = key_index h key in\n      remove_bucket h i key Empty h.data.(i)\n\n    let rec find_rec key = function\n      | Empty ->\n          raise Not_found\n      | Cons{key=k; data; next} ->\n          if H.equal key k then data else find_rec key next\n\n    let find h key =\n      match h.data.(key_index h key) with\n      | Empty -> raise Not_found\n      | Cons{key=k1; data=d1; next=next1} ->\n          if H.equal key k1 then d1 else\n          match next1 with\n          | Empty -> raise Not_found\n          | Cons{key=k2; data=d2; next=next2} ->\n              if H.equal key k2 then d2 else\n              match next2 with\n              | Empty -> raise Not_found\n              | Cons{key=k3; data=d3; next=next3} ->\n                  if H.equal key k3 then d3 else find_rec key next3\n\n    let rec find_rec_opt key = function\n      | Empty ->\n          None\n      | Cons{key=k; data; next} ->\n          if H.equal key k then Some data else find_rec_opt key next\n\n    let find_opt h key =\n      match h.data.(key_index h key) with\n      | Empty -> None\n      | Cons{key=k1; data=d1; next=next1} ->\n          if H.equal key k1 then Some d1 else\n          match next1 with\n          | Empty -> None\n          | Cons{key=k2; data=d2; next=next2} ->\n              if H.equal key k2 then Some d2 else\n              match next2 with\n              | Empty -> None\n              | Cons{key=k3; data=d3; next=next3} ->\n                  if H.equal key k3 then Some d3 else find_rec_opt key next3\n\n    let find_all h key =\n      let rec find_in_bucket = function\n      | Empty ->\n          []\n      | Cons{key=k; data=d; next} ->\n          if H.equal k key\n          then d :: find_in_bucket next\n          else find_in_bucket next in\n      find_in_bucket h.data.(key_index h key)\n\n    let rec replace_bucket key data = function\n      | Empty ->\n          true\n      | Cons ({key=k; next} as slot) ->\n          if H.equal k key\n          then (slot.key <- key; slot.data <- data; false)\n          else replace_bucket key data next\n\n    let replace h key data =\n      let i = key_index h key in\n      let l = h.data.(i) in\n      if replace_bucket key data l then begin\n        h.data.(i) <- Cons{key; data; next=l};\n        h.size <- h.size + 1;\n        if h.size > Array.length h.data lsl 1 then resize key_index h\n      end\n\n    let mem h key =\n      let rec mem_in_bucket = function\n      | Empty ->\n          false\n      | Cons{key=k; next} ->\n          H.equal k key || mem_in_bucket next in\n      mem_in_bucket h.data.(key_index h key)\n\n    let iter = iter\n    let filter_map_inplace = filter_map_inplace\n    let fold = fold\n    let length = length\n    let stats = stats\n    let to_seq = to_seq\n    let to_seq_keys = to_seq_keys\n    let to_seq_values = to_seq_values\n    let add_seq = add_seq\n    let replace_seq = replace_seq\n    let of_seq = of_seq\n  end\n\nmodule Make(H: HashedType): (S with type key = H.t) =\n  struct\n    include MakeSeeded(struct\n        type t = H.t\n        let equal = H.equal\n        let hash (_seed: int) x = H.hash x\n      end)\n    let create sz = create ~random:false sz\n  end\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Registering OCaml values with the C runtime for later callbacks *)\n\nexternal register_named_value : string -> Obj.t -> unit\n                              = \"caml_register_named_value\"\n\nlet register name v =\n  register_named_value name (Obj.repr v)\n\nlet register_exception name (exn : exn) =\n  let exn = Obj.repr exn in\n  let slot = if Obj.tag exn = Obj.object_tag then exn else Obj.field exn 0 in\n  register_named_value name slot\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\ntype +'a t\n\ntype (-'a, +'b) meth_callback\n\nmodule Unsafe = struct\n  type top\n\n  type any = top t\n\n  type any_js_array = any\n\n  external inject : 'a -> any = \"%identity\"\n\n  external coerce : _ t -> _ t = \"%identity\"\n\n  external get : 'a -> 'b -> 'c = \"caml_js_get\"\n\n  external set : 'a -> 'b -> 'c -> unit = \"caml_js_set\"\n\n  external delete : 'a -> 'b -> unit = \"caml_js_delete\"\n\n  external call : 'a -> 'b -> any array -> 'c = \"caml_js_call\"\n\n  external fun_call : 'a -> any array -> 'b = \"caml_js_fun_call\"\n\n  external meth_call : 'a -> string -> any array -> 'b = \"caml_js_meth_call\"\n\n  external new_obj : 'a -> any array -> 'b = \"caml_js_new\"\n\n  external new_obj_arr : 'a -> any_js_array -> 'b = \"caml_ojs_new_arr\"\n\n  external obj : (string * any) array -> 'a = \"caml_js_object\"\n\n  external equals : 'a -> 'b -> bool = \"caml_js_equals\"\n\n  external pure_expr : (unit -> 'a) -> 'a = \"caml_js_pure_expr\"\n\n  external eval_string : string -> 'a = \"caml_js_eval_string\"\n\n  external js_expr : string -> 'a = \"caml_js_expr\"\n\n  external pure_js_expr : string -> 'a = \"caml_pure_js_expr\"\n\n  let global = pure_js_expr \"joo_global_object\"\n\n  external callback : ('a -> 'b) -> ('c, 'a -> 'b) meth_callback = \"%identity\"\n\n  external callback_with_arguments :\n    (any_js_array -> 'b) -> ('c, any_js_array -> 'b) meth_callback\n    = \"caml_js_wrap_callback_arguments\"\n\n  external callback_with_arity :\n    int -> ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n    = \"caml_js_wrap_callback_strict\"\n\n  external meth_callback :\n    ('b -> 'a) -> ('b, 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_unsafe\"\n\n  external meth_callback_with_arity :\n    int -> ('b -> 'a) -> ('b, 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_strict\"\n\n  external meth_callback_with_arguments :\n    ('b -> any_js_array -> 'a) -> ('b, any_js_array -> 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_arguments\"\n\n  (* DEPRECATED *)\n  external variable : string -> 'a = \"caml_js_var\"\nend\n\n(****)\n\ntype 'a opt = 'a\n\ntype 'a optdef = 'a\n\nexternal debugger : unit -> unit = \"debugger\"\n\nlet null : 'a opt = Unsafe.pure_js_expr \"null\"\n\nexternal some : 'a -> 'a opt = \"%identity\"\n\nlet undefined : 'a optdef = Unsafe.pure_js_expr \"undefined\"\n\nexternal def : 'a -> 'a optdef = \"%identity\"\n\nmodule type OPT = sig\n  type 'a t\n\n  val empty : 'a t\n\n  val return : 'a -> 'a t\n\n  val map : 'a t -> ('a -> 'b) -> 'b t\n\n  val bind : 'a t -> ('a -> 'b t) -> 'b t\n\n  val test : 'a t -> bool\n\n  val iter : 'a t -> ('a -> unit) -> unit\n\n  val case : 'a t -> (unit -> 'b) -> ('a -> 'b) -> 'b\n\n  val get : 'a t -> (unit -> 'a) -> 'a\n\n  val option : 'a option -> 'a t\n\n  val to_option : 'a t -> 'a option\nend\n\nmodule Opt : OPT with type 'a t = 'a opt = struct\n  type 'a t = 'a opt\n\n  let empty = null\n\n  let return = some\n\n  let map x f = if Unsafe.equals x null then null else return (f x)\n\n  let bind x f = if Unsafe.equals x null then null else f x\n\n  let test x = not (Unsafe.equals x null)\n\n  let iter x f = if not (Unsafe.equals x null) then f x\n\n  let case x f g = if Unsafe.equals x null then f () else g x\n\n  let get x f = if Unsafe.equals x null then f () else x\n\n  let option x =\n    match x with\n    | None -> empty\n    | Some x -> return x\n\n  let to_option x = case x (fun () -> None) (fun x -> Some x)\nend\n\nmodule Optdef : OPT with type 'a t = 'a optdef = struct\n  type 'a t = 'a optdef\n\n  let empty = undefined\n\n  let return = def\n\n  let map x f = if x == undefined then undefined else return (f x)\n\n  let bind x f = if x == undefined then undefined else f x\n\n  let test x = x != undefined\n\n  let iter x f = if x != undefined then f x\n\n  let case x f g = if x == undefined then f () else g x\n\n  let get x f = if x == undefined then f () else x\n\n  let option x =\n    match x with\n    | None -> empty\n    | Some x -> return x\n\n  let to_option x = case x (fun () -> None) (fun x -> Some x)\nend\n\n(****)\n\nlet coerce x f g = Opt.get (f x) (fun () -> g x)\n\nlet coerce_opt x f g = Opt.get (Opt.bind x f) (fun () -> g x)\n\n(****)\n\ntype +'a meth\n\ntype +'a gen_prop\n\ntype 'a readonly_prop = < get : 'a > gen_prop\n\ntype 'a writeonly_prop = < set : 'a -> unit > gen_prop\n\ntype 'a prop = < get : 'a ; set : 'a -> unit > gen_prop\n\ntype 'a optdef_prop = < get : 'a optdef ; set : 'a -> unit > gen_prop\n\ntype +'a constr\n\n(****)\n\ntype 'a callback = (unit, 'a) meth_callback\n\nexternal wrap_callback :\n  ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n  = \"caml_js_wrap_callback\"\n\nexternal wrap_meth_callback :\n  ('a -> 'b) -> ('a, 'b) meth_callback\n  = \"caml_js_wrap_meth_callback\"\n\n(****)\n\nlet _true = Unsafe.pure_js_expr \"true\"\n\nlet _false = Unsafe.pure_js_expr \"false\"\n\ntype match_result_handle\n\ntype string_array\n\nclass type js_string =\n  object\n    method toString : js_string t meth\n\n    method valueOf : js_string t meth\n\n    method charAt : int -> js_string t meth\n\n    method charCodeAt : int -> float meth\n\n    (* This may return NaN... *)\n    method concat : js_string t -> js_string t meth\n\n    method concat_2 : js_string t -> js_string t -> js_string t meth\n\n    method concat_3 : js_string t -> js_string t -> js_string t -> js_string t meth\n\n    method concat_4 :\n      js_string t -> js_string t -> js_string t -> js_string t -> js_string t meth\n\n    method indexOf : js_string t -> int meth\n\n    method indexOf_from : js_string t -> int -> int meth\n\n    method lastIndexOf : js_string t -> int meth\n\n    method lastIndexOf_from : js_string t -> int -> int meth\n\n    method localeCompare : js_string t -> float meth\n\n    method _match : regExp t -> match_result_handle t opt meth\n\n    method replace : regExp t -> js_string t -> js_string t meth\n\n    method replace_string : js_string t -> js_string t -> js_string t meth\n\n    method search : regExp t -> int meth\n\n    method slice : int -> int -> js_string t meth\n\n    method slice_end : int -> js_string t meth\n\n    method split : js_string t -> string_array t meth\n\n    method split_limited : js_string t -> int -> string_array t meth\n\n    method split_regExp : regExp t -> string_array t meth\n\n    method split_regExpLimited : regExp t -> int -> string_array t meth\n\n    method substring : int -> int -> js_string t meth\n\n    method substring_toEnd : int -> js_string t meth\n\n    method toLowerCase : js_string t meth\n\n    method toLocaleLowerCase : js_string t meth\n\n    method toUpperCase : js_string t meth\n\n    method toLocaleUpperCase : js_string t meth\n\n    method trim : js_string t meth\n\n    method length : int readonly_prop\n  end\n\nand regExp =\n  object\n    method exec : js_string t -> match_result_handle t opt meth\n\n    method test : js_string t -> bool t meth\n\n    method toString : js_string t meth\n\n    method source : js_string t readonly_prop\n\n    method global : bool t readonly_prop\n\n    method ignoreCase : bool t readonly_prop\n\n    method multiline : bool t readonly_prop\n\n    method lastIndex : int prop\n  end\n\nclass type string_constr =\n  object\n    method fromCharCode : int -> js_string t meth\n  end\n\nlet string_constr = Unsafe.global##._String\n\nlet regExp = Unsafe.global##._RegExp\n\nlet regExp_copy = regExp\n\nlet regExp_withFlags = regExp\n\nclass type ['a] js_array =\n  object\n    method toString : js_string t meth\n\n    method toLocaleString : js_string t meth\n\n    method concat : 'a js_array t -> 'a js_array t meth\n\n    method join : js_string t -> js_string t meth\n\n    method pop : 'a optdef meth\n\n    method push : 'a -> int meth\n\n    method push_2 : 'a -> 'a -> int meth\n\n    method push_3 : 'a -> 'a -> 'a -> int meth\n\n    method push_4 : 'a -> 'a -> 'a -> 'a -> int meth\n\n    method reverse : 'a js_array t meth\n\n    method shift : 'a optdef meth\n\n    method slice : int -> int -> 'a js_array t meth\n\n    method slice_end : int -> 'a js_array t meth\n\n    method sort : ('a -> 'a -> float) callback -> 'a js_array t meth\n\n    method sort_asStrings : 'a js_array t meth\n\n    method splice : int -> int -> 'a js_array t meth\n\n    method splice_1 : int -> int -> 'a -> 'a js_array t meth\n\n    method splice_2 : int -> int -> 'a -> 'a -> 'a js_array t meth\n\n    method splice_3 : int -> int -> 'a -> 'a -> 'a -> 'a js_array t meth\n\n    method splice_4 : int -> int -> 'a -> 'a -> 'a -> 'a -> 'a js_array t meth\n\n    method unshift : 'a -> int meth\n\n    method unshift_2 : 'a -> 'a -> int meth\n\n    method unshift_3 : 'a -> 'a -> 'a -> int meth\n\n    method unshift_4 : 'a -> 'a -> 'a -> 'a -> int meth\n\n    method some : ('a -> int -> 'a js_array t -> bool t) callback -> bool t meth\n\n    method every : ('a -> int -> 'a js_array t -> bool t) callback -> bool t meth\n\n    method forEach : ('a -> int -> 'a js_array t -> unit) callback -> unit meth\n\n    method map : ('a -> int -> 'a js_array t -> 'b) callback -> 'b js_array t meth\n\n    method filter : ('a -> int -> 'a js_array t -> bool t) callback -> 'a js_array t meth\n\n    method reduce_init :\n      ('b -> 'a -> int -> 'a js_array t -> 'b) callback -> 'b -> 'b meth\n\n    method reduce : ('a -> 'a -> int -> 'a js_array t -> 'a) callback -> 'a meth\n\n    method reduceRight_init :\n      ('b -> 'a -> int -> 'a js_array t -> 'b) callback -> 'b -> 'b meth\n\n    method reduceRight : ('a -> 'a -> int -> 'a js_array t -> 'a) callback -> 'a meth\n\n    method length : int prop\n  end\n\nlet object_constructor = Unsafe.global##._Object\n\nlet object_keys o : js_string t js_array t = object_constructor##keys o\n\nlet array_constructor = Unsafe.global##._Array\n\nlet array_empty = array_constructor\n\nlet array_length = array_constructor\n\nlet array_get : 'a #js_array t -> int -> 'a optdef = Unsafe.get\n\nlet array_set : 'a #js_array t -> int -> 'a -> unit = Unsafe.set\n\nlet array_map_poly :\n    'a #js_array t -> ('a -> int -> 'a #js_array t -> 'b) callback -> 'b #js_array t =\n fun a cb -> (Unsafe.coerce a)##map cb\n\nlet array_map f a = array_map_poly a (wrap_callback (fun x _idx _ -> f x))\n\nlet array_mapi f a = array_map_poly a (wrap_callback (fun x idx _ -> f idx x))\n\nclass type match_result =\n  object\n    inherit [js_string t] js_array\n\n    method index : int readonly_prop\n\n    method input : js_string t readonly_prop\n  end\n\nlet str_array : string_array t -> js_string t js_array t = Unsafe.coerce\n\nlet match_result : match_result_handle t -> match_result t = Unsafe.coerce\n\nclass type number =\n  object\n    method toString : js_string t meth\n\n    method toString_radix : int -> js_string t meth\n\n    method toLocaleString : js_string t meth\n\n    method toFixed : int -> js_string t meth\n\n    method toExponential : js_string t meth\n\n    method toExponential_digits : int -> js_string t meth\n\n    method toPrecision : int -> js_string t meth\n  end\n\nexternal number_of_float : float -> number t = \"caml_js_from_float\"\n\nexternal float_of_number : number t -> float = \"caml_js_to_float\"\n\nclass type date =\n  object\n    method toString : js_string t meth\n\n    method toDateString : js_string t meth\n\n    method toTimeString : js_string t meth\n\n    method toLocaleString : js_string t meth\n\n    method toLocaleDateString : js_string t meth\n\n    method toLocaleTimeString : js_string t meth\n\n    method valueOf : float meth\n\n    method getTime : float meth\n\n    method getFullYear : int meth\n\n    method getUTCFullYear : int meth\n\n    method getMonth : int meth\n\n    method getUTCMonth : int meth\n\n    method getDate : int meth\n\n    method getUTCDate : int meth\n\n    method getDay : int meth\n\n    method getUTCDay : int meth\n\n    method getHours : int meth\n\n    method getUTCHours : int meth\n\n    method getMinutes : int meth\n\n    method getUTCMinutes : int meth\n\n    method getSeconds : int meth\n\n    method getUTCSeconds : int meth\n\n    method getMilliseconds : int meth\n\n    method getUTCMilliseconds : int meth\n\n    method getTimezoneOffset : int meth\n\n    method setTime : float -> float meth\n\n    method setFullYear : int -> float meth\n\n    method setUTCFullYear : int -> float meth\n\n    method setMonth : int -> float meth\n\n    method setUTCMonth : int -> float meth\n\n    method setDate : int -> float meth\n\n    method setUTCDate : int -> float meth\n\n    method setDay : int -> float meth\n\n    method setUTCDay : int -> float meth\n\n    method setHours : int -> float meth\n\n    method setUTCHours : int -> float meth\n\n    method setMinutes : int -> float meth\n\n    method setUTCMinutes : int -> float meth\n\n    method setSeconds : int -> float meth\n\n    method setUTCSeconds : int -> float meth\n\n    method setMilliseconds : int -> float meth\n\n    method setUTCMilliseconds : int -> float meth\n\n    method toUTCString : js_string t meth\n\n    method toISOString : js_string t meth\n\n    method toJSON : 'a -> js_string t meth\n  end\n\nclass type date_constr =\n  object\n    method parse : js_string t -> float meth\n\n    method _UTC_month : int -> int -> float meth\n\n    method _UTC_day : int -> int -> float meth\n\n    method _UTC_hour : int -> int -> int -> int -> float meth\n\n    method _UTC_min : int -> int -> int -> int -> int -> float meth\n\n    method _UTC_sec : int -> int -> int -> int -> int -> int -> float meth\n\n    method _UTC_ms : int -> int -> int -> int -> int -> int -> int -> float meth\n\n    method now : float meth\n  end\n\nlet date_constr = Unsafe.global##._Date\n\nlet date : date_constr t = date_constr\n\nlet date_now : date t constr = date_constr\n\nlet date_fromTimeValue : (float -> date t) constr = date_constr\n\nlet date_month : (int -> int -> date t) constr = date_constr\n\nlet date_day : (int -> int -> int -> date t) constr = date_constr\n\nlet date_hour : (int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_min : (int -> int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_sec : (int -> int -> int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_ms : (int -> int -> int -> int -> int -> int -> int -> date t) constr =\n  date_constr\n\nclass type math =\n  object\n    method _E : float readonly_prop\n\n    method _LN2 : float readonly_prop\n\n    method _LN10 : float readonly_prop\n\n    method _LOG2E : float readonly_prop\n\n    method _LOG10E : float readonly_prop\n\n    method _PI : float readonly_prop\n\n    method _SQRT1_2_ : float readonly_prop\n\n    method _SQRT2 : float readonly_prop\n\n    method abs : float -> float meth\n\n    method acos : float -> float meth\n\n    method asin : float -> float meth\n\n    method atan : float -> float meth\n\n    method atan2 : float -> float -> float meth\n\n    method ceil : float -> float meth\n\n    method cos : float -> float meth\n\n    method exp : float -> float meth\n\n    method floor : float -> float meth\n\n    method log : float -> float meth\n\n    method max : float -> float -> float meth\n\n    method max_3 : float -> float -> float -> float meth\n\n    method max_4 : float -> float -> float -> float -> float meth\n\n    method min : float -> float -> float meth\n\n    method min_3 : float -> float -> float -> float meth\n\n    method min_4 : float -> float -> float -> float -> float meth\n\n    method pow : float -> float -> float meth\n\n    method random : float meth\n\n    method round : float -> float meth\n\n    method sin : float -> float meth\n\n    method sqrt : float -> float meth\n\n    method tan : float -> float meth\n  end\n\nlet math = Unsafe.global##._Math\n\nclass type error =\n  object\n    method name : js_string t prop\n\n    method message : js_string t prop\n\n    method stack : js_string t optdef prop\n\n    method toString : js_string t meth\n  end\n\nexception Error of error t\n\nlet error_constr = Unsafe.global##._Error\n\nlet _ = Callback.register_exception \"jsError\" (Error (Unsafe.obj [||]))\n\nlet raise_js_error : error t -> 'a = Unsafe.js_expr \"(function (exn) { throw exn })\"\n\nclass type json =\n  object\n    method parse : js_string t -> 'a meth\n\n    method stringify : 'a -> js_string t meth\n  end\n\nlet _JSON : json t = Unsafe.global##._JSON\n\nlet decodeURI (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.decodeURI [|Unsafe.inject s|]\n\nlet decodeURIComponent (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.decodeURIComponent [|Unsafe.inject s|]\n\nlet encodeURI (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.encodeURI [|Unsafe.inject s|]\n\nlet encodeURIComponent (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.encodeURIComponent [|Unsafe.inject s|]\n\nlet escape (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.escape [|Unsafe.inject s|]\n\nlet unescape (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.unescape [|Unsafe.inject s|]\n\nexternal bool : bool -> bool t = \"caml_js_from_bool\"\n\nexternal to_bool : bool t -> bool = \"caml_js_to_bool\"\n\nexternal string : string -> js_string t = \"caml_js_from_string\"\n\nexternal to_string : js_string t -> string = \"caml_js_to_string\"\n\nexternal array : 'a array -> 'a js_array t = \"caml_js_from_array\"\n\nexternal to_array : 'a js_array t -> 'a array = \"caml_js_to_array\"\n\nexternal bytestring : string -> js_string t = \"caml_jsbytes_of_string\"\n\nexternal to_bytestring : js_string t -> string = \"caml_js_to_byte_string\"\n\nexternal typeof : _ t -> js_string t = \"caml_js_typeof\"\n\nexternal instanceof : _ t -> _ constr -> bool = \"caml_js_instanceof\"\n\nlet isNaN (i : 'a) : bool =\n  to_bool (Unsafe.fun_call Unsafe.global##.isNaN [|Unsafe.inject i|])\n\nlet parseInt (s : js_string t) : int =\n  let s = Unsafe.fun_call Unsafe.global##.parseInt [|Unsafe.inject s|] in\n  if isNaN s then failwith \"parseInt\" else s\n\nlet parseFloat (s : js_string t) : float =\n  let s = Unsafe.fun_call Unsafe.global##.parseFloat [|Unsafe.inject s|] in\n  if isNaN s then failwith \"parseFloat\" else s\n\nlet _ =\n  Printexc.register_printer (function\n      | Error e -> Some (to_string e##toString)\n      | _ -> None)\n\nlet _ =\n  Printexc.register_printer (fun e ->\n      let e : < .. > t = Obj.magic e in\n      if instanceof e array_constructor then None else Some (to_string e##toString))\n\nlet string_of_error e = to_string e##toString\n\nexternal get_export_var : unit -> < .. > t = \"caml_js_export_var\"\n\nlet export_js (field : js_string t) x = Unsafe.set (get_export_var ()) field x\n\nlet export field x = export_js (string field) x\n\nlet export_all obj =\n  let keys = object_keys obj in\n  keys##forEach\n    (wrap_callback (fun (key : js_string t) _ _ -> export_js key (Unsafe.get obj key)))\n\n(****)\n\n(* DEPRECATED *)\n\ntype float_prop = float prop\n\nexternal float : float -> float = \"%identity\"\n\nexternal to_float : float -> float = \"%identity\"\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\n\nexternal caml_js_on_ie : unit -> bool t = \"caml_js_on_ie\"\n\nlet onIE = Js.to_bool (caml_js_on_ie ())\n\nexternal html_escape : js_string t -> js_string t = \"caml_js_html_escape\"\n\nexternal decode_html_entities : js_string t -> js_string t = \"caml_js_html_entities\"\n\nclass type cssStyleDeclaration =\n  object\n    method animation : js_string t prop\n\n    method animationDelay : js_string t prop\n\n    method animationDirection : js_string t prop\n\n    method animationDuration : js_string t prop\n\n    method animationFillMode : js_string t prop\n\n    method animationIterationCount : js_string t prop\n\n    method animationName : js_string t prop\n\n    method animationPlayState : js_string t prop\n\n    method animationTimingFunction : js_string t prop\n\n    method background : js_string t prop\n\n    method backgroundAttachment : js_string t prop\n\n    method backgroundColor : js_string t prop\n\n    method backgroundImage : js_string t prop\n\n    method backgroundPosition : js_string t prop\n\n    method backgroundRepeat : js_string t prop\n\n    method border : js_string t prop\n\n    method borderBottom : js_string t prop\n\n    method borderBottomColor : js_string t prop\n\n    method borderBottomStyle : js_string t prop\n\n    method borderBottomWidth : js_string t prop\n\n    method borderCollapse : js_string t prop\n\n    method borderColor : js_string t prop\n\n    method borderLeft : js_string t prop\n\n    method borderLeftColor : js_string t prop\n\n    method borderLeftStyle : js_string t prop\n\n    method borderLeftWidth : js_string t prop\n\n    method borderRadius : js_string t prop\n\n    method borderRight : js_string t prop\n\n    method borderRightColor : js_string t prop\n\n    method borderRightStyle : js_string t prop\n\n    method borderRightWidth : js_string t prop\n\n    method borderSpacing : js_string t prop\n\n    method borderStyle : js_string t prop\n\n    method borderTop : js_string t prop\n\n    method borderTopColor : js_string t prop\n\n    method borderTopStyle : js_string t prop\n\n    method borderTopWidth : js_string t prop\n\n    method borderWidth : js_string t prop\n\n    method bottom : js_string t prop\n\n    method captionSide : js_string t prop\n\n    method clear : js_string t prop\n\n    method clip : js_string t prop\n\n    method color : js_string t prop\n\n    method content : js_string t prop\n\n    method counterIncrement : js_string t prop\n\n    method counterReset : js_string t prop\n\n    method cssFloat : js_string t prop\n\n    method cssText : js_string t prop\n\n    method cursor : js_string t prop\n\n    method direction : js_string t prop\n\n    method display : js_string t prop\n\n    method emptyCells : js_string t prop\n\n    method fill : js_string t prop\n\n    method font : js_string t prop\n\n    method fontFamily : js_string t prop\n\n    method fontSize : js_string t prop\n\n    method fontStyle : js_string t prop\n\n    method fontVariant : js_string t prop\n\n    method fontWeight : js_string t prop\n\n    method height : js_string t prop\n\n    method left : js_string t prop\n\n    method letterSpacing : js_string t prop\n\n    method lineHeight : js_string t prop\n\n    method listStyle : js_string t prop\n\n    method listStyleImage : js_string t prop\n\n    method listStylePosition : js_string t prop\n\n    method listStyleType : js_string t prop\n\n    method margin : js_string t prop\n\n    method marginBottom : js_string t prop\n\n    method marginLeft : js_string t prop\n\n    method marginRight : js_string t prop\n\n    method marginTop : js_string t prop\n\n    method maxHeight : js_string t prop\n\n    method maxWidth : js_string t prop\n\n    method minHeight : js_string t prop\n\n    method minWidth : js_string t prop\n\n    method opacity : js_string t optdef prop\n\n    method outline : js_string t prop\n\n    method outlineColor : js_string t prop\n\n    method outlineOffset : js_string t prop\n\n    method outlineStyle : js_string t prop\n\n    method outlineWidth : js_string t prop\n\n    method overflow : js_string t prop\n\n    method overflowX : js_string t prop\n\n    method overflowY : js_string t prop\n\n    method padding : js_string t prop\n\n    method paddingBottom : js_string t prop\n\n    method paddingLeft : js_string t prop\n\n    method paddingRight : js_string t prop\n\n    method paddingTop : js_string t prop\n\n    method pageBreakAfter : js_string t prop\n\n    method pageBreakBefore : js_string t prop\n\n    method pointerEvents : js_string t prop\n\n    method position : js_string t prop\n\n    method right : js_string t prop\n\n    method stroke : js_string t prop\n\n    method strokeWidth : js_string t prop\n\n    method tableLayout : js_string t prop\n\n    method textAlign : js_string t prop\n\n    method textAnchor : js_string t prop\n\n    method textDecoration : js_string t prop\n\n    method textIndent : js_string t prop\n\n    method textTransform : js_string t prop\n\n    method top : js_string t prop\n\n    method transform : js_string t prop\n\n    method verticalAlign : js_string t prop\n\n    method visibility : js_string t prop\n\n    method whiteSpace : js_string t prop\n\n    method width : js_string t prop\n\n    method wordSpacing : js_string t prop\n\n    method zIndex : js_string t prop\n  end\n\ntype ('a, 'b) event_listener = ('a, 'b) Dom.event_listener\n\ntype mouse_button =\n  | No_button\n  | Left_button\n  | Middle_button\n  | Right_button\n\nclass type event =\n  object\n    inherit [element] Dom.event\n  end\n\nand mouseEvent =\n  object\n    inherit event\n\n    method relatedTarget : element t opt optdef readonly_prop\n\n    method clientX : int readonly_prop\n\n    method clientY : int readonly_prop\n\n    method screenX : int readonly_prop\n\n    method screenY : int readonly_prop\n\n    method ctrlKey : bool t readonly_prop\n\n    method shiftKey : bool t readonly_prop\n\n    method altKey : bool t readonly_prop\n\n    method metaKey : bool t readonly_prop\n\n    method button : int readonly_prop\n\n    method which : mouse_button optdef readonly_prop\n\n    method fromElement : element t opt optdef readonly_prop\n\n    method toElement : element t opt optdef readonly_prop\n\n    method pageX : int optdef readonly_prop\n\n    method pageY : int optdef readonly_prop\n  end\n\nand keyboardEvent =\n  object\n    inherit event\n\n    method altKey : bool t readonly_prop\n\n    method shiftKey : bool t readonly_prop\n\n    method ctrlKey : bool t readonly_prop\n\n    method metaKey : bool t readonly_prop\n\n    method location : int readonly_prop\n\n    method key : js_string t optdef readonly_prop\n\n    method code : js_string t optdef readonly_prop\n\n    method which : int optdef readonly_prop\n\n    method charCode : int optdef readonly_prop\n\n    method keyCode : int readonly_prop\n\n    method keyIdentifier : js_string t optdef readonly_prop\n  end\n\nand mousewheelEvent =\n  object\n    (* All browsers but Firefox *)\n    inherit mouseEvent\n\n    method wheelDelta : int readonly_prop\n\n    method wheelDeltaX : int optdef readonly_prop\n\n    method wheelDeltaY : int optdef readonly_prop\n  end\n\nand mouseScrollEvent =\n  object\n    (* Firefox *)\n    inherit mouseEvent\n\n    method detail : int readonly_prop\n\n    method axis : int optdef readonly_prop\n\n    method _HORIZONTAL_AXIS : int optdef readonly_prop\n\n    method _VERTICAL_AXIS : int optdef readonly_prop\n  end\n\nand touchEvent =\n  object\n    inherit event\n\n    method touches : touchList t readonly_prop\n\n    method targetTouches : touchList t readonly_prop\n\n    method changedTouches : touchList t readonly_prop\n\n    method ctrlKey : bool t readonly_prop\n\n    method shiftKey : bool t readonly_prop\n\n    method altKey : bool t readonly_prop\n\n    method metaKey : bool t readonly_prop\n\n    method relatedTarget : element t opt optdef readonly_prop\n  end\n\nand touchList =\n  object\n    method length : int readonly_prop\n\n    method item : int -> touch t optdef meth\n  end\n\nand touch =\n  object\n    method identifier : int readonly_prop\n\n    method target : element t optdef readonly_prop\n\n    method screenX : int readonly_prop\n\n    method screenY : int readonly_prop\n\n    method clientX : int readonly_prop\n\n    method clientY : int readonly_prop\n\n    method pageX : int readonly_prop\n\n    method pageY : int readonly_prop\n  end\n\nand dragEvent =\n  object\n    inherit mouseEvent\n\n    method dataTransfer : dataTransfer t readonly_prop\n  end\n\nand dataTransfer =\n  object\n    method dropEffect : js_string t prop\n\n    method effectAllowed : js_string t prop\n\n    method files : File.fileList t readonly_prop\n\n    method types : js_string t js_array t readonly_prop\n\n    method addElement : element t -> unit meth\n\n    method clearData : js_string t -> unit meth\n\n    method clearData_all : unit meth\n\n    method getData : js_string t -> js_string t meth\n\n    method setData : js_string t -> js_string t -> unit meth\n\n    method setDragImage : element t -> int -> int -> unit meth\n  end\n\nand eventTarget =\n  object ('self)\n    method onclick : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method ondblclick : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onmousedown : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onmouseup : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onmouseover : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onmousemove : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onmouseout : ('self t, mouseEvent t) event_listener writeonly_prop\n\n    method onkeypress : ('self t, keyboardEvent t) event_listener writeonly_prop\n\n    method onkeydown : ('self t, keyboardEvent t) event_listener writeonly_prop\n\n    method onkeyup : ('self t, keyboardEvent t) event_listener writeonly_prop\n\n    method onscroll : ('self t, event t) event_listener writeonly_prop\n\n    method ondragstart : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondragend : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondragenter : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondragover : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondragleave : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondrag : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method ondrop : ('self t, dragEvent t) event_listener writeonly_prop\n\n    method onanimationstart : ('self t, animationEvent t) event_listener writeonly_prop\n\n    method onanimationend : ('self t, animationEvent t) event_listener writeonly_prop\n\n    method onanimationiteration :\n      ('self t, animationEvent t) event_listener writeonly_prop\n\n    method onanimationcancel : ('self t, animationEvent t) event_listener writeonly_prop\n  end\n\nand popStateEvent =\n  object\n    inherit event\n\n    method state : Js.Unsafe.any readonly_prop\n  end\n\nand storageEvent =\n  object\n    inherit event\n\n    method key : js_string t opt readonly_prop\n\n    method oldValue : js_string t opt readonly_prop\n\n    method newValue : js_string t opt readonly_prop\n\n    method url : js_string t readonly_prop\n\n    method storageArea : storage t opt readonly_prop\n  end\n\nand storage =\n  object\n    method length : int readonly_prop\n\n    method key : int -> js_string t opt meth\n\n    method getItem : js_string t -> js_string t opt meth\n\n    method setItem : js_string t -> js_string t -> unit meth\n\n    method removeItem : js_string t -> unit meth\n\n    method clear : unit meth\n  end\n\nand hashChangeEvent =\n  object\n    inherit event\n\n    method oldURL : js_string t readonly_prop\n\n    method newURL : js_string t readonly_prop\n  end\n\nand animationEvent =\n  object\n    inherit event\n\n    method animationName : js_string t readonly_prop\n\n    method elapsedTime : float readonly_prop\n\n    method pseudoElement : js_string t readonly_prop\n  end\n\nand mediaEvent =\n  object\n    inherit event\n  end\n\nand nodeSelector =\n  object\n    method querySelector : js_string t -> element t opt meth\n\n    method querySelectorAll : js_string t -> element Dom.nodeList t meth\n  end\n\nand tokenList =\n  object\n    method length : int readonly_prop\n\n    method item : int -> js_string t optdef meth\n\n    method contains : js_string t -> bool t meth\n\n    method add : js_string t -> unit meth\n\n    method remove : js_string t -> unit meth\n\n    method toggle : js_string t -> bool t meth\n\n    method stringifier : js_string t prop\n  end\n\nand element =\n  object\n    inherit Dom.element\n\n    inherit nodeSelector\n\n    method id : js_string t prop\n\n    method title : js_string t prop\n\n    method lang : js_string t prop\n\n    method dir : js_string t prop\n\n    method className : js_string t prop\n\n    method classList : tokenList t readonly_prop\n\n    method style : cssStyleDeclaration t prop\n\n    method innerHTML : js_string t prop\n\n    method outerHTML : js_string t prop\n\n    method textContent : js_string t opt prop\n\n    method clientLeft : int readonly_prop\n\n    method clientTop : int readonly_prop\n\n    method clientWidth : int readonly_prop\n\n    method clientHeight : int readonly_prop\n\n    method offsetLeft : int readonly_prop\n\n    method offsetTop : int readonly_prop\n\n    method offsetParent : element t opt readonly_prop\n\n    method offsetWidth : int readonly_prop\n\n    method offsetHeight : int readonly_prop\n\n    method scrollLeft : int prop\n\n    method scrollTop : int prop\n\n    method scrollWidth : int prop\n\n    method scrollHeight : int prop\n\n    method getClientRects : clientRectList t meth\n\n    method getBoundingClientRect : clientRect t meth\n\n    method scrollIntoView : bool t -> unit meth\n\n    method click : unit meth\n\n    method focus : unit meth\n\n    method blur : unit meth\n\n    inherit eventTarget\n  end\n\nand clientRect =\n  object\n    method top : float readonly_prop\n\n    method right : float readonly_prop\n\n    method bottom : float readonly_prop\n\n    method left : float readonly_prop\n\n    method width : float optdef readonly_prop\n\n    method height : float optdef readonly_prop\n  end\n\nand clientRectList =\n  object\n    method length : int readonly_prop\n\n    method item : int -> clientRect t opt meth\n  end\n\nlet no_handler : ('a, 'b) event_listener = Dom.no_handler\n\nlet handler = Dom.handler\n\nlet full_handler = Dom.full_handler\n\nlet invoke_handler = Dom.invoke_handler\n\nmodule Event = struct\n  type 'a typ = 'a Dom.Event.typ\n\n  let click = Dom.Event.make \"click\"\n\n  let dblclick = Dom.Event.make \"dblclick\"\n\n  let mousedown = Dom.Event.make \"mousedown\"\n\n  let mouseup = Dom.Event.make \"mouseup\"\n\n  let mouseover = Dom.Event.make \"mouseover\"\n\n  let mousemove = Dom.Event.make \"mousemove\"\n\n  let mouseout = Dom.Event.make \"mouseout\"\n\n  let keypress = Dom.Event.make \"keypress\"\n\n  let keydown = Dom.Event.make \"keydown\"\n\n  let keyup = Dom.Event.make \"keyup\"\n\n  let mousewheel = Dom.Event.make \"mousewheel\"\n\n  let _DOMMouseScroll = Dom.Event.make \"DOMMouseScroll\"\n\n  let touchstart = Dom.Event.make \"touchstart\"\n\n  let touchmove = Dom.Event.make \"touchmove\"\n\n  let touchend = Dom.Event.make \"touchend\"\n\n  let touchcancel = Dom.Event.make \"touchcancel\"\n\n  let dragstart = Dom.Event.make \"dragstart\"\n\n  let dragend = Dom.Event.make \"dragend\"\n\n  let dragenter = Dom.Event.make \"dragenter\"\n\n  let dragover = Dom.Event.make \"dragover\"\n\n  let dragleave = Dom.Event.make \"dragleave\"\n\n  let drag = Dom.Event.make \"drag\"\n\n  let drop = Dom.Event.make \"drop\"\n\n  let hashchange = Dom.Event.make \"hashchange\"\n\n  let change = Dom.Event.make \"change\"\n\n  let input = Dom.Event.make \"input\"\n\n  let timeupdate = Dom.Event.make \"timeupdate\"\n\n  let submit = Dom.Event.make \"submit\"\n\n  let scroll = Dom.Event.make \"scroll\"\n\n  let focus = Dom.Event.make \"focus\"\n\n  let blur = Dom.Event.make \"blur\"\n\n  let load = Dom.Event.make \"load\"\n\n  let unload = Dom.Event.make \"unload\"\n\n  let beforeunload = Dom.Event.make \"beforeunload\"\n\n  let resize = Dom.Event.make \"resize\"\n\n  let orientationchange = Dom.Event.make \"orientationchange\"\n\n  let popstate = Dom.Event.make \"popstate\"\n\n  let error = Dom.Event.make \"error\"\n\n  let abort = Dom.Event.make \"abort\"\n\n  let select = Dom.Event.make \"select\"\n\n  let online = Dom.Event.make \"online\"\n\n  let offline = Dom.Event.make \"offline\"\n\n  let checking = Dom.Event.make \"checking\"\n\n  let noupdate = Dom.Event.make \"noupdate\"\n\n  let downloading = Dom.Event.make \"downloading\"\n\n  let progress = Dom.Event.make \"progress\"\n\n  let updateready = Dom.Event.make \"updateready\"\n\n  let cached = Dom.Event.make \"cached\"\n\n  let obsolete = Dom.Event.make \"obsolete\"\n\n  let domContentLoaded = Dom.Event.make \"DOMContentLoaded\"\n\n  let animationstart = Dom.Event.make \"animationstart\"\n\n  let animationend = Dom.Event.make \"animationend\"\n\n  let animationiteration = Dom.Event.make \"animationiteration\"\n\n  let animationcancel = Dom.Event.make \"animationcancel\"\n\n  let canplay = Dom.Event.make \"canplay\"\n\n  let canplaythrough = Dom.Event.make \"canplaythrough\"\n\n  let durationchange = Dom.Event.make \"durationchange\"\n\n  let emptied = Dom.Event.make \"emptied\"\n\n  let ended = Dom.Event.make \"ended\"\n\n  let loadeddata = Dom.Event.make \"loadeddata\"\n\n  let loadedmetadata = Dom.Event.make \"loadedmetadata\"\n\n  let loadstart = Dom.Event.make \"loadstart\"\n\n  let pause = Dom.Event.make \"pause\"\n\n  let play = Dom.Event.make \"play\"\n\n  let playing = Dom.Event.make \"playing\"\n\n  let ratechange = Dom.Event.make \"ratechange\"\n\n  let seeked = Dom.Event.make \"seeked\"\n\n  let seeking = Dom.Event.make \"seeking\"\n\n  let stalled = Dom.Event.make \"stalled\"\n\n  let suspend = Dom.Event.make \"suspend\"\n\n  let volumechange = Dom.Event.make \"volumechange\"\n\n  let waiting = Dom.Event.make \"waiting\"\n\n  let make = Dom.Event.make\nend\n\ntype event_listener_id = Dom.event_listener_id\n\nlet addEventListener = Dom.addEventListener\n\nlet removeEventListener = Dom.removeEventListener\n\nclass type ['node] collection =\n  object\n    method length : int readonly_prop\n\n    method item : int -> 'node t opt meth\n\n    method namedItem : js_string t -> 'node t opt meth\n  end\n\nclass type htmlElement = element\n\nclass type headElement =\n  object\n    inherit element\n\n    method profile : js_string t prop\n  end\n\nclass type linkElement =\n  object\n    inherit element\n\n    method disabled : bool t prop\n\n    method charset : js_string t prop\n\n    method crossorigin : js_string t prop\n\n    method href : js_string t prop\n\n    method hreflang : js_string t prop\n\n    method media : js_string t prop\n\n    method rel : js_string t prop\n\n    method rev : js_string t prop\n\n    method target : js_string t prop\n\n    method _type : js_string t prop\n  end\n\nclass type titleElement =\n  object\n    inherit element\n\n    method text : js_string t prop\n  end\n\nclass type metaElement =\n  object\n    inherit element\n\n    method content : js_string t prop\n\n    method httpEquiv : js_string t prop\n\n    method name : js_string t prop\n\n    method scheme : js_string t prop\n  end\n\nclass type baseElement =\n  object\n    inherit element\n\n    method href : js_string t prop\n\n    method target : js_string t prop\n  end\n\nclass type styleElement =\n  object\n    inherit element\n\n    method disabled : bool t prop\n\n    method media : js_string t prop\n\n    method _type : js_string t prop\n  end\n\nclass type bodyElement = element\n\nclass type formElement =\n  object\n    inherit element\n\n    method elements : element collection t readonly_prop\n\n    method length : int readonly_prop\n\n    method acceptCharset : js_string t prop\n\n    method action : js_string t prop\n\n    method enctype : js_string t prop\n\n    method _method : js_string t prop\n\n    method target : js_string t prop\n\n    method submit : unit meth\n\n    method reset : unit meth\n\n    method onsubmit : ('self t, event t) event_listener writeonly_prop\n  end\n\nclass type optGroupElement =\n  object\n    inherit element\n\n    method disabled : bool t prop\n\n    method label : js_string t prop\n  end\n\nclass type optionElement =\n  object\n    inherit optGroupElement\n\n    method form : formElement t opt readonly_prop\n\n    method defaultSelected : bool t prop\n\n    method text : js_string t readonly_prop\n\n    method index : int readonly_prop\n\n    method selected : bool t prop\n\n    method value : js_string t prop\n  end\n\nclass type selectElement =\n  object ('self)\n    inherit element\n\n    method _type : js_string t readonly_prop\n\n    method selectedIndex : int prop\n\n    method value : js_string t prop\n\n    method length : int prop\n\n    method form : formElement t opt readonly_prop\n\n    method options : optionElement collection t readonly_prop\n\n    method disabled : bool t prop\n\n    method multiple : bool t prop\n\n    method name : js_string t readonly_prop\n\n    method size : int prop\n\n    method tabIndex : int prop\n\n    method add : #optGroupElement t -> #optGroupElement t opt -> unit meth\n\n    method remove : int -> unit meth\n\n    method required : bool t writeonly_prop\n\n    method onchange : ('self t, event t) event_listener prop\n\n    method oninput : ('self t, event t) event_listener prop\n  end\n\nclass type inputElement =\n  object ('self)\n    inherit element\n\n    method defaultValue : js_string t prop\n\n    method defaultChecked : js_string t prop\n\n    method form : formElement t opt readonly_prop\n\n    method accept : js_string t prop\n\n    method accessKey : js_string t prop\n\n    method align : js_string t prop\n\n    method alt : js_string t prop\n\n    method checked : bool t prop\n\n    method disabled : bool t prop\n\n    method maxLength : int prop\n\n    method name : js_string t readonly_prop\n\n    method readOnly : bool t prop\n\n    method required : bool t writeonly_prop\n\n    method size : int prop\n\n    method src : js_string t prop\n\n    method tabIndex : int prop\n\n    method _type : js_string t readonly_prop\n\n    method useMap : js_string t prop\n\n    method value : js_string t prop\n\n    method select : unit meth\n\n    method files : File.fileList t optdef readonly_prop\n\n    method placeholder : js_string t writeonly_prop\n\n    method selectionDirection : js_string t prop\n\n    method selectionStart : int prop\n\n    method selectionEnd : int prop\n\n    method onselect : ('self t, event t) event_listener prop\n\n    method onchange : ('self t, event t) event_listener prop\n\n    method oninput : ('self t, event t) event_listener prop\n\n    method onblur : ('self t, event t) event_listener prop\n\n    method onfocus : ('self t, event t) event_listener prop\n  end\n\nclass type textAreaElement =\n  object ('self)\n    inherit element\n\n    method defaultValue : js_string t prop\n\n    method form : formElement t opt readonly_prop\n\n    method accessKey : js_string t prop\n\n    method cols : int prop\n\n    method disabled : bool t prop\n\n    method name : js_string t readonly_prop\n\n    method readOnly : bool t prop\n\n    method rows : int prop\n\n    method selectionDirection : js_string t prop\n\n    method selectionEnd : int prop\n\n    method selectionStart : int prop\n\n    method tabIndex : int prop\n\n    method _type : js_string t readonly_prop\n\n    method value : js_string t prop\n\n    method select : unit meth\n\n    method required : bool t writeonly_prop\n\n    method placeholder : js_string t writeonly_prop\n\n    method onselect : ('self t, event t) event_listener prop\n\n    method onchange : ('self t, event t) event_listener prop\n\n    method oninput : ('self t, event t) event_listener prop\n\n    method onblur : ('self t, event t) event_listener prop\n\n    method onfocus : ('self t, event t) event_listener prop\n  end\n\nclass type buttonElement =\n  object\n    inherit element\n\n    method form : formElement t opt readonly_prop\n\n    method accessKey : js_string t prop\n\n    method disabled : bool t prop\n\n    method name : js_string t readonly_prop\n\n    method tabIndex : int prop\n\n    method _type : js_string t readonly_prop\n\n    method value : js_string t prop\n  end\n\nclass type labelElement =\n  object\n    inherit element\n\n    method form : formElement t opt readonly_prop\n\n    method accessKey : js_string t prop\n\n    method htmlFor : js_string t prop\n  end\n\nclass type fieldSetElement =\n  object\n    inherit element\n\n    method form : formElement t opt readonly_prop\n  end\n\nclass type legendElement =\n  object\n    inherit element\n\n    method form : formElement t opt readonly_prop\n\n    method accessKey : js_string t prop\n  end\n\nclass type uListElement = element\n\nclass type oListElement = element\n\nclass type dListElement = element\n\nclass type liElement = element\n\nclass type divElement = element\n\nclass type paragraphElement = element\n\nclass type headingElement = element\n\nclass type quoteElement =\n  object\n    inherit element\n\n    method cite : js_string t prop\n  end\n\nclass type preElement = element\n\nclass type brElement = element\n\nclass type hrElement = element\n\nclass type modElement =\n  object\n    inherit element\n\n    method cite : js_string t prop\n\n    method dateTime : js_string t prop\n  end\n\nclass type anchorElement =\n  object\n    inherit element\n\n    method accessKey : js_string t prop\n\n    method charset : js_string t prop\n\n    method coords : js_string t prop\n\n    method href : js_string t prop\n\n    method hreflang : js_string t prop\n\n    method name : js_string t prop\n\n    method rel : js_string t prop\n\n    method rev : js_string t prop\n\n    method shape : js_string t prop\n\n    method tabIndex : int prop\n\n    method target : js_string t prop\n\n    method _type : js_string t prop\n  end\n\nclass type imageElement =\n  object ('self)\n    inherit element\n\n    method alt : js_string t prop\n\n    method src : js_string t prop\n\n    method useMap : js_string t prop\n\n    method isMap : bool t prop\n\n    method width : int prop\n\n    method height : int prop\n\n    method naturalWidth : int optdef readonly_prop\n\n    method naturalHeight : int optdef readonly_prop\n\n    method complete : bool t prop\n\n    method onload : ('self t, event t) event_listener prop\n\n    method onerror : ('self t, event t) event_listener prop\n\n    method onabort : ('self t, event t) event_listener prop\n  end\n\nclass type objectElement =\n  object\n    inherit element\n\n    method form : formElement t opt readonly_prop\n\n    method code : js_string t prop\n\n    method archive : js_string t prop\n\n    method codeBase : js_string t prop\n\n    method codeType : js_string t prop\n\n    method data : js_string t prop\n\n    method declare : bool t prop\n\n    method height : js_string t prop\n\n    method name : js_string t prop\n\n    method standby : js_string t prop\n\n    method tabIndex : int prop\n\n    method _type : js_string t prop\n\n    method useMap : js_string t prop\n\n    method width : js_string t prop\n\n    method document : Dom.element Dom.document t opt readonly_prop\n  end\n\nclass type paramElement =\n  object\n    inherit element\n\n    method name : js_string t prop\n\n    method _type : js_string t prop\n\n    method value : js_string t prop\n\n    method valueType : js_string t prop\n  end\n\nclass type areaElement =\n  object\n    inherit element\n\n    method accessKey : js_string t prop\n\n    method alt : js_string t prop\n\n    method coords : js_string t prop\n\n    method href : js_string t prop\n\n    method noHref : bool t prop\n\n    method shape : js_string t prop\n\n    method tabIndex : int prop\n\n    method target : js_string t prop\n  end\n\nclass type mapElement =\n  object\n    inherit element\n\n    method areas : areaElement collection t readonly_prop\n\n    method name : js_string t prop\n  end\n\nclass type scriptElement =\n  object\n    inherit element\n\n    method text : js_string t prop\n\n    method charset : js_string t prop\n\n    method defer : bool t prop\n\n    method src : js_string t prop\n\n    method _type : js_string t prop\n\n    method async : bool t prop\n  end\n\nclass type embedElement =\n  object\n    inherit element\n\n    method src : js_string t prop\n\n    method height : js_string t prop\n\n    method width : js_string t prop\n\n    method _type : js_string t prop\n  end\n\nclass type tableCellElement =\n  object\n    inherit element\n\n    method cellIndex : int readonly_prop\n\n    method abbr : js_string t prop\n\n    method align : js_string t prop\n\n    method axis : js_string t prop\n\n    method ch : js_string t prop\n\n    method chOff : js_string t prop\n\n    method colSpan : int prop\n\n    method headers : js_string t prop\n\n    method rowSpan : int prop\n\n    method scope : js_string t prop\n\n    method vAlign : js_string t prop\n  end\n\nclass type tableRowElement =\n  object\n    inherit element\n\n    method rowIndex : int readonly_prop\n\n    method sectionRowIndex : int readonly_prop\n\n    method cells : tableCellElement collection t readonly_prop\n\n    method align : js_string t prop\n\n    method ch : js_string t prop\n\n    method chOff : js_string t prop\n\n    method vAlign : js_string t prop\n\n    method insertCell : int -> tableCellElement t meth\n\n    method deleteCell : int -> unit meth\n  end\n\nclass type tableColElement =\n  object\n    inherit element\n\n    method align : js_string t prop\n\n    method ch : js_string t prop\n\n    method chOff : js_string t prop\n\n    method span : int prop\n\n    method vAlign : js_string t prop\n\n    method width : js_string t prop\n  end\n\nclass type tableSectionElement =\n  object\n    inherit element\n\n    method align : js_string t prop\n\n    method ch : js_string t prop\n\n    method chOff : js_string t prop\n\n    method vAlign : js_string t prop\n\n    method rows : tableRowElement collection t readonly_prop\n\n    method insertRow : int -> tableRowElement t meth\n\n    method deleteRow : int -> unit meth\n  end\n\nclass type tableCaptionElement = element\n\nclass type tableElement =\n  object\n    inherit element\n\n    method caption : tableCaptionElement t prop\n\n    method tHead : tableSectionElement t prop\n\n    method tFoot : tableSectionElement t prop\n\n    method rows : tableRowElement collection t readonly_prop\n\n    method tBodies : tableSectionElement collection t readonly_prop\n\n    method align : js_string t prop\n\n    method border : js_string t prop\n\n    method cellPadding : js_string t prop\n\n    method cellSpacing : js_string t prop\n\n    method frame : js_string t prop\n\n    method rules : js_string t prop\n\n    method summary : js_string t prop\n\n    method width : js_string t prop\n\n    method createTHead : tableSectionElement t meth\n\n    method deleteTHead : unit meth\n\n    method createTFoot : tableSectionElement t meth\n\n    method deleteTFoot : unit meth\n\n    method createCaption : tableCaptionElement t meth\n\n    method deleteCaption : unit meth\n\n    method insertRow : int -> tableRowElement t meth\n\n    method deleteRow : int -> unit meth\n  end\n\nclass type timeRanges =\n  object\n    method length : int readonly_prop\n\n    method start : int -> float meth\n\n    method end_ : int -> float meth\n  end\n\ntype networkState =\n  | NETWORK_EMPTY\n  | NETWORK_IDLE\n  | NETWORK_LOADING\n  | NETWORK_NO_SOURCE\n\ntype readyState =\n  | HAVE_NOTHING\n  | HAVE_METADATA\n  | HAVE_CURRENT_DATA\n  | HAVE_FUTURE_DATA\n  | HAVE_ENOUGH_DATA\n\n(* http://www.w3schools.com/tags/ref_av_dom.asp *)\n(* only features supported by all browser. (IE9+) *)\nclass type mediaElement =\n  object\n    inherit element\n\n    method canPlayType : js_string t -> js_string t meth\n\n    method load : unit meth\n\n    method play : unit meth\n\n    method pause : unit meth\n\n    method autoplay : bool t prop\n\n    method buffered : timeRanges t readonly_prop\n\n    method controls : bool t prop\n\n    method currentSrc : js_string t readonly_prop\n\n    method currentTime : float prop\n\n    method duration : float readonly_prop\n\n    method ended : bool t readonly_prop\n\n    method loop : bool t prop\n\n    method mediagroup : js_string t prop\n\n    method muted : bool t prop\n\n    method networkState_int : int readonly_prop\n\n    method networkState : networkState readonly_prop\n\n    method paused : bool t readonly_prop\n\n    method playbackRate : float prop\n\n    method played : timeRanges t readonly_prop\n\n    method preload : js_string t prop\n\n    method readyState_int : int readonly_prop\n\n    method readyState : readyState readonly_prop\n\n    method seekable : timeRanges t readonly_prop\n\n    method seeking : bool t readonly_prop\n\n    method src : js_string t prop\n\n    method volume : float prop\n\n    method oncanplay : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method oncanplaythrough : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method ondurationchange : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onemptied : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onended : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onloadeddata : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onloadedmetadata : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onloadstart : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onpause : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onplay : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onplaying : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onratechange : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onseeked : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onseeking : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onstalled : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onsuspend : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onvolumechange : ('self t, mediaEvent t) event_listener writeonly_prop\n\n    method onwaiting : ('self t, mediaEvent t) event_listener writeonly_prop\n  end\n\nclass type audioElement =\n  object\n    inherit mediaElement\n  end\n\nclass type videoElement =\n  object\n    inherit mediaElement\n  end\n\ntype context = js_string t\n\nlet _2d_ = Js.string \"2d\"\n\ntype canvasPattern\n\nclass type canvasElement =\n  object\n    inherit element\n\n    method width : int prop\n\n    method height : int prop\n\n    method toDataURL : js_string t meth\n\n    method toDataURL_type : js_string t -> js_string t meth\n\n    method toDataURL_type_compression : js_string t -> float -> js_string t meth\n\n    method getContext : js_string t -> canvasRenderingContext2D t meth\n  end\n\nand canvasRenderingContext2D =\n  object\n    method canvas : canvasElement t readonly_prop\n\n    method save : unit meth\n\n    method restore : unit meth\n\n    method scale : float -> float -> unit meth\n\n    method rotate : float -> unit meth\n\n    method translate : float -> float -> unit meth\n\n    method transform : float -> float -> float -> float -> float -> float -> unit meth\n\n    method setTransform : float -> float -> float -> float -> float -> float -> unit meth\n\n    method globalAlpha : float prop\n\n    method globalCompositeOperation : js_string t prop\n\n    method strokeStyle : js_string t writeonly_prop\n\n    method strokeStyle_gradient : canvasGradient t writeonly_prop\n\n    method strokeStyle_pattern : canvasPattern t writeonly_prop\n\n    method fillStyle : js_string t writeonly_prop\n\n    method fillStyle_gradient : canvasGradient t writeonly_prop\n\n    method fillStyle_pattern : canvasPattern t writeonly_prop\n\n    method createLinearGradient :\n      float -> float -> float -> float -> canvasGradient t meth\n\n    method createRadialGradient :\n      float -> float -> float -> float -> float -> float -> canvasGradient t meth\n\n    method createPattern : imageElement t -> js_string t -> canvasPattern t meth\n\n    method createPattern_fromCanvas :\n      canvasElement t -> js_string t -> canvasPattern t meth\n\n    method createPattern_fromVideo :\n      videoElement t -> js_string t -> canvasPattern t meth\n\n    method lineWidth : float prop\n\n    method lineCap : js_string t prop\n\n    method lineJoin : js_string t prop\n\n    method miterLimit : float prop\n\n    method shadowOffsetX : float prop\n\n    method shadowOffsetY : float prop\n\n    method shadowBlur : float prop\n\n    method shadowColor : js_string t prop\n\n    method clearRect : float -> float -> float -> float -> unit meth\n\n    method fillRect : float -> float -> float -> float -> unit meth\n\n    method strokeRect : float -> float -> float -> float -> unit meth\n\n    method beginPath : unit meth\n\n    method closePath : unit meth\n\n    method moveTo : float -> float -> unit meth\n\n    method lineTo : float -> float -> unit meth\n\n    method quadraticCurveTo : float -> float -> float -> float -> unit meth\n\n    method bezierCurveTo :\n      float -> float -> float -> float -> float -> float -> unit meth\n\n    method arcTo : float -> float -> float -> float -> float -> unit meth\n\n    method rect : float -> float -> float -> float -> unit meth\n\n    method arc : float -> float -> float -> float -> float -> bool t -> unit meth\n\n    method fill : unit meth\n\n    method stroke : unit meth\n\n    method clip : unit meth\n\n    method isPointInPath : float -> float -> bool t meth\n\n    method drawFocusRing : #element t -> float -> float -> bool t -> bool t meth\n\n    method font : js_string t prop\n\n    method textAlign : js_string t prop\n\n    method textBaseline : js_string t prop\n\n    method fillText : js_string t -> float -> float -> unit meth\n\n    method fillText_withWidth : js_string t -> float -> float -> float -> unit meth\n\n    method strokeText : js_string t -> float -> float -> unit meth\n\n    method strokeText_withWidth : js_string t -> float -> float -> float -> unit meth\n\n    method measureText : js_string t -> textMetrics t meth\n\n    method drawImage : imageElement t -> float -> float -> unit meth\n\n    method drawImage_withSize :\n      imageElement t -> float -> float -> float -> float -> unit meth\n\n    method drawImage_full :\n         imageElement t\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> unit meth\n\n    method drawImage_fromCanvas : canvasElement t -> float -> float -> unit meth\n\n    method drawImage_fromCanvasWithSize :\n      canvasElement t -> float -> float -> float -> float -> unit meth\n\n    method drawImage_fullFromCanvas :\n         canvasElement t\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> unit meth\n\n    method drawImage_fromVideoWithVideo : videoElement t -> float -> float -> unit meth\n\n    method drawImage_fromVideoWithSize :\n      videoElement t -> float -> float -> float -> float -> unit meth\n\n    method drawImage_fullFromVideo :\n         videoElement t\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> float\n      -> unit meth\n\n    method createImageData : int -> int -> imageData t meth\n\n    method getImageData : float -> float -> float -> float -> imageData t meth\n\n    method putImageData : imageData t -> float -> float -> unit meth\n  end\n\nand canvasGradient =\n  object\n    method addColorStop : float -> js_string t -> unit meth\n  end\n\nand textMetrics =\n  object\n    method width : float readonly_prop\n  end\n\nand imageData =\n  object\n    method width : int readonly_prop\n\n    method height : int readonly_prop\n\n    method data : canvasPixelArray t readonly_prop\n  end\n\nand canvasPixelArray =\n  object\n    method length : int readonly_prop\n  end\n\nexternal pixel_get : canvasPixelArray t -> int -> int = \"caml_js_get\"\n\nexternal pixel_set : canvasPixelArray t -> int -> int -> unit = \"caml_js_set\"\n\nclass type range =\n  object\n    method collapsed : bool t readonly_prop\n\n    method startOffset : int readonly_prop\n\n    method endOffset : int readonly_prop\n\n    method startContainer : Dom.node t readonly_prop\n\n    method endContainer : Dom.node t readonly_prop\n\n    method setStart : Dom.node t -> int -> unit meth\n\n    method setEnd : Dom.node t -> int -> unit meth\n\n    method setStartBefore : Dom.node t -> unit meth\n\n    method setEndBefore : Dom.node t -> unit meth\n\n    method setStartAfter : Dom.node t -> unit meth\n\n    method setEndAfter : Dom.node t -> unit meth\n\n    method selectNode : Dom.node t -> unit meth\n\n    method selectNodeContents : Dom.node t -> unit meth\n\n    method collapse : bool t -> unit meth\n\n    method cloneContents : Dom.documentFragment t meth\n\n    method extractContents : Dom.documentFragment t meth\n\n    method deleteContents : unit meth\n\n    method insertNode : Dom.node t -> unit meth\n\n    method surroundContents : Dom.node t -> unit meth\n\n    method cloneRange : range t meth\n\n    method toString : js_string t meth\n  end\n\n(** Information on current selection *)\nclass type selection =\n  object\n    method anchorNode : Dom.node t readonly_prop\n\n    method anchorOffset : int readonly_prop\n\n    method focusNode : Dom.node t readonly_prop\n\n    method focusOffset : int readonly_prop\n\n    method isCollapsed : bool t readonly_prop\n\n    method rangeCount : int readonly_prop\n\n    method getRangeAt : int -> range t meth\n\n    method collapse : bool t -> unit meth\n\n    method extend : Dom.node t -> int -> unit meth\n\n    method modify : js_string t -> js_string t -> js_string t -> unit meth\n\n    method collapseToStart : unit meth\n\n    method collapseToEnd : unit meth\n\n    method selectAllChildren : Dom.node t -> unit meth\n\n    method addRange : range t -> unit meth\n\n    method removeRange : range t -> unit meth\n\n    method removeAllRanges : unit meth\n\n    method deleteFromDocument : unit meth\n\n    method containsNode : Dom.node t -> bool t -> bool t meth\n\n    method toString : js_string t meth\n  end\n\nclass type document =\n  object\n    inherit [element] Dom.document\n\n    inherit nodeSelector\n\n    inherit eventTarget\n\n    method title : js_string t prop\n\n    method referrer : js_string t readonly_prop\n\n    method domain : js_string t prop\n\n    method _URL : js_string t readonly_prop\n\n    method head : headElement t prop\n\n    method body : bodyElement t prop\n\n    method documentElement : htmlElement t readonly_prop\n\n    method images : imageElement collection t readonly_prop\n\n    method applets : element collection t readonly_prop\n\n    method links : element collection t readonly_prop\n\n    method forms : formElement collection t readonly_prop\n\n    method anchors : element collection t readonly_prop\n\n    method cookie : js_string t prop\n\n    method designMode : js_string t prop\n\n    method open_ : unit meth\n\n    method close : unit meth\n\n    method write : js_string t -> unit meth\n\n    method execCommand : js_string t -> bool t -> js_string t opt -> unit meth\n\n    method createRange : range t meth\n\n    method readyState : js_string t readonly_prop\n\n    method getElementsByClassName : js_string t -> element Dom.nodeList t meth\n\n    method getElementsByName : js_string t -> element Dom.nodeList t meth\n\n    method activeElement : element t opt readonly_prop\n\n    inherit eventTarget\n  end\n\ntype interval_id\n\ntype timeout_id\n\ntype animation_frame_request_id\n\nclass type location =\n  object\n    method href : js_string t prop\n\n    method protocol : js_string t prop\n\n    method host : js_string t prop\n\n    method hostname : js_string t prop\n\n    method origin : js_string t optdef readonly_prop\n\n    method port : js_string t prop\n\n    method pathname : js_string t prop\n\n    method search : js_string t prop\n\n    method hash : js_string t prop\n\n    method assign : js_string t -> unit meth\n\n    method replace : js_string t -> unit meth\n\n    method reload : unit meth\n  end\n\nlet location_origin (loc : location t) =\n  Optdef.case\n    loc##.origin\n    (fun () ->\n      let protocol = loc##.protocol in\n      let hostname = loc##.hostname in\n      let port = loc##.port in\n      if protocol##.length = 0 && hostname##.length = 0\n      then Js.string \"\"\n      else\n        let origin = protocol##concat_2 (Js.string \"//\") hostname in\n        if port##.length > 0 then origin##concat_2 (Js.string \":\") loc##.port else origin\n      )\n    (fun o -> o)\n\nclass type history =\n  object\n    method length : int readonly_prop\n\n    method state : Js.Unsafe.any readonly_prop\n\n    method go : int opt -> unit meth\n\n    method back : unit meth\n\n    method forward : unit meth\n\n    method pushState : 'a. 'a -> js_string t -> js_string t opt -> unit meth\n\n    method replaceState : 'a. 'a -> js_string t -> js_string t opt -> unit meth\n  end\n\nclass type undoManager = object end\n\nclass type navigator =\n  object\n    method appCodeName : js_string t readonly_prop\n\n    method appName : js_string t readonly_prop\n\n    method appVersion : js_string t readonly_prop\n\n    method cookieEnabled : bool t readonly_prop\n\n    method onLine : bool t readonly_prop\n\n    method platform : js_string t readonly_prop\n\n    method userAgent : js_string t readonly_prop\n\n    method language : js_string t optdef readonly_prop\n\n    method userLanguage : js_string t optdef readonly_prop\n  end\n\nclass type screen =\n  object\n    method width : int readonly_prop\n\n    method height : int readonly_prop\n\n    method availWidth : int readonly_prop\n\n    method availHeight : int readonly_prop\n  end\n\nclass type applicationCache =\n  object\n    method status : int readonly_prop\n\n    method update : unit meth\n\n    method abort : unit meth\n\n    method swapCache : unit meth\n\n    method onchecking : (applicationCache t, event t) event_listener prop\n\n    method onerror : (applicationCache t, event t) event_listener prop\n\n    method onnoupdate : (applicationCache t, event t) event_listener prop\n\n    method ondownloading : (applicationCache t, event t) event_listener prop\n\n    method onprogress : (applicationCache t, event t) event_listener prop\n\n    method onupdateready : (applicationCache t, event t) event_listener prop\n\n    method oncached : (applicationCache t, event t) event_listener prop\n\n    method onobsolete : (applicationCache t, event t) event_listener prop\n\n    inherit eventTarget\n  end\n\nclass type _URL =\n  object\n    method createObjectURL : #File.blob t -> js_string t meth\n\n    method revokeObjectURL : js_string t -> unit meth\n  end\n\nclass type window =\n  object\n    inherit eventTarget\n\n    method document : document t readonly_prop\n\n    method applicationCache : applicationCache t readonly_prop\n\n    method name : js_string t prop\n\n    method location : location t readonly_prop\n\n    method history : history t readonly_prop\n\n    method undoManager : undoManager t readonly_prop\n\n    method navigator : navigator t readonly_prop\n\n    method getSelection : selection t meth\n\n    method close : unit meth\n\n    method closed : bool t readonly_prop\n\n    method stop : unit meth\n\n    method focus : unit meth\n\n    method blur : unit meth\n\n    method scroll : int -> int -> unit meth\n\n    method scrollBy : int -> int -> unit meth\n\n    method sessionStorage : storage t optdef readonly_prop\n\n    method localStorage : storage t optdef readonly_prop\n\n    method top : window t readonly_prop\n\n    method parent : window t readonly_prop\n\n    method frameElement : element t opt readonly_prop\n\n    method open_ : js_string t -> js_string t -> js_string t opt -> window t opt meth\n\n    method alert : js_string t -> unit meth\n\n    method confirm : js_string t -> bool t meth\n\n    method prompt : js_string t -> js_string t -> js_string t opt meth\n\n    method print : unit meth\n\n    method setInterval : (unit -> unit) Js.callback -> float -> interval_id meth\n\n    method clearInterval : interval_id -> unit meth\n\n    method setTimeout : (unit -> unit) Js.callback -> float -> timeout_id meth\n\n    method clearTimeout : timeout_id -> unit meth\n\n    method requestAnimationFrame :\n      (float -> unit) Js.callback -> animation_frame_request_id meth\n\n    method cancelAnimationFrame : animation_frame_request_id -> unit meth\n\n    method screen : screen t readonly_prop\n\n    method innerWidth : int optdef readonly_prop\n\n    method innerHeight : int optdef readonly_prop\n\n    method outerWidth : int optdef readonly_prop\n\n    method outerHeight : int optdef readonly_prop\n\n    method getComputedStyle : #element t -> cssStyleDeclaration t meth\n\n    method getComputedStyle_pseudoElt :\n      #element t -> js_string t -> cssStyleDeclaration t meth\n\n    method atob : js_string t -> js_string t meth\n\n    method btoa : js_string t -> js_string t meth\n\n    method onload : (window t, event t) event_listener prop\n\n    method onunload : (window t, event t) event_listener prop\n\n    method onbeforeunload : (window t, event t) event_listener prop\n\n    method onblur : (window t, event t) event_listener prop\n\n    method onfocus : (window t, event t) event_listener prop\n\n    method onresize : (window t, event t) event_listener prop\n\n    method onorientationchange : (window t, event t) event_listener prop\n\n    method onpopstate : (window t, popStateEvent t) event_listener prop\n\n    method onhashchange : (window t, hashChangeEvent t) event_listener prop\n\n    method ononline : (window t, event t) event_listener writeonly_prop\n\n    method onoffline : (window t, event t) event_listener writeonly_prop\n\n    method _URL : _URL t readonly_prop\n  end\n\nlet window : window t = Js.Unsafe.global\n\n(* The toplevel object *)\n\nlet document = window##.document\n\nlet getElementById id =\n  Js.Opt.case\n    (document##getElementById (Js.string id))\n    (fun () -> raise Not_found)\n    (fun pnode -> pnode)\n\nlet getElementById_exn id =\n  Js.Opt.case\n    (document##getElementById (Js.string id))\n    (fun () -> failwith (Printf.sprintf \"getElementById_exn: %S not found\" id))\n    (fun pnode -> pnode)\n\nlet getElementById_opt id = Js.Opt.to_option (document##getElementById (Js.string id))\n\nlet getElementById_coerce id coerce =\n  Js.Opt.case\n    (document##getElementById (Js.string id))\n    (fun () -> None)\n    (fun e -> Js.Opt.to_option (coerce e))\n\n(****)\n\nclass type frameSetElement =\n  object\n    inherit element\n\n    method cols : js_string t prop\n\n    method rows : js_string t prop\n  end\n\nclass type frameElement =\n  object\n    inherit element\n\n    method frameBorder : js_string t prop\n\n    method longDesc : js_string t prop\n\n    method marginHeight : js_string t prop\n\n    method marginWidth : js_string t prop\n\n    method name : js_string t prop\n\n    method noResize : bool t prop\n\n    method scrolling : js_string t prop\n\n    method src : js_string t prop\n\n    method contentDocument : document t opt readonly_prop\n  end\n\nclass type iFrameElement =\n  object\n    inherit element\n\n    method frameBorder : js_string t prop\n\n    method height : js_string t prop\n\n    method width : js_string t prop\n\n    method longDesc : js_string t prop\n\n    method marginHeight : js_string t prop\n\n    method marginWidth : js_string t prop\n\n    method name : js_string t prop\n\n    method scrolling : js_string t prop\n\n    method src : js_string t prop\n\n    method contentDocument : document t opt readonly_prop\n\n    method contentWindow : window t readonly_prop\n  end\n\n(****)\n\n(*XXX Should provide creation functions a la lablgtk... *)\n\nlet opt_iter x f =\n  match x with\n  | None -> ()\n  | Some v -> f v\n\nlet createElement (doc : document t) name = doc##createElement (Js.string name)\n\nlet unsafeCreateElement doc name = Js.Unsafe.coerce (createElement doc name)\n\nlet createElementSyntax = ref `Unknown\n\nlet rec unsafeCreateElementEx ?_type ?name doc elt =\n  if _type = None && name = None\n  then Js.Unsafe.coerce (createElement doc elt)\n  else\n    match !createElementSyntax with\n    | `Standard ->\n        let res = Js.Unsafe.coerce (createElement doc elt) in\n        opt_iter _type (fun t -> res##._type := t);\n        opt_iter name (fun n -> res##.name := n);\n        res\n    | `Extended ->\n        let a = new%js Js.array_empty in\n        ignore (a##push_2 (Js.string \"<\") (Js.string elt));\n        opt_iter _type (fun t ->\n            ignore (a##push_3 (Js.string \" type=\\\"\") (html_escape t) (Js.string \"\\\"\")));\n        opt_iter name (fun n ->\n            ignore (a##push_3 (Js.string \" name=\\\"\") (html_escape n) (Js.string \"\\\"\")));\n        ignore (a##push (Js.string \">\"));\n        Js.Unsafe.coerce (doc##createElement (a##join (Js.string \"\")))\n    | `Unknown ->\n        createElementSyntax :=\n          if try\n               let el : inputElement Js.t =\n                 Js.Unsafe.coerce\n                   (document##createElement (Js.string \"<input name=\\\"x\\\">\"))\n               in\n               el##.tagName##toLowerCase == Js.string \"input\"\n               && el##.name == Js.string \"x\"\n             with _ -> false\n          then `Extended\n          else `Standard;\n        unsafeCreateElementEx ?_type ?name doc elt\n\nlet createHtml doc : htmlElement t = unsafeCreateElement doc \"html\"\n\nlet createHead doc : headElement t = unsafeCreateElement doc \"head\"\n\nlet createLink doc : linkElement t = unsafeCreateElement doc \"link\"\n\nlet createTitle doc : titleElement t = unsafeCreateElement doc \"title\"\n\nlet createMeta doc : metaElement t = unsafeCreateElement doc \"meta\"\n\nlet createBase doc : baseElement t = unsafeCreateElement doc \"base\"\n\nlet createStyle doc : styleElement t = unsafeCreateElement doc \"style\"\n\nlet createBody doc : bodyElement t = unsafeCreateElement doc \"body\"\n\nlet createForm doc : formElement t = unsafeCreateElement doc \"form\"\n\nlet createOptgroup doc : optGroupElement t = unsafeCreateElement doc \"optgroup\"\n\nlet createOption doc : optionElement t = unsafeCreateElement doc \"option\"\n\nlet createSelect ?_type ?name doc : selectElement t =\n  unsafeCreateElementEx ?_type ?name doc \"select\"\n\nlet createInput ?_type ?name doc : inputElement t =\n  unsafeCreateElementEx ?_type ?name doc \"input\"\n\nlet createTextarea ?_type ?name doc : textAreaElement t =\n  unsafeCreateElementEx ?_type ?name doc \"textarea\"\n\nlet createButton ?_type ?name doc : buttonElement t =\n  unsafeCreateElementEx ?_type ?name doc \"button\"\n\nlet createLabel doc : labelElement t = unsafeCreateElement doc \"label\"\n\nlet createFieldset doc : fieldSetElement t = unsafeCreateElement doc \"fieldset\"\n\nlet createLegend doc : legendElement t = unsafeCreateElement doc \"legend\"\n\nlet createUl doc : uListElement t = unsafeCreateElement doc \"ul\"\n\nlet createOl doc : oListElement t = unsafeCreateElement doc \"ol\"\n\nlet createDl doc : dListElement t = unsafeCreateElement doc \"dl\"\n\nlet createLi doc : liElement t = unsafeCreateElement doc \"li\"\n\nlet createDiv doc : divElement t = unsafeCreateElement doc \"div\"\n\nlet createEmbed doc : embedElement t = unsafeCreateElement doc \"embed\"\n\nlet createP doc : paragraphElement t = unsafeCreateElement doc \"p\"\n\nlet createH1 doc : headingElement t = unsafeCreateElement doc \"h1\"\n\nlet createH2 doc : headingElement t = unsafeCreateElement doc \"h2\"\n\nlet createH3 doc : headingElement t = unsafeCreateElement doc \"h3\"\n\nlet createH4 doc : headingElement t = unsafeCreateElement doc \"h4\"\n\nlet createH5 doc : headingElement t = unsafeCreateElement doc \"h5\"\n\nlet createH6 doc : headingElement t = unsafeCreateElement doc \"h6\"\n\nlet createQ doc : quoteElement t = unsafeCreateElement doc \"q\"\n\nlet createBlockquote doc : quoteElement t = unsafeCreateElement doc \"blockquote\"\n\nlet createPre doc : preElement t = unsafeCreateElement doc \"pre\"\n\nlet createBr doc : brElement t = unsafeCreateElement doc \"br\"\n\nlet createHr doc : hrElement t = unsafeCreateElement doc \"hr\"\n\nlet createIns doc : modElement t = unsafeCreateElement doc \"ins\"\n\nlet createDel doc : modElement t = unsafeCreateElement doc \"del\"\n\nlet createA doc : anchorElement t = unsafeCreateElement doc \"a\"\n\nlet createImg doc : imageElement t = unsafeCreateElement doc \"img\"\n\nlet createObject doc : objectElement t = unsafeCreateElement doc \"object\"\n\nlet createParam doc : paramElement t = unsafeCreateElement doc \"param\"\n\nlet createMap doc : mapElement t = unsafeCreateElement doc \"map\"\n\nlet createArea doc : areaElement t = unsafeCreateElement doc \"area\"\n\nlet createScript doc : scriptElement t = unsafeCreateElement doc \"script\"\n\nlet createTable doc : tableElement t = unsafeCreateElement doc \"table\"\n\nlet createCaption doc : tableCaptionElement t = unsafeCreateElement doc \"caption\"\n\nlet createCol doc : tableColElement t = unsafeCreateElement doc \"col\"\n\nlet createColgroup doc : tableColElement t = unsafeCreateElement doc \"colgroup\"\n\nlet createThead doc : tableSectionElement t = unsafeCreateElement doc \"thead\"\n\nlet createTfoot doc : tableSectionElement t = unsafeCreateElement doc \"tfoot\"\n\nlet createTbody doc : tableSectionElement t = unsafeCreateElement doc \"tbody\"\n\nlet createTr doc : tableRowElement t = unsafeCreateElement doc \"tr\"\n\nlet createTh doc : tableCellElement t = unsafeCreateElement doc \"th\"\n\nlet createTd doc : tableCellElement t = unsafeCreateElement doc \"td\"\n\nlet createSub doc = createElement doc \"sub\"\n\nlet createSup doc = createElement doc \"sup\"\n\nlet createSpan doc = createElement doc \"span\"\n\nlet createTt doc = createElement doc \"tt\"\n\nlet createI doc = createElement doc \"i\"\n\nlet createB doc = createElement doc \"b\"\n\nlet createBig doc = createElement doc \"big\"\n\nlet createSmall doc = createElement doc \"small\"\n\nlet createEm doc = createElement doc \"em\"\n\nlet createStrong doc = createElement doc \"strong\"\n\nlet createCite doc = createElement doc \"cite\"\n\nlet createDfn doc = createElement doc \"dfn\"\n\nlet createCode doc = createElement doc \"code\"\n\nlet createSamp doc = createElement doc \"samp\"\n\nlet createKbd doc = createElement doc \"kbd\"\n\nlet createVar doc = createElement doc \"var\"\n\nlet createAbbr doc = createElement doc \"abbr\"\n\nlet createDd doc = createElement doc \"dd\"\n\nlet createDt doc = createElement doc \"dt\"\n\nlet createNoscript doc = createElement doc \"noscript\"\n\nlet createAddress doc = createElement doc \"address\"\n\nlet createFrameset doc : frameSetElement t = unsafeCreateElement doc \"frameset\"\n\nlet createFrame doc : frameElement t = unsafeCreateElement doc \"frame\"\n\nlet createIframe doc : iFrameElement t = unsafeCreateElement doc \"iframe\"\n\nlet createAudio doc : audioElement t = unsafeCreateElement doc \"audio\"\n\nlet createVideo doc : audioElement t = unsafeCreateElement doc \"video\"\n\nexception Canvas_not_available\n\nlet createCanvas doc : canvasElement t =\n  let c = unsafeCreateElement doc \"canvas\" in\n  if not (Opt.test c##.getContext) then raise Canvas_not_available;\n  c\n\nlet html_element : htmlElement t constr = Js.Unsafe.global##._HTMLElement\n\nmodule CoerceTo = struct\n  let element : #Dom.node Js.t -> element Js.t Js.opt =\n    if def html_element == undefined\n    then\n      (* ie < 9 does not have HTMLElement: we have to cheat to check\n        that something is an html element *)\n      fun e ->\n      if def (Js.Unsafe.coerce e)##.innerHTML == undefined\n      then Js.null\n      else Js.some (Js.Unsafe.coerce e)\n    else\n      fun e ->\n      if Js.instanceof e html_element then Js.some (Js.Unsafe.coerce e) else Js.null\n\n  let unsafeCoerce tag (e : #element t) =\n    if e##.tagName##toLowerCase == Js.string tag\n    then Js.some (Js.Unsafe.coerce e)\n    else Js.null\n\n  let a e = unsafeCoerce \"a\" e\n\n  let area e = unsafeCoerce \"area\" e\n\n  let base e = unsafeCoerce \"base\" e\n\n  let blockquote e = unsafeCoerce \"blockquote\" e\n\n  let body e = unsafeCoerce \"body\" e\n\n  let br e = unsafeCoerce \"br\" e\n\n  let button e = unsafeCoerce \"button\" e\n\n  let canvas e = unsafeCoerce \"canvas\" e\n\n  let caption e = unsafeCoerce \"caption\" e\n\n  let col e = unsafeCoerce \"col\" e\n\n  let colgroup e = unsafeCoerce \"colgroup\" e\n\n  let del e = unsafeCoerce \"del\" e\n\n  let div e = unsafeCoerce \"div\" e\n\n  let dl e = unsafeCoerce \"dl\" e\n\n  let fieldset e = unsafeCoerce \"fieldset\" e\n\n  let embed e = unsafeCoerce \"embed\" e\n\n  let form e = unsafeCoerce \"form\" e\n\n  let frameset e = unsafeCoerce \"frameset\" e\n\n  let frame e = unsafeCoerce \"frame\" e\n\n  let h1 e = unsafeCoerce \"h1\" e\n\n  let h2 e = unsafeCoerce \"h2\" e\n\n  let h3 e = unsafeCoerce \"h3\" e\n\n  let h4 e = unsafeCoerce \"h4\" e\n\n  let h5 e = unsafeCoerce \"h5\" e\n\n  let h6 e = unsafeCoerce \"h6\" e\n\n  let head e = unsafeCoerce \"head\" e\n\n  let hr e = unsafeCoerce \"hr\" e\n\n  let html e = unsafeCoerce \"html\" e\n\n  let iframe e = unsafeCoerce \"iframe\" e\n\n  let img e = unsafeCoerce \"img\" e\n\n  let input e = unsafeCoerce \"input\" e\n\n  let ins e = unsafeCoerce \"ins\" e\n\n  let label e = unsafeCoerce \"label\" e\n\n  let legend e = unsafeCoerce \"legend\" e\n\n  let li e = unsafeCoerce \"li\" e\n\n  let link e = unsafeCoerce \"link\" e\n\n  let map e = unsafeCoerce \"map\" e\n\n  let meta e = unsafeCoerce \"meta\" e\n\n  let _object e = unsafeCoerce \"object\" e\n\n  let ol e = unsafeCoerce \"ol\" e\n\n  let optgroup e = unsafeCoerce \"optgroup\" e\n\n  let option e = unsafeCoerce \"option\" e\n\n  let p e = unsafeCoerce \"p\" e\n\n  let param e = unsafeCoerce \"param\" e\n\n  let pre e = unsafeCoerce \"pre\" e\n\n  let q e = unsafeCoerce \"q\" e\n\n  let script e = unsafeCoerce \"script\" e\n\n  let select e = unsafeCoerce \"select\" e\n\n  let style e = unsafeCoerce \"style\" e\n\n  let table e = unsafeCoerce \"table\" e\n\n  let tbody e = unsafeCoerce \"tbody\" e\n\n  let td e = unsafeCoerce \"td\" e\n\n  let textarea e = unsafeCoerce \"textarea\" e\n\n  let tfoot e = unsafeCoerce \"tfoot\" e\n\n  let th e = unsafeCoerce \"th\" e\n\n  let thead e = unsafeCoerce \"thead\" e\n\n  let title e = unsafeCoerce \"title\" e\n\n  let tr e = unsafeCoerce \"tr\" e\n\n  let ul e = unsafeCoerce \"ul\" e\n\n  let audio e = unsafeCoerce \"audio\" e\n\n  let video e = unsafeCoerce \"video\" e\n\n  let unsafeCoerceEvent constr (ev : #event t) =\n    if def constr != undefined && Js.instanceof ev constr\n    then Js.some (Js.Unsafe.coerce ev)\n    else Js.null\n\n  let mouseEvent ev = unsafeCoerceEvent Js.Unsafe.global##._MouseEvent ev\n\n  let keyboardEvent ev = unsafeCoerceEvent Js.Unsafe.global##._KeyboardEvent ev\n\n  let wheelEvent ev = unsafeCoerceEvent Js.Unsafe.global##._WheelEvent ev\n\n  let mouseScrollEvent ev = unsafeCoerceEvent Js.Unsafe.global##._MouseScrollEvent ev\n\n  let popStateEvent ev = unsafeCoerceEvent Js.Unsafe.global##._PopStateEvent ev\nend\n\n(****)\n\nlet eventTarget = Dom.eventTarget\n\nlet eventRelatedTarget (e : #mouseEvent t) =\n  Optdef.get e##.relatedTarget (fun () ->\n      match Js.to_string e##._type with\n      | \"mouseover\" -> Optdef.get e##.fromElement (fun () -> assert false)\n      | \"mouseout\" -> Optdef.get e##.toElement (fun () -> assert false)\n      | _ -> Js.null)\n\nlet eventAbsolutePosition' (e : #mouseEvent t) =\n  let body = document##.body in\n  let html = document##.documentElement in\n  ( e##.clientX + body##.scrollLeft + html##.scrollLeft\n  , e##.clientY + body##.scrollTop + html##.scrollTop )\n\nlet eventAbsolutePosition (e : #mouseEvent t) =\n  Optdef.case\n    e##.pageX\n    (fun () -> eventAbsolutePosition' e)\n    (fun x -> Optdef.case e##.pageY (fun () -> eventAbsolutePosition' e) (fun y -> x, y))\n\nlet elementClientPosition (e : #element t) =\n  let r = e##getBoundingClientRect in\n  let body = document##.body in\n  let html = document##.documentElement in\n  ( truncate r##.left - body##.clientLeft - html##.clientLeft\n  , truncate r##.top - body##.clientTop - html##.clientTop )\n\nlet getDocumentScroll () =\n  let body = document##.body in\n  let html = document##.documentElement in\n  body##.scrollLeft + html##.scrollLeft, body##.scrollTop + html##.scrollTop\n\nlet buttonPressed (ev : #mouseEvent Js.t) =\n  Js.Optdef.case\n    ev##.which\n    (fun () ->\n      match ev##.button with\n      | 1 -> Left_button\n      | 2 -> Right_button\n      | 4 -> Middle_button\n      | _ -> No_button)\n    (fun x -> x)\n\nlet hasMousewheelEvents () =\n  let d = createDiv document in\n  d##setAttribute (Js.string \"onmousewheel\") (Js.string \"return;\");\n  Js.typeof (Js.Unsafe.get d (Js.string \"onmousewheel\")) == Js.string \"function\"\n\nlet addMousewheelEventListener e h capt =\n  if hasMousewheelEvents ()\n  then\n    addEventListener\n      e\n      Event.mousewheel\n      (handler (fun (e : mousewheelEvent t) ->\n           let dx = -Optdef.get e##.wheelDeltaX (fun () -> 0) / 40 in\n           let dy = -Optdef.get e##.wheelDeltaY (fun () -> e##.wheelDelta) / 40 in\n           h (e :> mouseEvent t) ~dx ~dy))\n      capt\n  else\n    addEventListener\n      e\n      Event._DOMMouseScroll\n      (handler (fun (e : mouseScrollEvent t) ->\n           let d = e##.detail in\n           if e##.axis == e##._HORIZONTAL_AXIS\n           then h (e :> mouseEvent t) ~dx:d ~dy:0\n           else h (e :> mouseEvent t) ~dx:0 ~dy:d))\n      capt\n\n(*****)\n\nmodule Keyboard_code = struct\n  type t =\n    | Unidentified\n    (* Alphabetic Characters *)\n    | KeyA\n    | KeyB\n    | KeyC\n    | KeyD\n    | KeyE\n    | KeyF\n    | KeyG\n    | KeyH\n    | KeyI\n    | KeyJ\n    | KeyK\n    | KeyL\n    | KeyM\n    | KeyN\n    | KeyO\n    | KeyP\n    | KeyQ\n    | KeyR\n    | KeyS\n    | KeyT\n    | KeyU\n    | KeyV\n    | KeyW\n    | KeyX\n    | KeyY\n    | KeyZ\n    (* Digits *)\n    | Digit0\n    | Digit1\n    | Digit2\n    | Digit3\n    | Digit4\n    | Digit5\n    | Digit6\n    | Digit7\n    | Digit8\n    | Digit9\n    | Minus\n    | Equal\n    (* Whitespace *)\n    | Tab\n    | Enter\n    | Space\n    (* Editing *)\n    | Escape\n    | Backspace\n    | Insert\n    | Delete\n    | CapsLock\n    (* Misc Printable *)\n    | BracketLeft\n    | BracketRight\n    | Semicolon\n    | Quote\n    | Backquote\n    | Backslash\n    | Comma\n    | Period\n    | Slash\n    (* Function keys *)\n    | F1\n    | F2\n    | F3\n    | F4\n    | F5\n    | F6\n    | F7\n    | F8\n    | F9\n    | F10\n    | F11\n    | F12\n    (* Numpad keys *)\n    | Numpad0\n    | Numpad1\n    | Numpad2\n    | Numpad3\n    | Numpad4\n    | Numpad5\n    | Numpad6\n    | Numpad7\n    | Numpad8\n    | Numpad9\n    | NumpadMultiply\n    | NumpadSubtract\n    | NumpadAdd\n    | NumpadDecimal\n    | NumpadEqual\n    | NumpadEnter\n    | NumpadDivide\n    | NumLock\n    (* Modifier keys *)\n    | ControlLeft\n    | ControlRight\n    | MetaLeft\n    | MetaRight\n    | ShiftLeft\n    | ShiftRight\n    | AltLeft\n    | AltRight\n    (* Arrow keys *)\n    | ArrowLeft\n    | ArrowRight\n    | ArrowUp\n    | ArrowDown\n    (* Navigation *)\n    | PageUp\n    | PageDown\n    | Home\n    | End\n    (* Sound *)\n    | VolumeMute\n    | VolumeDown\n    | VolumeUp\n    (* Media *)\n    | MediaTrackPrevious\n    | MediaTrackNext\n    | MediaPlayPause\n    | MediaStop\n    (* Browser special *)\n    | ContextMenu\n    | BrowserSearch\n    | BrowserHome\n    | BrowserFavorites\n    | BrowserRefresh\n    | BrowserStop\n    | BrowserForward\n    | BrowserBack\n    (* Misc *)\n    | OSLeft\n    | OSRight\n    | ScrollLock\n    | PrintScreen\n    | IntlBackslash\n    | IntlYen\n    | Pause\n\n  let try_code v =\n    match Js.to_string v with\n    (* Alphabetic Characters *)\n    | \"KeyA\" -> KeyA\n    | \"KeyB\" -> KeyB\n    | \"KeyC\" -> KeyC\n    | \"KeyD\" -> KeyD\n    | \"KeyE\" -> KeyE\n    | \"KeyF\" -> KeyF\n    | \"KeyG\" -> KeyG\n    | \"KeyH\" -> KeyH\n    | \"KeyI\" -> KeyI\n    | \"KeyJ\" -> KeyJ\n    | \"KeyK\" -> KeyK\n    | \"KeyL\" -> KeyL\n    | \"KeyM\" -> KeyM\n    | \"KeyN\" -> KeyN\n    | \"KeyO\" -> KeyO\n    | \"KeyP\" -> KeyP\n    | \"KeyQ\" -> KeyQ\n    | \"KeyR\" -> KeyR\n    | \"KeyS\" -> KeyS\n    | \"KeyT\" -> KeyT\n    | \"KeyU\" -> KeyU\n    | \"KeyV\" -> KeyV\n    | \"KeyW\" -> KeyW\n    | \"KeyX\" -> KeyX\n    | \"KeyY\" -> KeyY\n    | \"KeyZ\" -> KeyZ\n    (* Digits *)\n    | \"Digit0\" -> Digit0\n    | \"Digit1\" -> Digit1\n    | \"Digit2\" -> Digit2\n    | \"Digit3\" -> Digit3\n    | \"Digit4\" -> Digit4\n    | \"Digit5\" -> Digit5\n    | \"Digit6\" -> Digit6\n    | \"Digit7\" -> Digit7\n    | \"Digit8\" -> Digit8\n    | \"Digit9\" -> Digit9\n    | \"Minus\" -> Minus\n    | \"Equal\" -> Equal\n    (* Whitespace *)\n    | \"Tab\" -> Tab\n    | \"Enter\" -> Enter\n    | \"Space\" -> Space\n    (* Editing *)\n    | \"Escape\" -> Escape\n    | \"Backspace\" -> Backspace\n    | \"Insert\" -> Insert\n    | \"Delete\" -> Delete\n    | \"CapsLock\" -> CapsLock\n    (* Misc Printable *)\n    | \"BracketLeft\" -> BracketLeft\n    | \"BracketRight\" -> BracketRight\n    | \"Semicolon\" -> Semicolon\n    | \"Quote\" -> Quote\n    | \"Backquote\" -> Backquote\n    | \"Backslash\" -> Backslash\n    | \"Comma\" -> Comma\n    | \"Period\" -> Period\n    | \"Slash\" -> Slash\n    (* Function keys *)\n    | \"F1\" -> F1\n    | \"F2\" -> F2\n    | \"F3\" -> F3\n    | \"F4\" -> F4\n    | \"F5\" -> F5\n    | \"F6\" -> F6\n    | \"F7\" -> F7\n    | \"F8\" -> F8\n    | \"F9\" -> F9\n    | \"F10\" -> F10\n    | \"F11\" -> F11\n    | \"F12\" -> F12\n    (* Numpad keys *)\n    | \"Numpad0\" -> Numpad0\n    | \"Numpad1\" -> Numpad1\n    | \"Numpad2\" -> Numpad2\n    | \"Numpad3\" -> Numpad3\n    | \"Numpad4\" -> Numpad4\n    | \"Numpad5\" -> Numpad5\n    | \"Numpad6\" -> Numpad6\n    | \"Numpad7\" -> Numpad7\n    | \"Numpad8\" -> Numpad8\n    | \"Numpad9\" -> Numpad9\n    | \"NumpadMultiply\" -> NumpadMultiply\n    | \"NumpadSubtract\" -> NumpadSubtract\n    | \"NumpadAdd\" -> NumpadAdd\n    | \"NumpadDecimal\" -> NumpadDecimal\n    | \"NumpadEqual\" -> NumpadEqual\n    | \"NumpadEnter\" -> NumpadEnter\n    | \"NumpadDivide\" -> NumpadDivide\n    | \"NumLock\" -> NumLock\n    (* Modifier keys *)\n    | \"ControlLeft\" -> ControlLeft\n    | \"ControlRight\" -> ControlRight\n    | \"MetaLeft\" -> MetaLeft\n    | \"MetaRight\" -> MetaRight\n    | \"ShiftLeft\" -> ShiftLeft\n    | \"ShiftRight\" -> ShiftRight\n    | \"AltLeft\" -> AltLeft\n    | \"AltRight\" -> AltRight\n    (* Arrow keys *)\n    | \"ArrowLeft\" -> ArrowLeft\n    | \"ArrowRight\" -> ArrowRight\n    | \"ArrowUp\" -> ArrowUp\n    | \"ArrowDown\" -> ArrowDown\n    (* Navigation *)\n    | \"PageUp\" -> PageUp\n    | \"PageDown\" -> PageDown\n    | \"Home\" -> Home\n    | \"End\" -> End\n    (* Sound *)\n    | \"VolumeMute\" -> VolumeMute\n    | \"VolumeDown\" -> VolumeDown\n    | \"VolumeUp\" -> VolumeUp\n    (* Media *)\n    | \"MediaTrackPrevious\" -> MediaTrackPrevious\n    | \"MediaTrackNext\" -> MediaTrackNext\n    | \"MediaPlayPause\" -> MediaPlayPause\n    | \"MediaStop\" -> MediaStop\n    (* Browser special *)\n    | \"ContextMenu\" -> ContextMenu\n    | \"BrowserSearch\" -> BrowserSearch\n    | \"BrowserHome\" -> BrowserHome\n    | \"BrowserFavorites\" -> BrowserFavorites\n    | \"BrowserRefresh\" -> BrowserRefresh\n    | \"BrowserStop\" -> BrowserStop\n    | \"BrowserForward\" -> BrowserForward\n    | \"BrowserBack\" -> BrowserBack\n    (* Misc *)\n    | \"OSLeft\" -> OSLeft\n    | \"OSRight\" -> OSRight\n    | \"ScrollLock\" -> ScrollLock\n    | \"PrintScreen\" -> PrintScreen\n    | \"IntlBackslash\" -> IntlBackslash\n    | \"IntlYen\" -> IntlYen\n    | \"Pause\" -> Pause\n    | _ -> Unidentified\n\n  let try_key_code_left = function\n    | 16 -> ShiftLeft\n    | 17 -> ControlLeft\n    | 18 -> AltLeft\n    | 91 -> MetaLeft\n    | _ -> Unidentified\n\n  let try_key_code_right = function\n    | 16 -> ShiftRight\n    | 17 -> ControlRight\n    | 18 -> AltRight\n    | 91 -> MetaRight\n    | _ -> Unidentified\n\n  let try_key_code_numpad = function\n    | 46 -> NumpadDecimal\n    | 45 -> Numpad0\n    | 35 -> Numpad1\n    | 40 -> Numpad2\n    | 34 -> Numpad3\n    | 37 -> Numpad4\n    | 12 -> Numpad5\n    | 39 -> Numpad6\n    | 36 -> Numpad7\n    | 38 -> Numpad8\n    | 33 -> Numpad9\n    | 13 -> NumpadEnter\n    | 111 -> NumpadDivide\n    | 107 -> NumpadAdd\n    | 109 -> NumpadSubtract\n    | 106 -> NumpadMultiply\n    | 110 -> NumpadDecimal\n    | 96 -> Numpad0\n    | 97 -> Numpad1\n    | 98 -> Numpad2\n    | 99 -> Numpad3\n    | 100 -> Numpad4\n    | 101 -> Numpad5\n    | 102 -> Numpad6\n    | 103 -> Numpad7\n    | 104 -> Numpad8\n    | 105 -> Numpad9\n    | _ -> Unidentified\n\n  let try_key_code_normal = function\n    | 27 -> Escape\n    | 112 -> F1\n    | 113 -> F2\n    | 114 -> F3\n    | 115 -> F4\n    | 116 -> F5\n    | 117 -> F6\n    | 118 -> F7\n    | 119 -> F8\n    | 120 -> F9\n    | 121 -> F10\n    | 122 -> F11\n    | 123 -> F12\n    | 42 -> PrintScreen\n    | 145 -> ScrollLock\n    | 19 -> Pause\n    | 192 -> Backquote\n    | 49 -> Digit1\n    | 50 -> Digit2\n    | 51 -> Digit3\n    | 52 -> Digit4\n    | 53 -> Digit5\n    | 54 -> Digit6\n    | 55 -> Digit7\n    | 56 -> Digit8\n    | 57 -> Digit9\n    | 48 -> Digit0\n    | 189 -> Minus\n    | 187 -> Equal\n    | 8 -> Backspace\n    | 9 -> Tab\n    | 81 -> KeyQ\n    | 87 -> KeyW\n    | 69 -> KeyE\n    | 82 -> KeyR\n    | 84 -> KeyT\n    | 89 -> KeyY\n    | 85 -> KeyU\n    | 73 -> KeyI\n    | 79 -> KeyO\n    | 80 -> KeyP\n    | 219 -> BracketLeft\n    | 221 -> BracketRight\n    | 220 -> Backslash\n    | 20 -> CapsLock\n    | 65 -> KeyA\n    | 83 -> KeyS\n    | 68 -> KeyD\n    | 70 -> KeyF\n    | 71 -> KeyG\n    | 72 -> KeyH\n    | 74 -> KeyJ\n    | 75 -> KeyK\n    | 76 -> KeyL\n    | 186 -> Semicolon\n    | 222 -> Quote\n    | 13 -> Enter\n    | 90 -> KeyZ\n    | 88 -> KeyX\n    | 67 -> KeyC\n    | 86 -> KeyV\n    | 66 -> KeyB\n    | 78 -> KeyN\n    | 77 -> KeyM\n    | 188 -> Comma\n    | 190 -> Period\n    | 191 -> Slash\n    | 32 -> Space\n    | 93 -> ContextMenu\n    | 45 -> Insert\n    | 36 -> Home\n    | 33 -> PageUp\n    | 46 -> Delete\n    | 35 -> End\n    | 34 -> PageDown\n    | 37 -> ArrowLeft\n    | 40 -> ArrowDown\n    | 39 -> ArrowRight\n    | 38 -> ArrowUp\n    | _ -> Unidentified\n\n  let make_unidentified _ = Unidentified\n\n  let try_next value f = function\n    | Unidentified -> Optdef.case value make_unidentified f\n    | v -> v\n\n  let run_next value f = function\n    | Unidentified -> f value\n    | v -> v\n\n  let get_key_code evt = evt##.keyCode\n\n  let try_key_location evt =\n    match evt##.location with\n    | 1 -> run_next (get_key_code evt) try_key_code_left\n    | 2 -> run_next (get_key_code evt) try_key_code_right\n    | 3 -> run_next (get_key_code evt) try_key_code_numpad\n    | _ -> make_unidentified\n\n  let ( |> ) x f = f x\n\n  let of_event evt =\n    Unidentified\n    |> try_next evt##.code try_code\n    |> try_key_location evt\n    |> run_next (get_key_code evt) try_key_code_normal\n\n  let of_key_code = try_key_code_normal\nend\n\nmodule Keyboard_key = struct\n  type t = Uchar.t option\n\n  let char_of_int value =\n    if 0 < value then try Some (Uchar.of_int value) with _ -> None else None\n\n  let empty_string _ = Js.string \"\"\n\n  let none _ = None\n\n  let of_event evt =\n    let key = Optdef.get evt##.key empty_string in\n    match key##.length with\n    | 0 -> Optdef.case evt##.charCode none char_of_int\n    | 1 -> char_of_int (int_of_float (key##charCodeAt 0))\n    | _ -> None\nend\n\n(*****)\n\nlet element : #Dom.element t -> element t = Js.Unsafe.coerce\n\ntype taggedElement =\n  | A of anchorElement t\n  | Area of areaElement t\n  | Audio of audioElement t\n  | Base of baseElement t\n  | Blockquote of quoteElement t\n  | Body of bodyElement t\n  | Br of brElement t\n  | Button of buttonElement t\n  | Canvas of canvasElement t\n  | Caption of tableCaptionElement t\n  | Col of tableColElement t\n  | Colgroup of tableColElement t\n  | Del of modElement t\n  | Div of divElement t\n  | Dl of dListElement t\n  | Embed of embedElement t\n  | Fieldset of fieldSetElement t\n  | Form of formElement t\n  | Frameset of frameSetElement t\n  | Frame of frameElement t\n  | H1 of headingElement t\n  | H2 of headingElement t\n  | H3 of headingElement t\n  | H4 of headingElement t\n  | H5 of headingElement t\n  | H6 of headingElement t\n  | Head of headElement t\n  | Hr of hrElement t\n  | Html of htmlElement t\n  | Iframe of iFrameElement t\n  | Img of imageElement t\n  | Input of inputElement t\n  | Ins of modElement t\n  | Label of labelElement t\n  | Legend of legendElement t\n  | Li of liElement t\n  | Link of linkElement t\n  | Map of mapElement t\n  | Meta of metaElement t\n  | Object of objectElement t\n  | Ol of oListElement t\n  | Optgroup of optGroupElement t\n  | Option of optionElement t\n  | P of paramElement t\n  | Param of paramElement t\n  | Pre of preElement t\n  | Q of quoteElement t\n  | Script of scriptElement t\n  | Select of selectElement t\n  | Style of styleElement t\n  | Table of tableElement t\n  | Tbody of tableSectionElement t\n  | Td of tableCellElement t\n  | Textarea of textAreaElement t\n  | Tfoot of tableSectionElement t\n  | Th of tableCellElement t\n  | Thead of tableSectionElement t\n  | Title of titleElement t\n  | Tr of tableRowElement t\n  | Ul of uListElement t\n  | Video of videoElement t\n  | Other of element t\n\nlet other e = Other (e : #element t :> element t)\n\nlet tagged (e : #element t) =\n  let tag = Js.to_bytestring e##.tagName##toLowerCase in\n  if String.length tag = 0\n  then other e\n  else\n    match String.unsafe_get tag 0 with\n    | 'a' -> (\n      match tag with\n      | \"a\" -> A (Js.Unsafe.coerce e)\n      | \"area\" -> Area (Js.Unsafe.coerce e)\n      | \"audio\" -> Audio (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'b' -> (\n      match tag with\n      | \"base\" -> Base (Js.Unsafe.coerce e)\n      | \"blockquote\" -> Blockquote (Js.Unsafe.coerce e)\n      | \"body\" -> Body (Js.Unsafe.coerce e)\n      | \"br\" -> Br (Js.Unsafe.coerce e)\n      | \"button\" -> Button (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'c' -> (\n      match tag with\n      | \"canvas\" -> Canvas (Js.Unsafe.coerce e)\n      | \"caption\" -> Caption (Js.Unsafe.coerce e)\n      | \"col\" -> Col (Js.Unsafe.coerce e)\n      | \"colgroup\" -> Colgroup (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'd' -> (\n      match tag with\n      | \"del\" -> Del (Js.Unsafe.coerce e)\n      | \"div\" -> Div (Js.Unsafe.coerce e)\n      | \"dl\" -> Dl (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'e' -> (\n      match tag with\n      | \"embed\" -> Embed (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'f' -> (\n      match tag with\n      | \"fieldset\" -> Fieldset (Js.Unsafe.coerce e)\n      | \"form\" -> Form (Js.Unsafe.coerce e)\n      | \"frameset\" -> Frameset (Js.Unsafe.coerce e)\n      | \"frame\" -> Frame (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'h' -> (\n      match tag with\n      | \"h1\" -> H1 (Js.Unsafe.coerce e)\n      | \"h2\" -> H2 (Js.Unsafe.coerce e)\n      | \"h3\" -> H3 (Js.Unsafe.coerce e)\n      | \"h4\" -> H4 (Js.Unsafe.coerce e)\n      | \"h5\" -> H5 (Js.Unsafe.coerce e)\n      | \"h6\" -> H6 (Js.Unsafe.coerce e)\n      | \"head\" -> Head (Js.Unsafe.coerce e)\n      | \"hr\" -> Hr (Js.Unsafe.coerce e)\n      | \"html\" -> Html (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'i' -> (\n      match tag with\n      | \"iframe\" -> Iframe (Js.Unsafe.coerce e)\n      | \"img\" -> Img (Js.Unsafe.coerce e)\n      | \"input\" -> Input (Js.Unsafe.coerce e)\n      | \"ins\" -> Ins (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'l' -> (\n      match tag with\n      | \"label\" -> Label (Js.Unsafe.coerce e)\n      | \"legend\" -> Legend (Js.Unsafe.coerce e)\n      | \"li\" -> Li (Js.Unsafe.coerce e)\n      | \"link\" -> Link (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'm' -> (\n      match tag with\n      | \"map\" -> Map (Js.Unsafe.coerce e)\n      | \"meta\" -> Meta (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'o' -> (\n      match tag with\n      | \"object\" -> Object (Js.Unsafe.coerce e)\n      | \"ol\" -> Ol (Js.Unsafe.coerce e)\n      | \"optgroup\" -> Optgroup (Js.Unsafe.coerce e)\n      | \"option\" -> Option (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'p' -> (\n      match tag with\n      | \"p\" -> P (Js.Unsafe.coerce e)\n      | \"param\" -> Param (Js.Unsafe.coerce e)\n      | \"pre\" -> Pre (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'q' -> (\n      match tag with\n      | \"q\" -> Q (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 's' -> (\n      match tag with\n      | \"script\" -> Script (Js.Unsafe.coerce e)\n      | \"select\" -> Select (Js.Unsafe.coerce e)\n      | \"style\" -> Style (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 't' -> (\n      match tag with\n      | \"table\" -> Table (Js.Unsafe.coerce e)\n      | \"tbody\" -> Tbody (Js.Unsafe.coerce e)\n      | \"td\" -> Td (Js.Unsafe.coerce e)\n      | \"textarea\" -> Textarea (Js.Unsafe.coerce e)\n      | \"tfoot\" -> Tfoot (Js.Unsafe.coerce e)\n      | \"th\" -> Th (Js.Unsafe.coerce e)\n      | \"thead\" -> Thead (Js.Unsafe.coerce e)\n      | \"title\" -> Title (Js.Unsafe.coerce e)\n      | \"tr\" -> Tr (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'u' -> (\n      match tag with\n      | \"ul\" -> Ul (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | 'v' -> (\n      match tag with\n      | \"video\" -> Video (Js.Unsafe.coerce e)\n      | _ -> other e)\n    | _ -> other e\n\nlet opt_tagged e = Opt.case e (fun () -> None) (fun e -> Some (tagged e))\n\ntype taggedEvent =\n  | MouseEvent of mouseEvent t\n  | KeyboardEvent of keyboardEvent t\n  | MousewheelEvent of mousewheelEvent t\n  | MouseScrollEvent of mouseScrollEvent t\n  | PopStateEvent of popStateEvent t\n  | OtherEvent of event t\n\nlet taggedEvent (ev : #event Js.t) =\n  Js.Opt.case\n    (CoerceTo.mouseEvent ev)\n    (fun () ->\n      Js.Opt.case\n        (CoerceTo.keyboardEvent ev)\n        (fun () ->\n          Js.Opt.case\n            (CoerceTo.wheelEvent ev)\n            (fun () ->\n              Js.Opt.case\n                (CoerceTo.mouseScrollEvent ev)\n                (fun () ->\n                  Js.Opt.case\n                    (CoerceTo.popStateEvent ev)\n                    (fun () -> OtherEvent (ev :> event t))\n                    (fun ev -> PopStateEvent ev))\n                (fun ev -> MouseScrollEvent ev))\n            (fun ev -> MousewheelEvent ev))\n        (fun ev -> KeyboardEvent ev))\n    (fun ev -> MouseEvent ev)\n\nlet opt_taggedEvent ev = Opt.case ev (fun () -> None) (fun ev -> Some (taggedEvent ev))\n\nlet stopPropagation ev =\n  let e = Js.Unsafe.coerce ev in\n  Optdef.case\n    e##.stopPropagation\n    (fun () -> e##.cancelBubble := Js._true)\n    (fun _ -> e##_stopPropagation)\n\nlet _requestAnimationFrame : (unit -> unit) Js.callback -> unit =\n  Js.Unsafe.pure_expr (fun _ ->\n      let w = Js.Unsafe.coerce window in\n      let l =\n        [ w##.requestAnimationFrame\n        ; w##.mozRequestAnimationFrame\n        ; w##.webkitRequestAnimationFrame\n        ; w##.oRequestAnimationFrame\n        ; w##.msRequestAnimationFrame ]\n      in\n      try\n        let req = List.find (fun c -> Js.Optdef.test c) l in\n        fun callback -> Js.Unsafe.fun_call req [|Js.Unsafe.inject callback|]\n      with Not_found ->\n        let now () = (new%js Js.date_now)##getTime in\n        let last = ref (now ()) in\n        fun callback ->\n          let t = now () in\n          let dt = !last +. (1000. /. 60.) -. t in\n          let dt = if dt < 0. then 0. else dt in\n          last := t;\n          ignore (window##setTimeout callback dt))\n\n(****)\n\nlet hasPushState () = Js.Optdef.test (Js.Unsafe.coerce window##.history)##.pushState\n\nlet hasPlaceholder () =\n  let i = createInput document in\n  Js.Optdef.test (Js.Unsafe.coerce i)##.placeholder\n\nlet hasRequired () =\n  let i = createInput document in\n  Js.Optdef.test (Js.Unsafe.coerce i)##.required\n\nlet overflow_limit = 2147483_000.\n\n(* ms *)\n\ntype timeout_id_safe = timeout_id option ref\n\nlet setTimeout callback d : timeout_id_safe =\n  let id = ref None in\n  let rec loop d () =\n    let step, remain =\n      if d > overflow_limit then overflow_limit, d -. overflow_limit else d, 0.\n    in\n    let cb = if remain = 0. then callback else loop remain in\n    id := Some (window##setTimeout (Js.wrap_callback cb) step)\n  in\n  loop d ();\n  id\n\nlet clearTimeout (id : timeout_id_safe) =\n  match !id with\n  | None -> ()\n  | Some x ->\n      id := None;\n      window##clearTimeout x\n\nlet js_array_of_collection (c : #element collection Js.t) :\n    #element Js.t Js.js_array Js.t =\n  Js.Unsafe.(meth_call (js_expr \"[].slice\") \"call\" [|inject c|])\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\n\nclass type ['node] nodeList =\n  object\n    method item : int -> 'node t opt meth\n\n    method length : int readonly_prop\n  end\n\nlet list_of_nodeList (nodeList : 'a nodeList t) =\n  let length = nodeList##.length in\n  let rec add_item acc i =\n    if i < length\n    then\n      match Opt.to_option (nodeList##item i) with\n      | None -> add_item acc (i + 1)\n      | Some e -> add_item (e :: acc) (i + 1)\n    else List.rev acc\n  in\n  add_item [] 0\n\ntype nodeType =\n  | OTHER\n  (* Will not happen *)\n  | ELEMENT\n  | ATTRIBUTE\n  | TEXT\n  | CDATA_SECTION\n  | ENTITY_REFERENCE\n  | ENTITY\n  | PROCESSING_INSTRUCTION\n  | COMMENT\n  | DOCUMENT\n  | DOCUMENT_TYPE\n  | DOCUMENT_FRAGMENT\n  | NOTATION\n\nmodule DocumentPosition = struct\n  type t = int\n\n  type mask = int\n\n  let disconnected = 0x01\n\n  let preceding = 0x02\n\n  let following = 0x04\n\n  let contains = 0x08\n\n  let contained_by = 0x10\n\n  let implementation_specific = 0x20\n\n  let has t mask = t land mask = mask\n\n  let add x y = x lor y\n\n  let ( + ) = add\nend\n\nclass type node =\n  object\n    method nodeName : js_string t readonly_prop\n\n    method nodeValue : js_string t opt readonly_prop\n\n    method nodeType : nodeType readonly_prop\n\n    method parentNode : node t opt prop\n\n    method childNodes : node nodeList t prop\n\n    method firstChild : node t opt prop\n\n    method lastChild : node t opt prop\n\n    method previousSibling : node t opt prop\n\n    method nextSibling : node t opt prop\n\n    method namespaceURI : js_string t opt prop\n\n    method insertBefore : node t -> node t opt -> node t meth\n\n    method replaceChild : node t -> node t -> node t meth\n\n    method removeChild : node t -> node t meth\n\n    method appendChild : node t -> node t meth\n\n    method hasChildNodes : bool t meth\n\n    method cloneNode : bool t -> node t meth\n\n    method compareDocumentPosition : node t -> DocumentPosition.t meth\n\n    method lookupNamespaceURI : js_string t -> js_string t opt meth\n\n    method lookupPrefix : js_string t -> js_string t opt meth\n  end\n\nlet appendChild (p : #node t) (n : #node t) = ignore (p##appendChild (n :> node t))\n\nlet removeChild (p : #node t) (n : #node t) = ignore (p##removeChild (n :> node t))\n\nlet replaceChild (p : #node t) (n : #node t) (o : #node t) =\n  ignore (p##replaceChild (n :> node t) (o :> node t))\n\nlet insertBefore (p : #node t) (n : #node t) (o : #node t opt) =\n  ignore (p##insertBefore (n :> node t) (o :> node t opt))\n\n(** Specification of [Attr] objects. *)\nclass type attr =\n  object\n    inherit node\n\n    method name : js_string t readonly_prop\n\n    method specified : bool t readonly_prop\n\n    method value : js_string t prop\n\n    method ownerElement : element t prop\n  end\n\n(** Specification of [NamedNodeMap] objects. *)\nand ['node] namedNodeMap =\n  object\n    method getNamedItem : js_string t -> 'node t opt meth\n\n    method setNamedItem : 'node t -> 'node t opt meth\n\n    method removeNamedItem : js_string t -> 'node t opt meth\n\n    method item : int -> 'node t opt meth\n\n    method length : int readonly_prop\n  end\n\n(** Specification of [Element] objects. *)\nand element =\n  object\n    inherit node\n\n    method tagName : js_string t readonly_prop\n\n    method getAttribute : js_string t -> js_string t opt meth\n\n    method setAttribute : js_string t -> js_string t -> unit meth\n\n    method removeAttribute : js_string t -> unit meth\n\n    method hasAttribute : js_string t -> bool t meth\n\n    method getAttributeNS : js_string t -> js_string t -> js_string t opt meth\n\n    method setAttributeNS : js_string t -> js_string t -> js_string t -> unit meth\n\n    method removeAttributeNS : js_string t -> js_string t -> unit meth\n\n    method hasAttributeNS : js_string t -> js_string t -> bool t meth\n\n    method getAttributeNode : js_string t -> attr t opt meth\n\n    method setAttributeNode : attr t -> attr t opt meth\n\n    method removeAttributeNode : attr t -> attr t meth\n\n    method getAttributeNodeNS : js_string t -> js_string t -> attr t opt meth\n\n    method setAttributeNodeNS : attr t -> attr t opt meth\n\n    method getElementsByTagName : js_string t -> element nodeList t meth\n\n    method attributes : attr namedNodeMap t readonly_prop\n  end\n\nclass type characterData =\n  object\n    inherit node\n\n    method data : js_string t prop\n\n    method length : int readonly_prop\n\n    method subjs_stringData : int -> int -> js_string t meth\n\n    method appendData : js_string t -> unit meth\n\n    method insertData : int -> js_string t -> unit meth\n\n    method deleteData : int -> int -> unit meth\n\n    method replaceData : int -> int -> js_string t -> unit meth\n  end\n\nclass type comment = characterData\n\nclass type text = characterData\n\nclass type documentFragment = node\n\nclass type ['element] document =\n  object\n    inherit node\n\n    method documentElement : 'element t readonly_prop\n\n    method createDocumentFragment : documentFragment t meth\n\n    method createElement : js_string t -> 'element t meth\n\n    method createElementNS : js_string t -> js_string t -> 'element t meth\n\n    method createTextNode : js_string t -> text t meth\n\n    method createAttribute : js_string t -> attr t meth\n\n    method createComment : js_string t -> comment t meth\n\n    method getElementById : js_string t -> 'element t opt meth\n\n    method getElementsByTagName : js_string t -> 'element nodeList t meth\n\n    method importNode : element t -> bool t -> 'element t meth\n\n    method adoptNode : element t -> 'element t meth\n  end\n\ntype node_type =\n  | Element of element t\n  | Attr of attr t\n  | Text of text t\n  | Other of node t\n\nlet nodeType e =\n  match e##.nodeType with\n  | ELEMENT -> Element (Js.Unsafe.coerce e)\n  | ATTRIBUTE -> Attr (Js.Unsafe.coerce e)\n  | CDATA_SECTION | TEXT -> Text (Js.Unsafe.coerce e)\n  | _ -> Other (e :> node t)\n\nmodule CoerceTo = struct\n  let cast (e : #node Js.t) t =\n    if e##.nodeType = t then Js.some (Js.Unsafe.coerce e) else Js.null\n\n  let element e : element Js.t Js.opt = cast e ELEMENT\n\n  let text e : text Js.t Js.opt =\n    if e##.nodeType == TEXT || e##.nodeType == CDATA_SECTION\n    then Js.some (Js.Unsafe.coerce e)\n    else Js.null\n\n  let attr e : attr Js.t Js.opt = cast e ATTRIBUTE\nend\n\n(** The type of event listener functions.  The first type parameter\n      ['a] is the type of the target object; the second parameter\n      ['b] is the type of the event object. *)\ntype ('a, 'b) event_listener = ('a, 'b -> bool t) meth_callback opt\n\nclass type ['a] event =\n  object\n    method _type : js_string t readonly_prop\n\n    method target : 'a t opt readonly_prop\n\n    method currentTarget : 'a t opt readonly_prop\n\n    (* Legacy methods *)\n    method srcElement : 'a t opt readonly_prop\n  end\n\nlet no_handler : ('a, 'b) event_listener = Js.null\n\nlet window_event () : 'a #event t = Js.Unsafe.pure_js_expr \"event\"\n\n(* The function preventDefault must be called explicitly when\n   using addEventListener... *)\nlet handler f =\n  Js.some\n    (Js.Unsafe.callback (fun e ->\n         (* depending on the internet explorer version, e can be null or undefined. *)\n         if not (Js.Opt.test (some e))\n         then (\n           let e = window_event () in\n           let res = f e in\n           if not (Js.to_bool res) then e##.returnValue := res;\n           res)\n         else\n           let res = f e in\n           if not (Js.to_bool res) then (Js.Unsafe.coerce e)##preventDefault;\n           res))\n\nlet full_handler f =\n  Js.some\n    (Js.Unsafe.meth_callback (fun this e ->\n         (* depending on the internet explorer version, e can be null or undefined *)\n         if not (Js.Opt.test (some e))\n         then (\n           let e = window_event () in\n           let res = f this e in\n           if not (Js.to_bool res) then e##.returnValue := res;\n           res)\n         else\n           let res = f this e in\n           if not (Js.to_bool res) then (Js.Unsafe.coerce e)##preventDefault;\n           res))\n\nlet invoke_handler (f : ('a, 'b) event_listener) (this : 'a) (event : 'b) : bool t =\n  Js.Unsafe.call f this [|Js.Unsafe.inject event|]\n\nlet eventTarget (e : (< .. > as 'a) #event t) : 'a t =\n  let target =\n    Opt.get e##.target (fun () -> Opt.get e##.srcElement (fun () -> raise Not_found))\n  in\n  if Js.instanceof target Js.Unsafe.global##._Node\n  then\n    (* Workaround for Safari bug *)\n    let target' : node Js.t = Js.Unsafe.coerce target in\n    if target'##.nodeType == TEXT\n    then Js.Unsafe.coerce (Opt.get target'##.parentNode (fun () -> assert false))\n    else target\n  else target\n\nmodule Event = struct\n  type 'a typ = Js.js_string Js.t\n\n  let make s = Js.string s\nend\n\ntype event_listener_id = unit -> unit\n\nlet addEventListener (e : (< .. > as 'a) t) typ h capt =\n  if (Js.Unsafe.coerce e)##.addEventListener == Js.undefined\n  then\n    let ev = (Js.string \"on\")##concat typ in\n    let callback e = Js.Unsafe.call (h, e, [||]) in\n    let () = (Js.Unsafe.coerce e)##attachEvent ev callback in\n    fun () -> (Js.Unsafe.coerce e)##detachEvent ev callback\n  else\n    let () = (Js.Unsafe.coerce e)##addEventListener typ h capt in\n    fun () -> (Js.Unsafe.coerce e)##removeEventListener typ h capt\n\nlet removeEventListener id = id ()\n\nlet preventDefault ev =\n  if Js.Optdef.test (Js.Unsafe.coerce ev)##.preventDefault (* IE hack *)\n  then (Js.Unsafe.coerce ev)##preventDefault\n  else (Js.Unsafe.coerce ev)##.returnValue := Js.bool false\n\n(* IE < 9 *)\n\nclass type stringList =\n  object\n    method item : int -> js_string t opt meth\n\n    method length : int readonly_prop\n\n    method contains : js_string t -> bool t meth\n  end\n","(* This file is part of Lwt, released under the MIT license. See LICENSE.md for\n   details, or visit https://github.com/ocsigen/lwt/blob/master/LICENSE.md. *)\n\n\n\nexception Empty\n\ntype 'a t = {\n  mutable prev : 'a t;\n  mutable next : 'a t;\n}\n\ntype 'a node = {\n  mutable node_prev : 'a t;\n  mutable node_next : 'a t;\n  mutable node_data : 'a;\n  mutable node_active : bool;\n}\n\nexternal seq_of_node : 'a node -> 'a t = \"%identity\"\nexternal node_of_seq : 'a t -> 'a node = \"%identity\"\n\n(* +-----------------------------------------------------------------+\n   | Operations on nodes                                             |\n   +-----------------------------------------------------------------+ *)\n\nlet get node =\n  node.node_data\n\nlet set node data =\n  node.node_data <- data\n\nlet remove node =\n  if node.node_active then begin\n    node.node_active <- false;\n    let seq = seq_of_node node in\n    seq.prev.next <- seq.next;\n    seq.next.prev <- seq.prev\n  end\n\n(* +-----------------------------------------------------------------+\n   | Operations on sequences                                         |\n   +-----------------------------------------------------------------+ *)\n\nlet create () =\n  let rec seq = { prev = seq; next = seq } in\n  seq\n\nlet is_empty seq = seq.next == seq\n\nlet length seq =\n  let rec loop curr len =\n    if curr == seq then\n      len\n    else\n      let node = node_of_seq curr in loop node.node_next (len + 1)\n  in\n  loop seq.next 0\n\nlet add_l data seq =\n  let node = { node_prev = seq; node_next = seq.next; node_data = data; node_active = true } in\n  seq.next.prev <- seq_of_node node;\n  seq.next <- seq_of_node node;\n  node\n\nlet add_r data seq =\n  let node = { node_prev = seq.prev; node_next = seq; node_data = data; node_active = true } in\n  seq.prev.next <- seq_of_node node;\n  seq.prev <- seq_of_node node;\n  node\n\nlet take_l seq =\n  if is_empty seq then\n    raise Empty\n  else begin\n    let node = node_of_seq seq.next in\n    remove node;\n    node.node_data\n  end\n\nlet take_r seq =\n  if is_empty seq then\n    raise Empty\n  else begin\n    let node = node_of_seq seq.prev in\n    remove node;\n    node.node_data\n  end\n\nlet take_opt_l seq =\n  if is_empty seq then\n    None\n  else begin\n    let node = node_of_seq seq.next in\n    remove node;\n    Some node.node_data\n  end\n\nlet take_opt_r seq =\n  if is_empty seq then\n    None\n  else begin\n    let node = node_of_seq seq.prev in\n    remove node;\n    Some node.node_data\n  end\n\nlet transfer_l s1 s2 =\n  s2.next.prev <- s1.prev;\n  s1.prev.next <- s2.next;\n  s2.next <- s1.next;\n  s1.next.prev <- s2;\n  s1.prev <- s1;\n  s1.next <- s1\n\nlet transfer_r s1 s2 =\n  s2.prev.next <- s1.next;\n  s1.next.prev <- s2.prev;\n  s2.prev <- s1.prev;\n  s1.prev.next <- s2;\n  s1.prev <- s1;\n  s1.next <- s1\n\nlet iter_l f seq =\n  let rec loop curr =\n    if curr != seq then begin\n      let node = node_of_seq curr in\n      if node.node_active then f node.node_data;\n      loop node.node_next\n    end\n  in\n  loop seq.next\n\nlet iter_r f seq =\n  let rec loop curr =\n    if curr != seq then begin\n      let node = node_of_seq curr in\n      if node.node_active then f node.node_data;\n      loop node.node_prev\n    end\n  in\n  loop seq.prev\n\nlet iter_node_l f seq =\n  let rec loop curr =\n    if curr != seq then begin\n      let node = node_of_seq curr in\n      if node.node_active then f node;\n      loop node.node_next\n    end\n  in\n  loop seq.next\n\nlet iter_node_r f seq =\n  let rec loop curr =\n    if curr != seq then begin\n      let node = node_of_seq curr in\n      if node.node_active then f node;\n      loop node.node_prev\n    end\n  in\n  loop seq.prev\n\nlet fold_l f seq acc =\n  let rec loop curr acc =\n    if curr == seq then\n      acc\n    else\n      let node = node_of_seq curr in\n      if node.node_active then\n        loop node.node_next (f node.node_data acc)\n      else\n        loop node.node_next acc\n  in\n  loop seq.next acc\n\nlet fold_r f seq acc =\n  let rec loop curr acc =\n    if curr == seq then\n      acc\n    else\n      let node = node_of_seq curr in\n      if node.node_active then\n        loop node.node_prev (f node.node_data acc)\n      else\n        loop node.node_prev acc\n  in\n  loop seq.prev acc\n\nlet find_node_l f seq =\n  let rec loop curr =\n    if curr != seq then\n      let node = node_of_seq curr in\n      if node.node_active then\n        if f node.node_data then\n          node\n        else\n          loop node.node_next\n      else\n        loop node.node_next\n    else\n      raise Not_found\n  in\n  loop seq.next\n\nlet find_node_r f seq =\n  let rec loop curr =\n    if curr != seq then\n      let node = node_of_seq curr in\n      if node.node_active then\n        if f node.node_data then\n          node\n        else\n          loop node.node_prev\n      else\n        loop node.node_prev\n    else\n      raise Not_found\n  in\n  loop seq.prev\n\nlet find_node_opt_l f seq =\n  try Some (find_node_l f seq) with Not_found -> None\n\nlet find_node_opt_r f seq =\n  try Some (find_node_r f seq) with Not_found -> None\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js_of_ocaml\n\nlet sleep d =\n  let t, w = Lwt.task () in\n  let id = Dom_html.setTimeout (Lwt.wakeup w) (d *. 1000.) in\n  Lwt.on_cancel t (fun () -> Dom_html.clearTimeout id);\n  t\n\nlet yield () = sleep 0.\n\nlet wakeup = function\n  | 1 -> ignore (Dom_html.window##setTimeout (Js.wrap_callback Lwt.wakeup_paused) 0.)\n  | _ -> ()\n\nlet () = Lwt.register_pause_notifier wakeup\n\nlet prerr_string s = Firebug.console##log (Js.string s)\n\nlet _ =\n  Lwt.async_exception_hook :=\n    fun exn ->\n      prerr_string \"Exception during Lwt.async: \";\n      prerr_string (Printexc.to_string exn);\n      Printexc.print_backtrace stderr\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* List operations *)\n\nlet rec length_aux len = function\n    [] -> len\n  | _::l -> length_aux (len + 1) l\n\nlet length l = length_aux 0 l\n\nlet cons a l = a::l\n\nlet hd = function\n    [] -> failwith \"hd\"\n  | a::_ -> a\n\nlet tl = function\n    [] -> failwith \"tl\"\n  | _::l -> l\n\nlet nth l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> failwith \"nth\"\n    | a::l -> if n = 0 then a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet nth_opt l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> None\n    | a::l -> if n = 0 then Some a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet append = (@)\n\nlet rec rev_append l1 l2 =\n  match l1 with\n    [] -> l2\n  | a :: l -> rev_append l (a :: l2)\n\nlet rev l = rev_append l []\n\nlet rec init_tailrec_aux acc i n f =\n  if i >= n then acc\n  else init_tailrec_aux (f i :: acc) (i+1) n f\n\nlet rec init_aux i n f =\n  if i >= n then []\n  else\n    let r = f i in\n    r :: init_aux (i+1) n f\n\nlet rev_init_threshold =\n  match Sys.backend_type with\n  | Sys.Native | Sys.Bytecode -> 10_000\n  (* We don't known the size of the stack, better be safe and assume it's small. *)\n  | Sys.Other _ -> 50\n\nlet init len f =\n  if len < 0 then invalid_arg \"List.init\" else\n  if len > rev_init_threshold then rev (init_tailrec_aux [] 0 len f)\n  else init_aux 0 len f\n\nlet rec flatten = function\n    [] -> []\n  | l::r -> l @ flatten r\n\nlet concat = flatten\n\nlet rec map f = function\n    [] -> []\n  | a::l -> let r = f a in r :: map f l\n\nlet rec mapi i f = function\n    [] -> []\n  | a::l -> let r = f i a in r :: mapi (i + 1) f l\n\nlet mapi f l = mapi 0 f l\n\nlet rev_map f l =\n  let rec rmap_f accu = function\n    | [] -> accu\n    | a::l -> rmap_f (f a :: accu) l\n  in\n  rmap_f [] l\n\n\nlet rec iter f = function\n    [] -> ()\n  | a::l -> f a; iter f l\n\nlet rec iteri i f = function\n    [] -> ()\n  | a::l -> f i a; iteri (i + 1) f l\n\nlet iteri f l = iteri 0 f l\n\nlet rec fold_left f accu l =\n  match l with\n    [] -> accu\n  | a::l -> fold_left f (f accu a) l\n\nlet rec fold_right f l accu =\n  match l with\n    [] -> accu\n  | a::l -> f a (fold_right f l accu)\n\nlet rec map2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> let r = f a1 a2 in r :: map2 f l1 l2\n  | (_, _) -> invalid_arg \"List.map2\"\n\nlet rev_map2 f l1 l2 =\n  let rec rmap2_f accu l1 l2 =\n    match (l1, l2) with\n    | ([], []) -> accu\n    | (a1::l1, a2::l2) -> rmap2_f (f a1 a2 :: accu) l1 l2\n    | (_, _) -> invalid_arg \"List.rev_map2\"\n  in\n  rmap2_f [] l1 l2\n\n\nlet rec iter2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> ()\n  | (a1::l1, a2::l2) -> f a1 a2; iter2 f l1 l2\n  | (_, _) -> invalid_arg \"List.iter2\"\n\nlet rec fold_left2 f accu l1 l2 =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> fold_left2 f (f accu a1 a2) l1 l2\n  | (_, _) -> invalid_arg \"List.fold_left2\"\n\nlet rec fold_right2 f l1 l2 accu =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> f a1 a2 (fold_right2 f l1 l2 accu)\n  | (_, _) -> invalid_arg \"List.fold_right2\"\n\nlet rec for_all p = function\n    [] -> true\n  | a::l -> p a && for_all p l\n\nlet rec exists p = function\n    [] -> false\n  | a::l -> p a || exists p l\n\nlet rec for_all2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> true\n  | (a1::l1, a2::l2) -> p a1 a2 && for_all2 p l1 l2\n  | (_, _) -> invalid_arg \"List.for_all2\"\n\nlet rec exists2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> false\n  | (a1::l1, a2::l2) -> p a1 a2 || exists2 p l1 l2\n  | (_, _) -> invalid_arg \"List.exists2\"\n\nlet rec mem x = function\n    [] -> false\n  | a::l -> compare a x = 0 || mem x l\n\nlet rec memq x = function\n    [] -> false\n  | a::l -> a == x || memq x l\n\nlet rec assoc x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if compare a x = 0 then b else assoc x l\n\nlet rec assoc_opt x = function\n    [] -> None\n  | (a,b)::l -> if compare a x = 0 then Some b else assoc_opt x l\n\nlet rec assq x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if a == x then b else assq x l\n\nlet rec assq_opt x = function\n    [] -> None\n  | (a,b)::l -> if a == x then Some b else assq_opt x l\n\nlet rec mem_assoc x = function\n  | [] -> false\n  | (a, _) :: l -> compare a x = 0 || mem_assoc x l\n\nlet rec mem_assq x = function\n  | [] -> false\n  | (a, _) :: l -> a == x || mem_assq x l\n\nlet rec remove_assoc x = function\n  | [] -> []\n  | (a, _ as pair) :: l ->\n      if compare a x = 0 then l else pair :: remove_assoc x l\n\nlet rec remove_assq x = function\n  | [] -> []\n  | (a, _ as pair) :: l -> if a == x then l else pair :: remove_assq x l\n\nlet rec find p = function\n  | [] -> raise Not_found\n  | x :: l -> if p x then x else find p l\n\nlet rec find_opt p = function\n  | [] -> None\n  | x :: l -> if p x then Some x else find_opt p l\n\nlet find_all p =\n  let rec find accu = function\n  | [] -> rev accu\n  | x :: l -> if p x then find (x :: accu) l else find accu l in\n  find []\n\nlet filter = find_all\n\nlet partition p l =\n  let rec part yes no = function\n  | [] -> (rev yes, rev no)\n  | x :: l -> if p x then part (x :: yes) no l else part yes (x :: no) l in\n  part [] [] l\n\nlet rec split = function\n    [] -> ([], [])\n  | (x,y)::l ->\n      let (rx, ry) = split l in (x::rx, y::ry)\n\nlet rec combine l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> (a1, a2) :: combine l1 l2\n  | (_, _) -> invalid_arg \"List.combine\"\n\n(** sorting *)\n\nlet rec merge cmp l1 l2 =\n  match l1, l2 with\n  | [], l2 -> l2\n  | l1, [] -> l1\n  | h1 :: t1, h2 :: t2 ->\n      if cmp h1 h2 <= 0\n      then h1 :: merge cmp t1 l2\n      else h2 :: merge cmp l1 t2\n\n\nlet rec chop k l =\n  if k = 0 then l else begin\n    match l with\n    | _::t -> chop (k-1) t\n    | _ -> assert false\n  end\n\n\nlet stable_sort cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 <= 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       if cmp x1 x2 <= 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       if cmp x1 x2 <= 0 then begin\n         if cmp x2 x3 <= 0 then [x1; x2; x3]\n         else if cmp x1 x3 <= 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         if cmp x1 x3 <= 0 then [x2; x1; x3]\n         else if cmp x2 x3 <= 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = rev_sort n1 l in\n       let s2 = rev_sort n2 l2 in\n       rev_merge_rev s1 s2 []\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       if cmp x1 x2 > 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       if cmp x1 x2 > 0 then begin\n         if cmp x2 x3 > 0 then [x1; x2; x3]\n         else if cmp x1 x3 > 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         if cmp x1 x3 > 0 then [x2; x1; x3]\n         else if cmp x2 x3 > 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = sort n1 l in\n       let s2 = sort n2 l2 in\n       rev_merge s1 s2 []\n  in\n  let len = length l in\n  if len < 2 then l else sort len l\n\n\nlet sort = stable_sort\nlet fast_sort = stable_sort\n\n(* Note: on a list of length between about 100000 (depending on the minor\n   heap size and the type of the list) and Sys.max_array_size, it is\n   actually faster to use the following, but it might also use more memory\n   because the argument list cannot be deallocated incrementally.\n\n   Also, there seems to be a bug in this code or in the\n   implementation of obj_truncate.\n\nexternal obj_truncate : 'a array -> int -> unit = \"caml_obj_truncate\"\n\nlet array_to_list_in_place a =\n  let l = Array.length a in\n  let rec loop accu n p =\n    if p <= 0 then accu else begin\n      if p = n then begin\n        obj_truncate a p;\n        loop (a.(p-1) :: accu) (n-1000) (p-1)\n      end else begin\n        loop (a.(p-1) :: accu) n (p-1)\n      end\n    end\n  in\n  loop [] (l-1000) l\n\n\nlet stable_sort cmp l =\n  let a = Array.of_list l in\n  Array.stable_sort cmp a;\n  array_to_list_in_place a\n\n*)\n\n\n(** sorting + removing duplicates *)\n\nlet sort_uniq cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge t1 t2 (h1::accu)\n        else if c < 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge_rev t1 t2 (h1::accu)\n        else if c > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then [x1]\n       else if c < 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x2]\n         else if c < 0 then [x2; x3] else [x3; x2]\n       end else if c < 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x1; x2]\n         else if c < 0 then [x1; x2; x3]\n         else let c = cmp x1 x3 in\n         if c = 0 then [x1; x2]\n         else if c < 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         let c = cmp x1 x3 in\n         if c = 0 then [x2; x1]\n         else if c < 0 then [x2; x1; x3]\n         else let c = cmp x2 x3 in\n         if c = 0 then [x2; x1]\n         else if c < 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = rev_sort n1 l in\n       let s2 = rev_sort n2 l2 in\n       rev_merge_rev s1 s2 []\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then [x1]\n       else if c > 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x2]\n         else if c > 0 then [x2; x3] else [x3; x2]\n       end else if c > 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x1; x2]\n         else if c > 0 then [x1; x2; x3]\n         else let c = cmp x1 x3 in\n         if c = 0 then [x1; x2]\n         else if c > 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         let c = cmp x1 x3 in\n         if c = 0 then [x2; x1]\n         else if c > 0 then [x2; x1; x3]\n         else let c = cmp x2 x3 in\n         if c = 0 then [x2; x1]\n         else if c > 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = sort n1 l in\n       let s2 = sort n2 l2 in\n       rev_merge s1 s2 []\n  in\n  let len = length l in\n  if len < 2 then l else sort len l\n\nlet rec compare_lengths l1 l2 =\n  match l1, l2 with\n  | [], [] -> 0\n  | [], _ -> -1\n  | _, [] -> 1\n  | _ :: l1, _ :: l2 -> compare_lengths l1 l2\n;;\n\nlet rec compare_length_with l n =\n  match l with\n  | [] ->\n    if n = 0 then 0 else\n      if n > 0 then -1 else 1\n  | _ :: l ->\n    if n <= 0 then 1 else\n      compare_length_with l (n-1)\n;;\n\n(** {6 Iterators} *)\n\nlet to_seq l =\n  let rec aux l () = match l with\n    | [] -> Seq.Nil\n    | x :: tail -> Seq.Cons (x, aux tail)\n  in\n  aux l\n\nlet of_seq seq =\n  let rec direct depth seq : _ list =\n    if depth=0\n    then\n      Seq.fold_left (fun acc x -> x::acc) [] seq\n      |> rev (* tailrec *)\n    else match seq() with\n      | Seq.Nil -> []\n      | Seq.Cons (x, next) -> x :: direct (depth-1) next\n  in\n  direct 500 seq\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Ensure that [at_exit] functions are called at the end of every program *)\n\nlet _ = do_at_exit()\n"]}